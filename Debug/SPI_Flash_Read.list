
SPI_Flash_Read.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003010  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000020c  0800311c  0800311c  0000411c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003328  08003328  0000505c  2**0
                  CONTENTS
  4 .ARM          00000008  08003328  08003328  00004328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003330  08003330  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003330  08003330  00004330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003334  08003334  00004334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003338  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c4  2000005c  08003394  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000320  08003394  00005320  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008991  00000000  00000000  00005085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001806  00000000  00000000  0000da16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000848  00000000  00000000  0000f220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000653  00000000  00000000  0000fa68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017250  00000000  00000000  000100bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a2ae  00000000  00000000  0002730b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083b7c  00000000  00000000  000315b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b5135  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025f8  00000000  00000000  000b5178  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000b7770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003104 	.word	0x08003104

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08003104 	.word	0x08003104

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000160:	f000 fc74 	bl	8000a4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000164:	f000 f80a 	bl	800017c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000168:	f000 f8ae 	bl	80002c8 <MX_GPIO_Init>
  MX_SPI1_Init();
 800016c:	f000 f84c 	bl	8000208 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000170:	f000 f880 	bl	8000274 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  w25_Init();
 8000174:	f000 fa88 	bl	8000688 <w25_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000178:	bf00      	nop
 800017a:	e7fd      	b.n	8000178 <main+0x1c>

0800017c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	b090      	sub	sp, #64	@ 0x40
 8000180:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000182:	f107 0318 	add.w	r3, r7, #24
 8000186:	2228      	movs	r2, #40	@ 0x28
 8000188:	2100      	movs	r1, #0
 800018a:	4618      	mov	r0, r3
 800018c:	f002 fb2a 	bl	80027e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000190:	1d3b      	adds	r3, r7, #4
 8000192:	2200      	movs	r2, #0
 8000194:	601a      	str	r2, [r3, #0]
 8000196:	605a      	str	r2, [r3, #4]
 8000198:	609a      	str	r2, [r3, #8]
 800019a:	60da      	str	r2, [r3, #12]
 800019c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800019e:	2301      	movs	r3, #1
 80001a0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001a2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001a8:	2300      	movs	r3, #0
 80001aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ac:	2301      	movs	r3, #1
 80001ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001b0:	2302      	movs	r3, #2
 80001b2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001b4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001ba:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80001be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001c0:	f107 0318 	add.w	r3, r7, #24
 80001c4:	4618      	mov	r0, r3
 80001c6:	f000 ff23 	bl	8001010 <HAL_RCC_OscConfig>
 80001ca:	4603      	mov	r3, r0
 80001cc:	2b00      	cmp	r3, #0
 80001ce:	d001      	beq.n	80001d4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80001d0:	f000 f8b8 	bl	8000344 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001d4:	230f      	movs	r3, #15
 80001d6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001d8:	2302      	movs	r3, #2
 80001da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001dc:	2300      	movs	r3, #0
 80001de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80001e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001e6:	2300      	movs	r3, #0
 80001e8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001ea:	1d3b      	adds	r3, r7, #4
 80001ec:	2102      	movs	r1, #2
 80001ee:	4618      	mov	r0, r3
 80001f0:	f001 f990 	bl	8001514 <HAL_RCC_ClockConfig>
 80001f4:	4603      	mov	r3, r0
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d001      	beq.n	80001fe <SystemClock_Config+0x82>
  {
    Error_Handler();
 80001fa:	f000 f8a3 	bl	8000344 <Error_Handler>
  }
}
 80001fe:	bf00      	nop
 8000200:	3740      	adds	r7, #64	@ 0x40
 8000202:	46bd      	mov	sp, r7
 8000204:	bd80      	pop	{r7, pc}
	...

08000208 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800020c:	4b17      	ldr	r3, [pc, #92]	@ (800026c <MX_SPI1_Init+0x64>)
 800020e:	4a18      	ldr	r2, [pc, #96]	@ (8000270 <MX_SPI1_Init+0x68>)
 8000210:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000212:	4b16      	ldr	r3, [pc, #88]	@ (800026c <MX_SPI1_Init+0x64>)
 8000214:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000218:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800021a:	4b14      	ldr	r3, [pc, #80]	@ (800026c <MX_SPI1_Init+0x64>)
 800021c:	2200      	movs	r2, #0
 800021e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000220:	4b12      	ldr	r3, [pc, #72]	@ (800026c <MX_SPI1_Init+0x64>)
 8000222:	2200      	movs	r2, #0
 8000224:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000226:	4b11      	ldr	r3, [pc, #68]	@ (800026c <MX_SPI1_Init+0x64>)
 8000228:	2200      	movs	r2, #0
 800022a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800022c:	4b0f      	ldr	r3, [pc, #60]	@ (800026c <MX_SPI1_Init+0x64>)
 800022e:	2200      	movs	r2, #0
 8000230:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000232:	4b0e      	ldr	r3, [pc, #56]	@ (800026c <MX_SPI1_Init+0x64>)
 8000234:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000238:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800023a:	4b0c      	ldr	r3, [pc, #48]	@ (800026c <MX_SPI1_Init+0x64>)
 800023c:	2220      	movs	r2, #32
 800023e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000240:	4b0a      	ldr	r3, [pc, #40]	@ (800026c <MX_SPI1_Init+0x64>)
 8000242:	2200      	movs	r2, #0
 8000244:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000246:	4b09      	ldr	r3, [pc, #36]	@ (800026c <MX_SPI1_Init+0x64>)
 8000248:	2200      	movs	r2, #0
 800024a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800024c:	4b07      	ldr	r3, [pc, #28]	@ (800026c <MX_SPI1_Init+0x64>)
 800024e:	2200      	movs	r2, #0
 8000250:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000252:	4b06      	ldr	r3, [pc, #24]	@ (800026c <MX_SPI1_Init+0x64>)
 8000254:	220a      	movs	r2, #10
 8000256:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000258:	4804      	ldr	r0, [pc, #16]	@ (800026c <MX_SPI1_Init+0x64>)
 800025a:	f001 fae9 	bl	8001830 <HAL_SPI_Init>
 800025e:	4603      	mov	r3, r0
 8000260:	2b00      	cmp	r3, #0
 8000262:	d001      	beq.n	8000268 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000264:	f000 f86e 	bl	8000344 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000268:	bf00      	nop
 800026a:	bd80      	pop	{r7, pc}
 800026c:	20000078 	.word	0x20000078
 8000270:	40013000 	.word	0x40013000

08000274 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000278:	4b11      	ldr	r3, [pc, #68]	@ (80002c0 <MX_USART1_UART_Init+0x4c>)
 800027a:	4a12      	ldr	r2, [pc, #72]	@ (80002c4 <MX_USART1_UART_Init+0x50>)
 800027c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800027e:	4b10      	ldr	r3, [pc, #64]	@ (80002c0 <MX_USART1_UART_Init+0x4c>)
 8000280:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000284:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000286:	4b0e      	ldr	r3, [pc, #56]	@ (80002c0 <MX_USART1_UART_Init+0x4c>)
 8000288:	2200      	movs	r2, #0
 800028a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800028c:	4b0c      	ldr	r3, [pc, #48]	@ (80002c0 <MX_USART1_UART_Init+0x4c>)
 800028e:	2200      	movs	r2, #0
 8000290:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000292:	4b0b      	ldr	r3, [pc, #44]	@ (80002c0 <MX_USART1_UART_Init+0x4c>)
 8000294:	2200      	movs	r2, #0
 8000296:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000298:	4b09      	ldr	r3, [pc, #36]	@ (80002c0 <MX_USART1_UART_Init+0x4c>)
 800029a:	220c      	movs	r2, #12
 800029c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800029e:	4b08      	ldr	r3, [pc, #32]	@ (80002c0 <MX_USART1_UART_Init+0x4c>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80002a4:	4b06      	ldr	r3, [pc, #24]	@ (80002c0 <MX_USART1_UART_Init+0x4c>)
 80002a6:	2200      	movs	r2, #0
 80002a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80002aa:	4805      	ldr	r0, [pc, #20]	@ (80002c0 <MX_USART1_UART_Init+0x4c>)
 80002ac:	f002 f855 	bl	800235a <HAL_UART_Init>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d001      	beq.n	80002ba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80002b6:	f000 f845 	bl	8000344 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80002ba:	bf00      	nop
 80002bc:	bd80      	pop	{r7, pc}
 80002be:	bf00      	nop
 80002c0:	200000d0 	.word	0x200000d0
 80002c4:	40013800 	.word	0x40013800

080002c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b086      	sub	sp, #24
 80002cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ce:	f107 0308 	add.w	r3, r7, #8
 80002d2:	2200      	movs	r2, #0
 80002d4:	601a      	str	r2, [r3, #0]
 80002d6:	605a      	str	r2, [r3, #4]
 80002d8:	609a      	str	r2, [r3, #8]
 80002da:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002dc:	4b17      	ldr	r3, [pc, #92]	@ (800033c <MX_GPIO_Init+0x74>)
 80002de:	699b      	ldr	r3, [r3, #24]
 80002e0:	4a16      	ldr	r2, [pc, #88]	@ (800033c <MX_GPIO_Init+0x74>)
 80002e2:	f043 0320 	orr.w	r3, r3, #32
 80002e6:	6193      	str	r3, [r2, #24]
 80002e8:	4b14      	ldr	r3, [pc, #80]	@ (800033c <MX_GPIO_Init+0x74>)
 80002ea:	699b      	ldr	r3, [r3, #24]
 80002ec:	f003 0320 	and.w	r3, r3, #32
 80002f0:	607b      	str	r3, [r7, #4]
 80002f2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002f4:	4b11      	ldr	r3, [pc, #68]	@ (800033c <MX_GPIO_Init+0x74>)
 80002f6:	699b      	ldr	r3, [r3, #24]
 80002f8:	4a10      	ldr	r2, [pc, #64]	@ (800033c <MX_GPIO_Init+0x74>)
 80002fa:	f043 0304 	orr.w	r3, r3, #4
 80002fe:	6193      	str	r3, [r2, #24]
 8000300:	4b0e      	ldr	r3, [pc, #56]	@ (800033c <MX_GPIO_Init+0x74>)
 8000302:	699b      	ldr	r3, [r3, #24]
 8000304:	f003 0304 	and.w	r3, r3, #4
 8000308:	603b      	str	r3, [r7, #0]
 800030a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800030c:	2200      	movs	r2, #0
 800030e:	2110      	movs	r1, #16
 8000310:	480b      	ldr	r0, [pc, #44]	@ (8000340 <MX_GPIO_Init+0x78>)
 8000312:	f000 fe65 	bl	8000fe0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000316:	2310      	movs	r3, #16
 8000318:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800031a:	2301      	movs	r3, #1
 800031c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800031e:	2300      	movs	r3, #0
 8000320:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000322:	2303      	movs	r3, #3
 8000324:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000326:	f107 0308 	add.w	r3, r7, #8
 800032a:	4619      	mov	r1, r3
 800032c:	4804      	ldr	r0, [pc, #16]	@ (8000340 <MX_GPIO_Init+0x78>)
 800032e:	f000 fcd3 	bl	8000cd8 <HAL_GPIO_Init>

}
 8000332:	bf00      	nop
 8000334:	3718      	adds	r7, #24
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	40021000 	.word	0x40021000
 8000340:	40010800 	.word	0x40010800

08000344 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000348:	b672      	cpsid	i
}
 800034a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800034c:	bf00      	nop
 800034e:	e7fd      	b.n	800034c <Error_Handler+0x8>

08000350 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000350:	b480      	push	{r7}
 8000352:	b085      	sub	sp, #20
 8000354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000356:	4b15      	ldr	r3, [pc, #84]	@ (80003ac <HAL_MspInit+0x5c>)
 8000358:	699b      	ldr	r3, [r3, #24]
 800035a:	4a14      	ldr	r2, [pc, #80]	@ (80003ac <HAL_MspInit+0x5c>)
 800035c:	f043 0301 	orr.w	r3, r3, #1
 8000360:	6193      	str	r3, [r2, #24]
 8000362:	4b12      	ldr	r3, [pc, #72]	@ (80003ac <HAL_MspInit+0x5c>)
 8000364:	699b      	ldr	r3, [r3, #24]
 8000366:	f003 0301 	and.w	r3, r3, #1
 800036a:	60bb      	str	r3, [r7, #8]
 800036c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800036e:	4b0f      	ldr	r3, [pc, #60]	@ (80003ac <HAL_MspInit+0x5c>)
 8000370:	69db      	ldr	r3, [r3, #28]
 8000372:	4a0e      	ldr	r2, [pc, #56]	@ (80003ac <HAL_MspInit+0x5c>)
 8000374:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000378:	61d3      	str	r3, [r2, #28]
 800037a:	4b0c      	ldr	r3, [pc, #48]	@ (80003ac <HAL_MspInit+0x5c>)
 800037c:	69db      	ldr	r3, [r3, #28]
 800037e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000382:	607b      	str	r3, [r7, #4]
 8000384:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000386:	4b0a      	ldr	r3, [pc, #40]	@ (80003b0 <HAL_MspInit+0x60>)
 8000388:	685b      	ldr	r3, [r3, #4]
 800038a:	60fb      	str	r3, [r7, #12]
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000392:	60fb      	str	r3, [r7, #12]
 8000394:	68fb      	ldr	r3, [r7, #12]
 8000396:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800039a:	60fb      	str	r3, [r7, #12]
 800039c:	4a04      	ldr	r2, [pc, #16]	@ (80003b0 <HAL_MspInit+0x60>)
 800039e:	68fb      	ldr	r3, [r7, #12]
 80003a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003a2:	bf00      	nop
 80003a4:	3714      	adds	r7, #20
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bc80      	pop	{r7}
 80003aa:	4770      	bx	lr
 80003ac:	40021000 	.word	0x40021000
 80003b0:	40010000 	.word	0x40010000

080003b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b088      	sub	sp, #32
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003bc:	f107 0310 	add.w	r3, r7, #16
 80003c0:	2200      	movs	r2, #0
 80003c2:	601a      	str	r2, [r3, #0]
 80003c4:	605a      	str	r2, [r3, #4]
 80003c6:	609a      	str	r2, [r3, #8]
 80003c8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	4a1b      	ldr	r2, [pc, #108]	@ (800043c <HAL_SPI_MspInit+0x88>)
 80003d0:	4293      	cmp	r3, r2
 80003d2:	d12f      	bne.n	8000434 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80003d4:	4b1a      	ldr	r3, [pc, #104]	@ (8000440 <HAL_SPI_MspInit+0x8c>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	4a19      	ldr	r2, [pc, #100]	@ (8000440 <HAL_SPI_MspInit+0x8c>)
 80003da:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80003de:	6193      	str	r3, [r2, #24]
 80003e0:	4b17      	ldr	r3, [pc, #92]	@ (8000440 <HAL_SPI_MspInit+0x8c>)
 80003e2:	699b      	ldr	r3, [r3, #24]
 80003e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80003e8:	60fb      	str	r3, [r7, #12]
 80003ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ec:	4b14      	ldr	r3, [pc, #80]	@ (8000440 <HAL_SPI_MspInit+0x8c>)
 80003ee:	699b      	ldr	r3, [r3, #24]
 80003f0:	4a13      	ldr	r2, [pc, #76]	@ (8000440 <HAL_SPI_MspInit+0x8c>)
 80003f2:	f043 0304 	orr.w	r3, r3, #4
 80003f6:	6193      	str	r3, [r2, #24]
 80003f8:	4b11      	ldr	r3, [pc, #68]	@ (8000440 <HAL_SPI_MspInit+0x8c>)
 80003fa:	699b      	ldr	r3, [r3, #24]
 80003fc:	f003 0304 	and.w	r3, r3, #4
 8000400:	60bb      	str	r3, [r7, #8]
 8000402:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000404:	23a0      	movs	r3, #160	@ 0xa0
 8000406:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000408:	2302      	movs	r3, #2
 800040a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800040c:	2303      	movs	r3, #3
 800040e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000410:	f107 0310 	add.w	r3, r7, #16
 8000414:	4619      	mov	r1, r3
 8000416:	480b      	ldr	r0, [pc, #44]	@ (8000444 <HAL_SPI_MspInit+0x90>)
 8000418:	f000 fc5e 	bl	8000cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800041c:	2340      	movs	r3, #64	@ 0x40
 800041e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000420:	2300      	movs	r3, #0
 8000422:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000424:	2300      	movs	r3, #0
 8000426:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000428:	f107 0310 	add.w	r3, r7, #16
 800042c:	4619      	mov	r1, r3
 800042e:	4805      	ldr	r0, [pc, #20]	@ (8000444 <HAL_SPI_MspInit+0x90>)
 8000430:	f000 fc52 	bl	8000cd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000434:	bf00      	nop
 8000436:	3720      	adds	r7, #32
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}
 800043c:	40013000 	.word	0x40013000
 8000440:	40021000 	.word	0x40021000
 8000444:	40010800 	.word	0x40010800

08000448 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b088      	sub	sp, #32
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000450:	f107 0310 	add.w	r3, r7, #16
 8000454:	2200      	movs	r2, #0
 8000456:	601a      	str	r2, [r3, #0]
 8000458:	605a      	str	r2, [r3, #4]
 800045a:	609a      	str	r2, [r3, #8]
 800045c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	4a1c      	ldr	r2, [pc, #112]	@ (80004d4 <HAL_UART_MspInit+0x8c>)
 8000464:	4293      	cmp	r3, r2
 8000466:	d131      	bne.n	80004cc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000468:	4b1b      	ldr	r3, [pc, #108]	@ (80004d8 <HAL_UART_MspInit+0x90>)
 800046a:	699b      	ldr	r3, [r3, #24]
 800046c:	4a1a      	ldr	r2, [pc, #104]	@ (80004d8 <HAL_UART_MspInit+0x90>)
 800046e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000472:	6193      	str	r3, [r2, #24]
 8000474:	4b18      	ldr	r3, [pc, #96]	@ (80004d8 <HAL_UART_MspInit+0x90>)
 8000476:	699b      	ldr	r3, [r3, #24]
 8000478:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800047c:	60fb      	str	r3, [r7, #12]
 800047e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000480:	4b15      	ldr	r3, [pc, #84]	@ (80004d8 <HAL_UART_MspInit+0x90>)
 8000482:	699b      	ldr	r3, [r3, #24]
 8000484:	4a14      	ldr	r2, [pc, #80]	@ (80004d8 <HAL_UART_MspInit+0x90>)
 8000486:	f043 0304 	orr.w	r3, r3, #4
 800048a:	6193      	str	r3, [r2, #24]
 800048c:	4b12      	ldr	r3, [pc, #72]	@ (80004d8 <HAL_UART_MspInit+0x90>)
 800048e:	699b      	ldr	r3, [r3, #24]
 8000490:	f003 0304 	and.w	r3, r3, #4
 8000494:	60bb      	str	r3, [r7, #8]
 8000496:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000498:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800049c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800049e:	2302      	movs	r3, #2
 80004a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004a2:	2303      	movs	r3, #3
 80004a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004a6:	f107 0310 	add.w	r3, r7, #16
 80004aa:	4619      	mov	r1, r3
 80004ac:	480b      	ldr	r0, [pc, #44]	@ (80004dc <HAL_UART_MspInit+0x94>)
 80004ae:	f000 fc13 	bl	8000cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80004b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80004b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004b8:	2300      	movs	r3, #0
 80004ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004bc:	2300      	movs	r3, #0
 80004be:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004c0:	f107 0310 	add.w	r3, r7, #16
 80004c4:	4619      	mov	r1, r3
 80004c6:	4805      	ldr	r0, [pc, #20]	@ (80004dc <HAL_UART_MspInit+0x94>)
 80004c8:	f000 fc06 	bl	8000cd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80004cc:	bf00      	nop
 80004ce:	3720      	adds	r7, #32
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	40013800 	.word	0x40013800
 80004d8:	40021000 	.word	0x40021000
 80004dc:	40010800 	.word	0x40010800

080004e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004e4:	bf00      	nop
 80004e6:	e7fd      	b.n	80004e4 <NMI_Handler+0x4>

080004e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004ec:	bf00      	nop
 80004ee:	e7fd      	b.n	80004ec <HardFault_Handler+0x4>

080004f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004f4:	bf00      	nop
 80004f6:	e7fd      	b.n	80004f4 <MemManage_Handler+0x4>

080004f8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004fc:	bf00      	nop
 80004fe:	e7fd      	b.n	80004fc <BusFault_Handler+0x4>

08000500 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000504:	bf00      	nop
 8000506:	e7fd      	b.n	8000504 <UsageFault_Handler+0x4>

08000508 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800050c:	bf00      	nop
 800050e:	46bd      	mov	sp, r7
 8000510:	bc80      	pop	{r7}
 8000512:	4770      	bx	lr

08000514 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000518:	bf00      	nop
 800051a:	46bd      	mov	sp, r7
 800051c:	bc80      	pop	{r7}
 800051e:	4770      	bx	lr

08000520 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000524:	bf00      	nop
 8000526:	46bd      	mov	sp, r7
 8000528:	bc80      	pop	{r7}
 800052a:	4770      	bx	lr

0800052c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000530:	f000 fad2 	bl	8000ad8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000534:	bf00      	nop
 8000536:	bd80      	pop	{r7, pc}

08000538 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b086      	sub	sp, #24
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000540:	4a14      	ldr	r2, [pc, #80]	@ (8000594 <_sbrk+0x5c>)
 8000542:	4b15      	ldr	r3, [pc, #84]	@ (8000598 <_sbrk+0x60>)
 8000544:	1ad3      	subs	r3, r2, r3
 8000546:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000548:	697b      	ldr	r3, [r7, #20]
 800054a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800054c:	4b13      	ldr	r3, [pc, #76]	@ (800059c <_sbrk+0x64>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	2b00      	cmp	r3, #0
 8000552:	d102      	bne.n	800055a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000554:	4b11      	ldr	r3, [pc, #68]	@ (800059c <_sbrk+0x64>)
 8000556:	4a12      	ldr	r2, [pc, #72]	@ (80005a0 <_sbrk+0x68>)
 8000558:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800055a:	4b10      	ldr	r3, [pc, #64]	@ (800059c <_sbrk+0x64>)
 800055c:	681a      	ldr	r2, [r3, #0]
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	4413      	add	r3, r2
 8000562:	693a      	ldr	r2, [r7, #16]
 8000564:	429a      	cmp	r2, r3
 8000566:	d207      	bcs.n	8000578 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000568:	f002 f944 	bl	80027f4 <__errno>
 800056c:	4603      	mov	r3, r0
 800056e:	220c      	movs	r2, #12
 8000570:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000572:	f04f 33ff 	mov.w	r3, #4294967295
 8000576:	e009      	b.n	800058c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000578:	4b08      	ldr	r3, [pc, #32]	@ (800059c <_sbrk+0x64>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800057e:	4b07      	ldr	r3, [pc, #28]	@ (800059c <_sbrk+0x64>)
 8000580:	681a      	ldr	r2, [r3, #0]
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	4413      	add	r3, r2
 8000586:	4a05      	ldr	r2, [pc, #20]	@ (800059c <_sbrk+0x64>)
 8000588:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800058a:	68fb      	ldr	r3, [r7, #12]
}
 800058c:	4618      	mov	r0, r3
 800058e:	3718      	adds	r7, #24
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	20005000 	.word	0x20005000
 8000598:	00000400 	.word	0x00000400
 800059c:	20000118 	.word	0x20000118
 80005a0:	20000320 	.word	0x20000320

080005a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005a8:	bf00      	nop
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bc80      	pop	{r7}
 80005ae:	4770      	bx	lr

080005b0 <SPI1_Send>:
uint32_t time = 0; //delay ms
uint8_t timeFlag = 0;
char str[130];
uint8_t buf[10];

void SPI1_Send(uint8_t *dt, uint16_t cnt){
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	460b      	mov	r3, r1
 80005ba:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Transmit(&hspi1, dt, cnt, 5000);
 80005bc:	887a      	ldrh	r2, [r7, #2]
 80005be:	f241 3388 	movw	r3, #5000	@ 0x1388
 80005c2:	6879      	ldr	r1, [r7, #4]
 80005c4:	4803      	ldr	r0, [pc, #12]	@ (80005d4 <SPI1_Send+0x24>)
 80005c6:	f001 f9b7 	bl	8001938 <HAL_SPI_Transmit>
}
 80005ca:	bf00      	nop
 80005cc:	3708      	adds	r7, #8
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	20000078 	.word	0x20000078

080005d8 <SPI1_Recv>:
void SPI1_Recv(uint8_t *dt, uint16_t cnt){
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
 80005e0:	460b      	mov	r3, r1
 80005e2:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Receive(&hspi1, dt, cnt, 5000);
 80005e4:	887a      	ldrh	r2, [r7, #2]
 80005e6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80005ea:	6879      	ldr	r1, [r7, #4]
 80005ec:	4803      	ldr	r0, [pc, #12]	@ (80005fc <SPI1_Recv+0x24>)
 80005ee:	f001 fae7 	bl	8001bc0 <HAL_SPI_Receive>
}
 80005f2:	bf00      	nop
 80005f4:	3708      	adds	r7, #8
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	20000078 	.word	0x20000078

08000600 <w25_Reset>:
void w25_Reset(void){
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
	cs_set();
 8000604:	2200      	movs	r2, #0
 8000606:	2110      	movs	r1, #16
 8000608:	4809      	ldr	r0, [pc, #36]	@ (8000630 <w25_Reset+0x30>)
 800060a:	f000 fce9 	bl	8000fe0 <HAL_GPIO_WritePin>
	buf[0] = w25_ENABLE_RESET;
 800060e:	4b09      	ldr	r3, [pc, #36]	@ (8000634 <w25_Reset+0x34>)
 8000610:	2266      	movs	r2, #102	@ 0x66
 8000612:	701a      	strb	r2, [r3, #0]
	buf[1] = w25_RESET;
 8000614:	4b07      	ldr	r3, [pc, #28]	@ (8000634 <w25_Reset+0x34>)
 8000616:	2299      	movs	r2, #153	@ 0x99
 8000618:	705a      	strb	r2, [r3, #1]
	SPI1_Send(buf, 2);
 800061a:	2102      	movs	r1, #2
 800061c:	4805      	ldr	r0, [pc, #20]	@ (8000634 <w25_Reset+0x34>)
 800061e:	f7ff ffc7 	bl	80005b0 <SPI1_Send>
	cs_reset();
 8000622:	2201      	movs	r2, #1
 8000624:	2110      	movs	r1, #16
 8000626:	4802      	ldr	r0, [pc, #8]	@ (8000630 <w25_Reset+0x30>)
 8000628:	f000 fcda 	bl	8000fe0 <HAL_GPIO_WritePin>
}
 800062c:	bf00      	nop
 800062e:	bd80      	pop	{r7, pc}
 8000630:	40010800 	.word	0x40010800
 8000634:	200001c8 	.word	0x200001c8

08000638 <w25_Read_ID>:
	buf[3] = addr & 0xFF;
	SPI1_Send(buf, 4);
	SPI1_Recv(dat, sz);
	cs_reset();
}
uint32_t w25_Read_ID(void){
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
	uint8_t dt[3];
	buf[0] = w25_GET_JDEC_ID;
 800063e:	4b10      	ldr	r3, [pc, #64]	@ (8000680 <w25_Read_ID+0x48>)
 8000640:	229f      	movs	r2, #159	@ 0x9f
 8000642:	701a      	strb	r2, [r3, #0]
	cs_set();
 8000644:	2200      	movs	r2, #0
 8000646:	2110      	movs	r1, #16
 8000648:	480e      	ldr	r0, [pc, #56]	@ (8000684 <w25_Read_ID+0x4c>)
 800064a:	f000 fcc9 	bl	8000fe0 <HAL_GPIO_WritePin>
	SPI1_Send(buf, 1);
 800064e:	2101      	movs	r1, #1
 8000650:	480b      	ldr	r0, [pc, #44]	@ (8000680 <w25_Read_ID+0x48>)
 8000652:	f7ff ffad 	bl	80005b0 <SPI1_Send>
	SPI1_Recv(dt, 3);
 8000656:	1d3b      	adds	r3, r7, #4
 8000658:	2103      	movs	r1, #3
 800065a:	4618      	mov	r0, r3
 800065c:	f7ff ffbc 	bl	80005d8 <SPI1_Recv>
	cs_reset();
 8000660:	2201      	movs	r2, #1
 8000662:	2110      	movs	r1, #16
 8000664:	4807      	ldr	r0, [pc, #28]	@ (8000684 <w25_Read_ID+0x4c>)
 8000666:	f000 fcbb 	bl	8000fe0 <HAL_GPIO_WritePin>
	return (dt[0] << 16 | dt[1] << 8) | dt[2];
 800066a:	793b      	ldrb	r3, [r7, #4]
 800066c:	041a      	lsls	r2, r3, #16
 800066e:	797b      	ldrb	r3, [r7, #5]
 8000670:	021b      	lsls	r3, r3, #8
 8000672:	4313      	orrs	r3, r2
 8000674:	79ba      	ldrb	r2, [r7, #6]
 8000676:	4313      	orrs	r3, r2
}
 8000678:	4618      	mov	r0, r3
 800067a:	3708      	adds	r7, #8
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	200001c8 	.word	0x200001c8
 8000684:	40010800 	.word	0x40010800

08000688 <w25_Init>:
void w25_Init(void){
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
	delay_ms(100);
 800068e:	2064      	movs	r0, #100	@ 0x64
 8000690:	f000 f990 	bl	80009b4 <delay_ms>
	w25_Reset();
 8000694:	f7ff ffb4 	bl	8000600 <w25_Reset>
	delay_ms(100);
 8000698:	2064      	movs	r0, #100	@ 0x64
 800069a:	f000 f98b 	bl	80009b4 <delay_ms>
	unsigned int ID = w25_Read_ID();
 800069e:	f7ff ffcb 	bl	8000638 <w25_Read_ID>
 80006a2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1,(uint8_t*)"\r\n",2,0x1000);
 80006a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006a8:	2202      	movs	r2, #2
 80006aa:	49ab      	ldr	r1, [pc, #684]	@ (8000958 <w25_Init+0x2d0>)
 80006ac:	48ab      	ldr	r0, [pc, #684]	@ (800095c <w25_Init+0x2d4>)
 80006ae:	f001 fea4 	bl	80023fa <HAL_UART_Transmit>
	 sprintf(str,"ID:0x%X\r\n", ID);
 80006b2:	687a      	ldr	r2, [r7, #4]
 80006b4:	49aa      	ldr	r1, [pc, #680]	@ (8000960 <w25_Init+0x2d8>)
 80006b6:	48ab      	ldr	r0, [pc, #684]	@ (8000964 <w25_Init+0x2dc>)
 80006b8:	f002 f874 	bl	80027a4 <siprintf>
	 HAL_UART_Transmit(&huart1,(uint8_t*)str,strlen(str),0x1000);
 80006bc:	48a9      	ldr	r0, [pc, #676]	@ (8000964 <w25_Init+0x2dc>)
 80006be:	f7ff fd45 	bl	800014c <strlen>
 80006c2:	4603      	mov	r3, r0
 80006c4:	b29a      	uxth	r2, r3
 80006c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006ca:	49a6      	ldr	r1, [pc, #664]	@ (8000964 <w25_Init+0x2dc>)
 80006cc:	48a3      	ldr	r0, [pc, #652]	@ (800095c <w25_Init+0x2d4>)
 80006ce:	f001 fe94 	bl	80023fa <HAL_UART_Transmit>
	 ID &= 0x0000ffff; //маска отсечения manuf ID
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	b29b      	uxth	r3, r3
 80006d6:	607b      	str	r3, [r7, #4]
	 switch(ID)
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 80006de:	3b11      	subs	r3, #17
 80006e0:	2b09      	cmp	r3, #9
 80006e2:	d86a      	bhi.n	80007ba <w25_Init+0x132>
 80006e4:	a201      	add	r2, pc, #4	@ (adr r2, 80006ec <w25_Init+0x64>)
 80006e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ea:	bf00      	nop
 80006ec:	080007ab 	.word	0x080007ab
 80006f0:	0800079b 	.word	0x0800079b
 80006f4:	0800078b 	.word	0x0800078b
 80006f8:	0800077b 	.word	0x0800077b
 80006fc:	0800076b 	.word	0x0800076b
 8000700:	0800075b 	.word	0x0800075b
 8000704:	0800074b 	.word	0x0800074b
 8000708:	08000739 	.word	0x08000739
 800070c:	08000727 	.word	0x08000727
 8000710:	08000715 	.word	0x08000715
	  {
	    case 0x401A:
	      w25_info.BlockCount=1024;
 8000714:	4b94      	ldr	r3, [pc, #592]	@ (8000968 <w25_Init+0x2e0>)
 8000716:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800071a:	615a      	str	r2, [r3, #20]
	      sprintf(str,"w25qxx Chip: w25q512\r\n");
 800071c:	4993      	ldr	r1, [pc, #588]	@ (800096c <w25_Init+0x2e4>)
 800071e:	4891      	ldr	r0, [pc, #580]	@ (8000964 <w25_Init+0x2dc>)
 8000720:	f002 f840 	bl	80027a4 <siprintf>
	      break;
 8000724:	e059      	b.n	80007da <w25_Init+0x152>
	    case 0x4019:
	      w25_info.BlockCount=512;
 8000726:	4b90      	ldr	r3, [pc, #576]	@ (8000968 <w25_Init+0x2e0>)
 8000728:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800072c:	615a      	str	r2, [r3, #20]
	      sprintf(str,"w25qxx Chip: w25q256\r\n");
 800072e:	4990      	ldr	r1, [pc, #576]	@ (8000970 <w25_Init+0x2e8>)
 8000730:	488c      	ldr	r0, [pc, #560]	@ (8000964 <w25_Init+0x2dc>)
 8000732:	f002 f837 	bl	80027a4 <siprintf>
	      break;
 8000736:	e050      	b.n	80007da <w25_Init+0x152>
	    case 0x4018:
	      w25_info.BlockCount=256;
 8000738:	4b8b      	ldr	r3, [pc, #556]	@ (8000968 <w25_Init+0x2e0>)
 800073a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800073e:	615a      	str	r2, [r3, #20]
	      sprintf(str,"w25qxx Chip: w25q128\r\n");
 8000740:	498c      	ldr	r1, [pc, #560]	@ (8000974 <w25_Init+0x2ec>)
 8000742:	4888      	ldr	r0, [pc, #544]	@ (8000964 <w25_Init+0x2dc>)
 8000744:	f002 f82e 	bl	80027a4 <siprintf>
	      break;
 8000748:	e047      	b.n	80007da <w25_Init+0x152>
	    case 0x4017:
	      w25_info.BlockCount=128;
 800074a:	4b87      	ldr	r3, [pc, #540]	@ (8000968 <w25_Init+0x2e0>)
 800074c:	2280      	movs	r2, #128	@ 0x80
 800074e:	615a      	str	r2, [r3, #20]
	      sprintf(str,"w25qxx Chip: w25q64\r\n");
 8000750:	4989      	ldr	r1, [pc, #548]	@ (8000978 <w25_Init+0x2f0>)
 8000752:	4884      	ldr	r0, [pc, #528]	@ (8000964 <w25_Init+0x2dc>)
 8000754:	f002 f826 	bl	80027a4 <siprintf>
	      break;
 8000758:	e03f      	b.n	80007da <w25_Init+0x152>
	    case 0x4016:
	      w25_info.BlockCount=64;
 800075a:	4b83      	ldr	r3, [pc, #524]	@ (8000968 <w25_Init+0x2e0>)
 800075c:	2240      	movs	r2, #64	@ 0x40
 800075e:	615a      	str	r2, [r3, #20]
	      sprintf(str,"w25qxx Chip: w25q32\r\n");
 8000760:	4986      	ldr	r1, [pc, #536]	@ (800097c <w25_Init+0x2f4>)
 8000762:	4880      	ldr	r0, [pc, #512]	@ (8000964 <w25_Init+0x2dc>)
 8000764:	f002 f81e 	bl	80027a4 <siprintf>
	      break;
 8000768:	e037      	b.n	80007da <w25_Init+0x152>
	    case 0x4015:
	      w25_info.BlockCount=32;
 800076a:	4b7f      	ldr	r3, [pc, #508]	@ (8000968 <w25_Init+0x2e0>)
 800076c:	2220      	movs	r2, #32
 800076e:	615a      	str	r2, [r3, #20]
	      sprintf(str,"w25qxx Chip: w25q16\r\n");
 8000770:	4983      	ldr	r1, [pc, #524]	@ (8000980 <w25_Init+0x2f8>)
 8000772:	487c      	ldr	r0, [pc, #496]	@ (8000964 <w25_Init+0x2dc>)
 8000774:	f002 f816 	bl	80027a4 <siprintf>
	      break;
 8000778:	e02f      	b.n	80007da <w25_Init+0x152>
	    case 0x4014:
	      w25_info.BlockCount=16;
 800077a:	4b7b      	ldr	r3, [pc, #492]	@ (8000968 <w25_Init+0x2e0>)
 800077c:	2210      	movs	r2, #16
 800077e:	615a      	str	r2, [r3, #20]
	      sprintf(str,"w25qxx Chip: w25q80\r\n");
 8000780:	4980      	ldr	r1, [pc, #512]	@ (8000984 <w25_Init+0x2fc>)
 8000782:	4878      	ldr	r0, [pc, #480]	@ (8000964 <w25_Init+0x2dc>)
 8000784:	f002 f80e 	bl	80027a4 <siprintf>
	      break;
 8000788:	e027      	b.n	80007da <w25_Init+0x152>
	    case 0x4013:
	      w25_info.BlockCount=8;
 800078a:	4b77      	ldr	r3, [pc, #476]	@ (8000968 <w25_Init+0x2e0>)
 800078c:	2208      	movs	r2, #8
 800078e:	615a      	str	r2, [r3, #20]
	      sprintf(str,"w25qxx Chip: w25q40\r\n");
 8000790:	497d      	ldr	r1, [pc, #500]	@ (8000988 <w25_Init+0x300>)
 8000792:	4874      	ldr	r0, [pc, #464]	@ (8000964 <w25_Init+0x2dc>)
 8000794:	f002 f806 	bl	80027a4 <siprintf>
	      break;
 8000798:	e01f      	b.n	80007da <w25_Init+0x152>
	    case 0x4012:
	      w25_info.BlockCount=4;
 800079a:	4b73      	ldr	r3, [pc, #460]	@ (8000968 <w25_Init+0x2e0>)
 800079c:	2204      	movs	r2, #4
 800079e:	615a      	str	r2, [r3, #20]
	      sprintf(str,"w25qxx Chip: w25q20\r\n");
 80007a0:	497a      	ldr	r1, [pc, #488]	@ (800098c <w25_Init+0x304>)
 80007a2:	4870      	ldr	r0, [pc, #448]	@ (8000964 <w25_Init+0x2dc>)
 80007a4:	f001 fffe 	bl	80027a4 <siprintf>
	      break;
 80007a8:	e017      	b.n	80007da <w25_Init+0x152>
	    case 0x4011:
	      w25_info.BlockCount=2;
 80007aa:	4b6f      	ldr	r3, [pc, #444]	@ (8000968 <w25_Init+0x2e0>)
 80007ac:	2202      	movs	r2, #2
 80007ae:	615a      	str	r2, [r3, #20]
	      sprintf(str,"w25qxx Chip: w25q10\r\n");
 80007b0:	4977      	ldr	r1, [pc, #476]	@ (8000990 <w25_Init+0x308>)
 80007b2:	486c      	ldr	r0, [pc, #432]	@ (8000964 <w25_Init+0x2dc>)
 80007b4:	f001 fff6 	bl	80027a4 <siprintf>
	      break;
 80007b8:	e00f      	b.n	80007da <w25_Init+0x152>
	    default:
	      sprintf(str,"w25qxx Unknown ID\r\n");
 80007ba:	4976      	ldr	r1, [pc, #472]	@ (8000994 <w25_Init+0x30c>)
 80007bc:	4869      	ldr	r0, [pc, #420]	@ (8000964 <w25_Init+0x2dc>)
 80007be:	f001 fff1 	bl	80027a4 <siprintf>
	      HAL_UART_Transmit(&huart1,(uint8_t*)str,strlen(str),0x1000);
 80007c2:	4868      	ldr	r0, [pc, #416]	@ (8000964 <w25_Init+0x2dc>)
 80007c4:	f7ff fcc2 	bl	800014c <strlen>
 80007c8:	4603      	mov	r3, r0
 80007ca:	b29a      	uxth	r2, r3
 80007cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007d0:	4964      	ldr	r1, [pc, #400]	@ (8000964 <w25_Init+0x2dc>)
 80007d2:	4862      	ldr	r0, [pc, #392]	@ (800095c <w25_Init+0x2d4>)
 80007d4:	f001 fe11 	bl	80023fa <HAL_UART_Transmit>
	      return;
 80007d8:	e0ba      	b.n	8000950 <w25_Init+0x2c8>
	  }
	  HAL_UART_Transmit(&huart1,(uint8_t*)str,strlen(str),0x1000);
 80007da:	4862      	ldr	r0, [pc, #392]	@ (8000964 <w25_Init+0x2dc>)
 80007dc:	f7ff fcb6 	bl	800014c <strlen>
 80007e0:	4603      	mov	r3, r0
 80007e2:	b29a      	uxth	r2, r3
 80007e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007e8:	495e      	ldr	r1, [pc, #376]	@ (8000964 <w25_Init+0x2dc>)
 80007ea:	485c      	ldr	r0, [pc, #368]	@ (800095c <w25_Init+0x2d4>)
 80007ec:	f001 fe05 	bl	80023fa <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1,(uint8_t*)str,strlen(str),0x1000);
 80007f0:	485c      	ldr	r0, [pc, #368]	@ (8000964 <w25_Init+0x2dc>)
 80007f2:	f7ff fcab 	bl	800014c <strlen>
 80007f6:	4603      	mov	r3, r0
 80007f8:	b29a      	uxth	r2, r3
 80007fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007fe:	4959      	ldr	r1, [pc, #356]	@ (8000964 <w25_Init+0x2dc>)
 8000800:	4856      	ldr	r0, [pc, #344]	@ (800095c <w25_Init+0x2d4>)
 8000802:	f001 fdfa 	bl	80023fa <HAL_UART_Transmit>
	   w25_info.PageSize=256;
 8000806:	4b58      	ldr	r3, [pc, #352]	@ (8000968 <w25_Init+0x2e0>)
 8000808:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800080c:	801a      	strh	r2, [r3, #0]
	   w25_info.SectorSize=0x1000;
 800080e:	4b56      	ldr	r3, [pc, #344]	@ (8000968 <w25_Init+0x2e0>)
 8000810:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000814:	609a      	str	r2, [r3, #8]
	   w25_info.SectorCount=w25_info.BlockCount*16;
 8000816:	4b54      	ldr	r3, [pc, #336]	@ (8000968 <w25_Init+0x2e0>)
 8000818:	695b      	ldr	r3, [r3, #20]
 800081a:	011b      	lsls	r3, r3, #4
 800081c:	4a52      	ldr	r2, [pc, #328]	@ (8000968 <w25_Init+0x2e0>)
 800081e:	60d3      	str	r3, [r2, #12]
	   w25_info.PageCount=(w25_info.SectorCount*w25_info.SectorSize)/w25_info.PageSize;
 8000820:	4b51      	ldr	r3, [pc, #324]	@ (8000968 <w25_Init+0x2e0>)
 8000822:	68db      	ldr	r3, [r3, #12]
 8000824:	4a50      	ldr	r2, [pc, #320]	@ (8000968 <w25_Init+0x2e0>)
 8000826:	6892      	ldr	r2, [r2, #8]
 8000828:	fb02 f303 	mul.w	r3, r2, r3
 800082c:	4a4e      	ldr	r2, [pc, #312]	@ (8000968 <w25_Init+0x2e0>)
 800082e:	8812      	ldrh	r2, [r2, #0]
 8000830:	fbb3 f3f2 	udiv	r3, r3, r2
 8000834:	4a4c      	ldr	r2, [pc, #304]	@ (8000968 <w25_Init+0x2e0>)
 8000836:	6053      	str	r3, [r2, #4]
	   w25_info.BlockSize=w25_info.SectorSize*16;
 8000838:	4b4b      	ldr	r3, [pc, #300]	@ (8000968 <w25_Init+0x2e0>)
 800083a:	689b      	ldr	r3, [r3, #8]
 800083c:	011b      	lsls	r3, r3, #4
 800083e:	4a4a      	ldr	r2, [pc, #296]	@ (8000968 <w25_Init+0x2e0>)
 8000840:	6113      	str	r3, [r2, #16]
	   w25_info.NumKB=(w25_info.SectorCount*w25_info.SectorSize)/1024;
 8000842:	4b49      	ldr	r3, [pc, #292]	@ (8000968 <w25_Init+0x2e0>)
 8000844:	68db      	ldr	r3, [r3, #12]
 8000846:	4a48      	ldr	r2, [pc, #288]	@ (8000968 <w25_Init+0x2e0>)
 8000848:	6892      	ldr	r2, [r2, #8]
 800084a:	fb02 f303 	mul.w	r3, r2, r3
 800084e:	0a9b      	lsrs	r3, r3, #10
 8000850:	4a45      	ldr	r2, [pc, #276]	@ (8000968 <w25_Init+0x2e0>)
 8000852:	6193      	str	r3, [r2, #24]
	   sprintf(str,"Page Size: %d Bytes\r\n",(unsigned int)w25_info.PageSize);
 8000854:	4b44      	ldr	r3, [pc, #272]	@ (8000968 <w25_Init+0x2e0>)
 8000856:	881b      	ldrh	r3, [r3, #0]
 8000858:	461a      	mov	r2, r3
 800085a:	494f      	ldr	r1, [pc, #316]	@ (8000998 <w25_Init+0x310>)
 800085c:	4841      	ldr	r0, [pc, #260]	@ (8000964 <w25_Init+0x2dc>)
 800085e:	f001 ffa1 	bl	80027a4 <siprintf>
	   HAL_UART_Transmit(&huart1,(uint8_t*)str,strlen(str),0x1000);
 8000862:	4840      	ldr	r0, [pc, #256]	@ (8000964 <w25_Init+0x2dc>)
 8000864:	f7ff fc72 	bl	800014c <strlen>
 8000868:	4603      	mov	r3, r0
 800086a:	b29a      	uxth	r2, r3
 800086c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000870:	493c      	ldr	r1, [pc, #240]	@ (8000964 <w25_Init+0x2dc>)
 8000872:	483a      	ldr	r0, [pc, #232]	@ (800095c <w25_Init+0x2d4>)
 8000874:	f001 fdc1 	bl	80023fa <HAL_UART_Transmit>
	   sprintf(str,"Page Count: %u\r\n",(unsigned int)w25_info.PageCount);
 8000878:	4b3b      	ldr	r3, [pc, #236]	@ (8000968 <w25_Init+0x2e0>)
 800087a:	685b      	ldr	r3, [r3, #4]
 800087c:	461a      	mov	r2, r3
 800087e:	4947      	ldr	r1, [pc, #284]	@ (800099c <w25_Init+0x314>)
 8000880:	4838      	ldr	r0, [pc, #224]	@ (8000964 <w25_Init+0x2dc>)
 8000882:	f001 ff8f 	bl	80027a4 <siprintf>
	   HAL_UART_Transmit(&huart1,(uint8_t*)str,strlen(str),0x1000);
 8000886:	4837      	ldr	r0, [pc, #220]	@ (8000964 <w25_Init+0x2dc>)
 8000888:	f7ff fc60 	bl	800014c <strlen>
 800088c:	4603      	mov	r3, r0
 800088e:	b29a      	uxth	r2, r3
 8000890:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000894:	4933      	ldr	r1, [pc, #204]	@ (8000964 <w25_Init+0x2dc>)
 8000896:	4831      	ldr	r0, [pc, #196]	@ (800095c <w25_Init+0x2d4>)
 8000898:	f001 fdaf 	bl	80023fa <HAL_UART_Transmit>
	   sprintf(str,"Sector Size: %u Bytes\r\n",(unsigned int)w25_info.SectorSize);
 800089c:	4b32      	ldr	r3, [pc, #200]	@ (8000968 <w25_Init+0x2e0>)
 800089e:	689b      	ldr	r3, [r3, #8]
 80008a0:	461a      	mov	r2, r3
 80008a2:	493f      	ldr	r1, [pc, #252]	@ (80009a0 <w25_Init+0x318>)
 80008a4:	482f      	ldr	r0, [pc, #188]	@ (8000964 <w25_Init+0x2dc>)
 80008a6:	f001 ff7d 	bl	80027a4 <siprintf>
	   HAL_UART_Transmit(&huart1,(uint8_t*)str,strlen(str),0x1000);
 80008aa:	482e      	ldr	r0, [pc, #184]	@ (8000964 <w25_Init+0x2dc>)
 80008ac:	f7ff fc4e 	bl	800014c <strlen>
 80008b0:	4603      	mov	r3, r0
 80008b2:	b29a      	uxth	r2, r3
 80008b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008b8:	492a      	ldr	r1, [pc, #168]	@ (8000964 <w25_Init+0x2dc>)
 80008ba:	4828      	ldr	r0, [pc, #160]	@ (800095c <w25_Init+0x2d4>)
 80008bc:	f001 fd9d 	bl	80023fa <HAL_UART_Transmit>
	   sprintf(str,"Sector Count: %u\r\n",(unsigned int)w25_info.SectorCount);
 80008c0:	4b29      	ldr	r3, [pc, #164]	@ (8000968 <w25_Init+0x2e0>)
 80008c2:	68db      	ldr	r3, [r3, #12]
 80008c4:	461a      	mov	r2, r3
 80008c6:	4937      	ldr	r1, [pc, #220]	@ (80009a4 <w25_Init+0x31c>)
 80008c8:	4826      	ldr	r0, [pc, #152]	@ (8000964 <w25_Init+0x2dc>)
 80008ca:	f001 ff6b 	bl	80027a4 <siprintf>
	   HAL_UART_Transmit(&huart1,(uint8_t*)str,strlen(str),0x1000);
 80008ce:	4825      	ldr	r0, [pc, #148]	@ (8000964 <w25_Init+0x2dc>)
 80008d0:	f7ff fc3c 	bl	800014c <strlen>
 80008d4:	4603      	mov	r3, r0
 80008d6:	b29a      	uxth	r2, r3
 80008d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008dc:	4921      	ldr	r1, [pc, #132]	@ (8000964 <w25_Init+0x2dc>)
 80008de:	481f      	ldr	r0, [pc, #124]	@ (800095c <w25_Init+0x2d4>)
 80008e0:	f001 fd8b 	bl	80023fa <HAL_UART_Transmit>
	   sprintf(str,"Block Size: %u Bytes\r\n",(unsigned int)w25_info.BlockSize);
 80008e4:	4b20      	ldr	r3, [pc, #128]	@ (8000968 <w25_Init+0x2e0>)
 80008e6:	691b      	ldr	r3, [r3, #16]
 80008e8:	461a      	mov	r2, r3
 80008ea:	492f      	ldr	r1, [pc, #188]	@ (80009a8 <w25_Init+0x320>)
 80008ec:	481d      	ldr	r0, [pc, #116]	@ (8000964 <w25_Init+0x2dc>)
 80008ee:	f001 ff59 	bl	80027a4 <siprintf>
	   HAL_UART_Transmit(&huart1,(uint8_t*)str,strlen(str),0x1000);
 80008f2:	481c      	ldr	r0, [pc, #112]	@ (8000964 <w25_Init+0x2dc>)
 80008f4:	f7ff fc2a 	bl	800014c <strlen>
 80008f8:	4603      	mov	r3, r0
 80008fa:	b29a      	uxth	r2, r3
 80008fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000900:	4918      	ldr	r1, [pc, #96]	@ (8000964 <w25_Init+0x2dc>)
 8000902:	4816      	ldr	r0, [pc, #88]	@ (800095c <w25_Init+0x2d4>)
 8000904:	f001 fd79 	bl	80023fa <HAL_UART_Transmit>
	   sprintf(str,"Block Count: %u\r\n",(unsigned int)w25_info.BlockCount);
 8000908:	4b17      	ldr	r3, [pc, #92]	@ (8000968 <w25_Init+0x2e0>)
 800090a:	695b      	ldr	r3, [r3, #20]
 800090c:	461a      	mov	r2, r3
 800090e:	4927      	ldr	r1, [pc, #156]	@ (80009ac <w25_Init+0x324>)
 8000910:	4814      	ldr	r0, [pc, #80]	@ (8000964 <w25_Init+0x2dc>)
 8000912:	f001 ff47 	bl	80027a4 <siprintf>
	   HAL_UART_Transmit(&huart1,(uint8_t*)str,strlen(str),0x1000);
 8000916:	4813      	ldr	r0, [pc, #76]	@ (8000964 <w25_Init+0x2dc>)
 8000918:	f7ff fc18 	bl	800014c <strlen>
 800091c:	4603      	mov	r3, r0
 800091e:	b29a      	uxth	r2, r3
 8000920:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000924:	490f      	ldr	r1, [pc, #60]	@ (8000964 <w25_Init+0x2dc>)
 8000926:	480d      	ldr	r0, [pc, #52]	@ (800095c <w25_Init+0x2d4>)
 8000928:	f001 fd67 	bl	80023fa <HAL_UART_Transmit>
	   sprintf(str,"Capacity: %u KB\r\n",(unsigned int)w25_info.NumKB);
 800092c:	4b0e      	ldr	r3, [pc, #56]	@ (8000968 <w25_Init+0x2e0>)
 800092e:	699b      	ldr	r3, [r3, #24]
 8000930:	461a      	mov	r2, r3
 8000932:	491f      	ldr	r1, [pc, #124]	@ (80009b0 <w25_Init+0x328>)
 8000934:	480b      	ldr	r0, [pc, #44]	@ (8000964 <w25_Init+0x2dc>)
 8000936:	f001 ff35 	bl	80027a4 <siprintf>
	   HAL_UART_Transmit(&huart1,(uint8_t*)str,strlen(str),0x1000);
 800093a:	480a      	ldr	r0, [pc, #40]	@ (8000964 <w25_Init+0x2dc>)
 800093c:	f7ff fc06 	bl	800014c <strlen>
 8000940:	4603      	mov	r3, r0
 8000942:	b29a      	uxth	r2, r3
 8000944:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000948:	4906      	ldr	r1, [pc, #24]	@ (8000964 <w25_Init+0x2dc>)
 800094a:	4804      	ldr	r0, [pc, #16]	@ (800095c <w25_Init+0x2d4>)
 800094c:	f001 fd55 	bl	80023fa <HAL_UART_Transmit>

}
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	0800311c 	.word	0x0800311c
 800095c:	200000d0 	.word	0x200000d0
 8000960:	08003120 	.word	0x08003120
 8000964:	20000144 	.word	0x20000144
 8000968:	2000011c 	.word	0x2000011c
 800096c:	0800312c 	.word	0x0800312c
 8000970:	08003144 	.word	0x08003144
 8000974:	0800315c 	.word	0x0800315c
 8000978:	08003174 	.word	0x08003174
 800097c:	0800318c 	.word	0x0800318c
 8000980:	080031a4 	.word	0x080031a4
 8000984:	080031bc 	.word	0x080031bc
 8000988:	080031d4 	.word	0x080031d4
 800098c:	080031ec 	.word	0x080031ec
 8000990:	08003204 	.word	0x08003204
 8000994:	0800321c 	.word	0x0800321c
 8000998:	08003230 	.word	0x08003230
 800099c:	08003248 	.word	0x08003248
 80009a0:	0800325c 	.word	0x0800325c
 80009a4:	08003274 	.word	0x08003274
 80009a8:	08003288 	.word	0x08003288
 80009ac:	080032a0 	.word	0x080032a0
 80009b0:	080032b4 	.word	0x080032b4

080009b4 <delay_ms>:


static void delay_ms(uint16_t delay){
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4603      	mov	r3, r0
 80009bc:	80fb      	strh	r3, [r7, #6]
	time = HAL_GetTick();
 80009be:	f000 f89d 	bl	8000afc <HAL_GetTick>
 80009c2:	4603      	mov	r3, r0
 80009c4:	4a0c      	ldr	r2, [pc, #48]	@ (80009f8 <delay_ms+0x44>)
 80009c6:	6013      	str	r3, [r2, #0]
		while(timeFlag == 0){
 80009c8:	e00b      	b.n	80009e2 <delay_ms+0x2e>
			if((HAL_GetTick() - time) > delay){
 80009ca:	f000 f897 	bl	8000afc <HAL_GetTick>
 80009ce:	4602      	mov	r2, r0
 80009d0:	4b09      	ldr	r3, [pc, #36]	@ (80009f8 <delay_ms+0x44>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	1ad2      	subs	r2, r2, r3
 80009d6:	88fb      	ldrh	r3, [r7, #6]
 80009d8:	429a      	cmp	r2, r3
 80009da:	d902      	bls.n	80009e2 <delay_ms+0x2e>
				timeFlag = 1;
 80009dc:	4b07      	ldr	r3, [pc, #28]	@ (80009fc <delay_ms+0x48>)
 80009de:	2201      	movs	r2, #1
 80009e0:	701a      	strb	r2, [r3, #0]
		while(timeFlag == 0){
 80009e2:	4b06      	ldr	r3, [pc, #24]	@ (80009fc <delay_ms+0x48>)
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d0ef      	beq.n	80009ca <delay_ms+0x16>
			}
		}
		timeFlag = 0;
 80009ea:	4b04      	ldr	r3, [pc, #16]	@ (80009fc <delay_ms+0x48>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	701a      	strb	r2, [r3, #0]
}
 80009f0:	bf00      	nop
 80009f2:	3708      	adds	r7, #8
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	2000013c 	.word	0x2000013c
 80009fc:	20000140 	.word	0x20000140

08000a00 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a00:	f7ff fdd0 	bl	80005a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a04:	480b      	ldr	r0, [pc, #44]	@ (8000a34 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a06:	490c      	ldr	r1, [pc, #48]	@ (8000a38 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a08:	4a0c      	ldr	r2, [pc, #48]	@ (8000a3c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a0c:	e002      	b.n	8000a14 <LoopCopyDataInit>

08000a0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a12:	3304      	adds	r3, #4

08000a14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a18:	d3f9      	bcc.n	8000a0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a1a:	4a09      	ldr	r2, [pc, #36]	@ (8000a40 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a1c:	4c09      	ldr	r4, [pc, #36]	@ (8000a44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a20:	e001      	b.n	8000a26 <LoopFillZerobss>

08000a22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a24:	3204      	adds	r2, #4

08000a26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a28:	d3fb      	bcc.n	8000a22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a2a:	f001 fee9 	bl	8002800 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a2e:	f7ff fb95 	bl	800015c <main>
  bx lr
 8000a32:	4770      	bx	lr
  ldr r0, =_sdata
 8000a34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a38:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000a3c:	08003338 	.word	0x08003338
  ldr r2, =_sbss
 8000a40:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000a44:	20000320 	.word	0x20000320

08000a48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a48:	e7fe      	b.n	8000a48 <ADC1_2_IRQHandler>
	...

08000a4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a50:	4b08      	ldr	r3, [pc, #32]	@ (8000a74 <HAL_Init+0x28>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a07      	ldr	r2, [pc, #28]	@ (8000a74 <HAL_Init+0x28>)
 8000a56:	f043 0310 	orr.w	r3, r3, #16
 8000a5a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a5c:	2003      	movs	r0, #3
 8000a5e:	f000 f907 	bl	8000c70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a62:	200f      	movs	r0, #15
 8000a64:	f000 f808 	bl	8000a78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a68:	f7ff fc72 	bl	8000350 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a6c:	2300      	movs	r3, #0
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40022000 	.word	0x40022000

08000a78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a80:	4b12      	ldr	r3, [pc, #72]	@ (8000acc <HAL_InitTick+0x54>)
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	4b12      	ldr	r3, [pc, #72]	@ (8000ad0 <HAL_InitTick+0x58>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	4619      	mov	r1, r3
 8000a8a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a96:	4618      	mov	r0, r3
 8000a98:	f000 f911 	bl	8000cbe <HAL_SYSTICK_Config>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	e00e      	b.n	8000ac4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	2b0f      	cmp	r3, #15
 8000aaa:	d80a      	bhi.n	8000ac2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aac:	2200      	movs	r2, #0
 8000aae:	6879      	ldr	r1, [r7, #4]
 8000ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab4:	f000 f8e7 	bl	8000c86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ab8:	4a06      	ldr	r2, [pc, #24]	@ (8000ad4 <HAL_InitTick+0x5c>)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	e000      	b.n	8000ac4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ac2:	2301      	movs	r3, #1
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	3708      	adds	r7, #8
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	20000000 	.word	0x20000000
 8000ad0:	20000008 	.word	0x20000008
 8000ad4:	20000004 	.word	0x20000004

08000ad8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000adc:	4b05      	ldr	r3, [pc, #20]	@ (8000af4 <HAL_IncTick+0x1c>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	4b05      	ldr	r3, [pc, #20]	@ (8000af8 <HAL_IncTick+0x20>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4413      	add	r3, r2
 8000ae8:	4a03      	ldr	r2, [pc, #12]	@ (8000af8 <HAL_IncTick+0x20>)
 8000aea:	6013      	str	r3, [r2, #0]
}
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bc80      	pop	{r7}
 8000af2:	4770      	bx	lr
 8000af4:	20000008 	.word	0x20000008
 8000af8:	200001d4 	.word	0x200001d4

08000afc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  return uwTick;
 8000b00:	4b02      	ldr	r3, [pc, #8]	@ (8000b0c <HAL_GetTick+0x10>)
 8000b02:	681b      	ldr	r3, [r3, #0]
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bc80      	pop	{r7}
 8000b0a:	4770      	bx	lr
 8000b0c:	200001d4 	.word	0x200001d4

08000b10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b085      	sub	sp, #20
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	f003 0307 	and.w	r3, r3, #7
 8000b1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b20:	4b0c      	ldr	r3, [pc, #48]	@ (8000b54 <__NVIC_SetPriorityGrouping+0x44>)
 8000b22:	68db      	ldr	r3, [r3, #12]
 8000b24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b26:	68ba      	ldr	r2, [r7, #8]
 8000b28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b42:	4a04      	ldr	r2, [pc, #16]	@ (8000b54 <__NVIC_SetPriorityGrouping+0x44>)
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	60d3      	str	r3, [r2, #12]
}
 8000b48:	bf00      	nop
 8000b4a:	3714      	adds	r7, #20
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bc80      	pop	{r7}
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	e000ed00 	.word	0xe000ed00

08000b58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b5c:	4b04      	ldr	r3, [pc, #16]	@ (8000b70 <__NVIC_GetPriorityGrouping+0x18>)
 8000b5e:	68db      	ldr	r3, [r3, #12]
 8000b60:	0a1b      	lsrs	r3, r3, #8
 8000b62:	f003 0307 	and.w	r3, r3, #7
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bc80      	pop	{r7}
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	e000ed00 	.word	0xe000ed00

08000b74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	6039      	str	r1, [r7, #0]
 8000b7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	db0a      	blt.n	8000b9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	b2da      	uxtb	r2, r3
 8000b8c:	490c      	ldr	r1, [pc, #48]	@ (8000bc0 <__NVIC_SetPriority+0x4c>)
 8000b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b92:	0112      	lsls	r2, r2, #4
 8000b94:	b2d2      	uxtb	r2, r2
 8000b96:	440b      	add	r3, r1
 8000b98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b9c:	e00a      	b.n	8000bb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	b2da      	uxtb	r2, r3
 8000ba2:	4908      	ldr	r1, [pc, #32]	@ (8000bc4 <__NVIC_SetPriority+0x50>)
 8000ba4:	79fb      	ldrb	r3, [r7, #7]
 8000ba6:	f003 030f 	and.w	r3, r3, #15
 8000baa:	3b04      	subs	r3, #4
 8000bac:	0112      	lsls	r2, r2, #4
 8000bae:	b2d2      	uxtb	r2, r2
 8000bb0:	440b      	add	r3, r1
 8000bb2:	761a      	strb	r2, [r3, #24]
}
 8000bb4:	bf00      	nop
 8000bb6:	370c      	adds	r7, #12
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bc80      	pop	{r7}
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	e000e100 	.word	0xe000e100
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b089      	sub	sp, #36	@ 0x24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	60f8      	str	r0, [r7, #12]
 8000bd0:	60b9      	str	r1, [r7, #8]
 8000bd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	f003 0307 	and.w	r3, r3, #7
 8000bda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bdc:	69fb      	ldr	r3, [r7, #28]
 8000bde:	f1c3 0307 	rsb	r3, r3, #7
 8000be2:	2b04      	cmp	r3, #4
 8000be4:	bf28      	it	cs
 8000be6:	2304      	movcs	r3, #4
 8000be8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bea:	69fb      	ldr	r3, [r7, #28]
 8000bec:	3304      	adds	r3, #4
 8000bee:	2b06      	cmp	r3, #6
 8000bf0:	d902      	bls.n	8000bf8 <NVIC_EncodePriority+0x30>
 8000bf2:	69fb      	ldr	r3, [r7, #28]
 8000bf4:	3b03      	subs	r3, #3
 8000bf6:	e000      	b.n	8000bfa <NVIC_EncodePriority+0x32>
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8000c00:	69bb      	ldr	r3, [r7, #24]
 8000c02:	fa02 f303 	lsl.w	r3, r2, r3
 8000c06:	43da      	mvns	r2, r3
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	401a      	ands	r2, r3
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c10:	f04f 31ff 	mov.w	r1, #4294967295
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	fa01 f303 	lsl.w	r3, r1, r3
 8000c1a:	43d9      	mvns	r1, r3
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c20:	4313      	orrs	r3, r2
         );
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3724      	adds	r7, #36	@ 0x24
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bc80      	pop	{r7}
 8000c2a:	4770      	bx	lr

08000c2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	3b01      	subs	r3, #1
 8000c38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c3c:	d301      	bcc.n	8000c42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c3e:	2301      	movs	r3, #1
 8000c40:	e00f      	b.n	8000c62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c42:	4a0a      	ldr	r2, [pc, #40]	@ (8000c6c <SysTick_Config+0x40>)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	3b01      	subs	r3, #1
 8000c48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c4a:	210f      	movs	r1, #15
 8000c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c50:	f7ff ff90 	bl	8000b74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c54:	4b05      	ldr	r3, [pc, #20]	@ (8000c6c <SysTick_Config+0x40>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c5a:	4b04      	ldr	r3, [pc, #16]	@ (8000c6c <SysTick_Config+0x40>)
 8000c5c:	2207      	movs	r2, #7
 8000c5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c60:	2300      	movs	r3, #0
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	e000e010 	.word	0xe000e010

08000c70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c78:	6878      	ldr	r0, [r7, #4]
 8000c7a:	f7ff ff49 	bl	8000b10 <__NVIC_SetPriorityGrouping>
}
 8000c7e:	bf00      	nop
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b086      	sub	sp, #24
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	60b9      	str	r1, [r7, #8]
 8000c90:	607a      	str	r2, [r7, #4]
 8000c92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c94:	2300      	movs	r3, #0
 8000c96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c98:	f7ff ff5e 	bl	8000b58 <__NVIC_GetPriorityGrouping>
 8000c9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c9e:	687a      	ldr	r2, [r7, #4]
 8000ca0:	68b9      	ldr	r1, [r7, #8]
 8000ca2:	6978      	ldr	r0, [r7, #20]
 8000ca4:	f7ff ff90 	bl	8000bc8 <NVIC_EncodePriority>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cae:	4611      	mov	r1, r2
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff ff5f 	bl	8000b74 <__NVIC_SetPriority>
}
 8000cb6:	bf00      	nop
 8000cb8:	3718      	adds	r7, #24
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b082      	sub	sp, #8
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cc6:	6878      	ldr	r0, [r7, #4]
 8000cc8:	f7ff ffb0 	bl	8000c2c <SysTick_Config>
 8000ccc:	4603      	mov	r3, r0
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
	...

08000cd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b08b      	sub	sp, #44	@ 0x2c
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
 8000ce0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cea:	e169      	b.n	8000fc0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000cec:	2201      	movs	r2, #1
 8000cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	69fa      	ldr	r2, [r7, #28]
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d00:	69ba      	ldr	r2, [r7, #24]
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	f040 8158 	bne.w	8000fba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	4a9a      	ldr	r2, [pc, #616]	@ (8000f78 <HAL_GPIO_Init+0x2a0>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d05e      	beq.n	8000dd2 <HAL_GPIO_Init+0xfa>
 8000d14:	4a98      	ldr	r2, [pc, #608]	@ (8000f78 <HAL_GPIO_Init+0x2a0>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d875      	bhi.n	8000e06 <HAL_GPIO_Init+0x12e>
 8000d1a:	4a98      	ldr	r2, [pc, #608]	@ (8000f7c <HAL_GPIO_Init+0x2a4>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d058      	beq.n	8000dd2 <HAL_GPIO_Init+0xfa>
 8000d20:	4a96      	ldr	r2, [pc, #600]	@ (8000f7c <HAL_GPIO_Init+0x2a4>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d86f      	bhi.n	8000e06 <HAL_GPIO_Init+0x12e>
 8000d26:	4a96      	ldr	r2, [pc, #600]	@ (8000f80 <HAL_GPIO_Init+0x2a8>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d052      	beq.n	8000dd2 <HAL_GPIO_Init+0xfa>
 8000d2c:	4a94      	ldr	r2, [pc, #592]	@ (8000f80 <HAL_GPIO_Init+0x2a8>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d869      	bhi.n	8000e06 <HAL_GPIO_Init+0x12e>
 8000d32:	4a94      	ldr	r2, [pc, #592]	@ (8000f84 <HAL_GPIO_Init+0x2ac>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d04c      	beq.n	8000dd2 <HAL_GPIO_Init+0xfa>
 8000d38:	4a92      	ldr	r2, [pc, #584]	@ (8000f84 <HAL_GPIO_Init+0x2ac>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d863      	bhi.n	8000e06 <HAL_GPIO_Init+0x12e>
 8000d3e:	4a92      	ldr	r2, [pc, #584]	@ (8000f88 <HAL_GPIO_Init+0x2b0>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d046      	beq.n	8000dd2 <HAL_GPIO_Init+0xfa>
 8000d44:	4a90      	ldr	r2, [pc, #576]	@ (8000f88 <HAL_GPIO_Init+0x2b0>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d85d      	bhi.n	8000e06 <HAL_GPIO_Init+0x12e>
 8000d4a:	2b12      	cmp	r3, #18
 8000d4c:	d82a      	bhi.n	8000da4 <HAL_GPIO_Init+0xcc>
 8000d4e:	2b12      	cmp	r3, #18
 8000d50:	d859      	bhi.n	8000e06 <HAL_GPIO_Init+0x12e>
 8000d52:	a201      	add	r2, pc, #4	@ (adr r2, 8000d58 <HAL_GPIO_Init+0x80>)
 8000d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d58:	08000dd3 	.word	0x08000dd3
 8000d5c:	08000dad 	.word	0x08000dad
 8000d60:	08000dbf 	.word	0x08000dbf
 8000d64:	08000e01 	.word	0x08000e01
 8000d68:	08000e07 	.word	0x08000e07
 8000d6c:	08000e07 	.word	0x08000e07
 8000d70:	08000e07 	.word	0x08000e07
 8000d74:	08000e07 	.word	0x08000e07
 8000d78:	08000e07 	.word	0x08000e07
 8000d7c:	08000e07 	.word	0x08000e07
 8000d80:	08000e07 	.word	0x08000e07
 8000d84:	08000e07 	.word	0x08000e07
 8000d88:	08000e07 	.word	0x08000e07
 8000d8c:	08000e07 	.word	0x08000e07
 8000d90:	08000e07 	.word	0x08000e07
 8000d94:	08000e07 	.word	0x08000e07
 8000d98:	08000e07 	.word	0x08000e07
 8000d9c:	08000db5 	.word	0x08000db5
 8000da0:	08000dc9 	.word	0x08000dc9
 8000da4:	4a79      	ldr	r2, [pc, #484]	@ (8000f8c <HAL_GPIO_Init+0x2b4>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d013      	beq.n	8000dd2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000daa:	e02c      	b.n	8000e06 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	623b      	str	r3, [r7, #32]
          break;
 8000db2:	e029      	b.n	8000e08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	3304      	adds	r3, #4
 8000dba:	623b      	str	r3, [r7, #32]
          break;
 8000dbc:	e024      	b.n	8000e08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	68db      	ldr	r3, [r3, #12]
 8000dc2:	3308      	adds	r3, #8
 8000dc4:	623b      	str	r3, [r7, #32]
          break;
 8000dc6:	e01f      	b.n	8000e08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	330c      	adds	r3, #12
 8000dce:	623b      	str	r3, [r7, #32]
          break;
 8000dd0:	e01a      	b.n	8000e08 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	689b      	ldr	r3, [r3, #8]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d102      	bne.n	8000de0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000dda:	2304      	movs	r3, #4
 8000ddc:	623b      	str	r3, [r7, #32]
          break;
 8000dde:	e013      	b.n	8000e08 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	689b      	ldr	r3, [r3, #8]
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d105      	bne.n	8000df4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000de8:	2308      	movs	r3, #8
 8000dea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	69fa      	ldr	r2, [r7, #28]
 8000df0:	611a      	str	r2, [r3, #16]
          break;
 8000df2:	e009      	b.n	8000e08 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000df4:	2308      	movs	r3, #8
 8000df6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	69fa      	ldr	r2, [r7, #28]
 8000dfc:	615a      	str	r2, [r3, #20]
          break;
 8000dfe:	e003      	b.n	8000e08 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e00:	2300      	movs	r3, #0
 8000e02:	623b      	str	r3, [r7, #32]
          break;
 8000e04:	e000      	b.n	8000e08 <HAL_GPIO_Init+0x130>
          break;
 8000e06:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e08:	69bb      	ldr	r3, [r7, #24]
 8000e0a:	2bff      	cmp	r3, #255	@ 0xff
 8000e0c:	d801      	bhi.n	8000e12 <HAL_GPIO_Init+0x13a>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	e001      	b.n	8000e16 <HAL_GPIO_Init+0x13e>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	3304      	adds	r3, #4
 8000e16:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e18:	69bb      	ldr	r3, [r7, #24]
 8000e1a:	2bff      	cmp	r3, #255	@ 0xff
 8000e1c:	d802      	bhi.n	8000e24 <HAL_GPIO_Init+0x14c>
 8000e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	e002      	b.n	8000e2a <HAL_GPIO_Init+0x152>
 8000e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e26:	3b08      	subs	r3, #8
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	210f      	movs	r1, #15
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	fa01 f303 	lsl.w	r3, r1, r3
 8000e38:	43db      	mvns	r3, r3
 8000e3a:	401a      	ands	r2, r3
 8000e3c:	6a39      	ldr	r1, [r7, #32]
 8000e3e:	693b      	ldr	r3, [r7, #16]
 8000e40:	fa01 f303 	lsl.w	r3, r1, r3
 8000e44:	431a      	orrs	r2, r3
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	f000 80b1 	beq.w	8000fba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e58:	4b4d      	ldr	r3, [pc, #308]	@ (8000f90 <HAL_GPIO_Init+0x2b8>)
 8000e5a:	699b      	ldr	r3, [r3, #24]
 8000e5c:	4a4c      	ldr	r2, [pc, #304]	@ (8000f90 <HAL_GPIO_Init+0x2b8>)
 8000e5e:	f043 0301 	orr.w	r3, r3, #1
 8000e62:	6193      	str	r3, [r2, #24]
 8000e64:	4b4a      	ldr	r3, [pc, #296]	@ (8000f90 <HAL_GPIO_Init+0x2b8>)
 8000e66:	699b      	ldr	r3, [r3, #24]
 8000e68:	f003 0301 	and.w	r3, r3, #1
 8000e6c:	60bb      	str	r3, [r7, #8]
 8000e6e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e70:	4a48      	ldr	r2, [pc, #288]	@ (8000f94 <HAL_GPIO_Init+0x2bc>)
 8000e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e74:	089b      	lsrs	r3, r3, #2
 8000e76:	3302      	adds	r3, #2
 8000e78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e7c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e80:	f003 0303 	and.w	r3, r3, #3
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	220f      	movs	r2, #15
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	43db      	mvns	r3, r3
 8000e8e:	68fa      	ldr	r2, [r7, #12]
 8000e90:	4013      	ands	r3, r2
 8000e92:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	4a40      	ldr	r2, [pc, #256]	@ (8000f98 <HAL_GPIO_Init+0x2c0>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d013      	beq.n	8000ec4 <HAL_GPIO_Init+0x1ec>
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	4a3f      	ldr	r2, [pc, #252]	@ (8000f9c <HAL_GPIO_Init+0x2c4>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d00d      	beq.n	8000ec0 <HAL_GPIO_Init+0x1e8>
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	4a3e      	ldr	r2, [pc, #248]	@ (8000fa0 <HAL_GPIO_Init+0x2c8>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d007      	beq.n	8000ebc <HAL_GPIO_Init+0x1e4>
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	4a3d      	ldr	r2, [pc, #244]	@ (8000fa4 <HAL_GPIO_Init+0x2cc>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d101      	bne.n	8000eb8 <HAL_GPIO_Init+0x1e0>
 8000eb4:	2303      	movs	r3, #3
 8000eb6:	e006      	b.n	8000ec6 <HAL_GPIO_Init+0x1ee>
 8000eb8:	2304      	movs	r3, #4
 8000eba:	e004      	b.n	8000ec6 <HAL_GPIO_Init+0x1ee>
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	e002      	b.n	8000ec6 <HAL_GPIO_Init+0x1ee>
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	e000      	b.n	8000ec6 <HAL_GPIO_Init+0x1ee>
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ec8:	f002 0203 	and.w	r2, r2, #3
 8000ecc:	0092      	lsls	r2, r2, #2
 8000ece:	4093      	lsls	r3, r2
 8000ed0:	68fa      	ldr	r2, [r7, #12]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ed6:	492f      	ldr	r1, [pc, #188]	@ (8000f94 <HAL_GPIO_Init+0x2bc>)
 8000ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eda:	089b      	lsrs	r3, r3, #2
 8000edc:	3302      	adds	r3, #2
 8000ede:	68fa      	ldr	r2, [r7, #12]
 8000ee0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d006      	beq.n	8000efe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ef0:	4b2d      	ldr	r3, [pc, #180]	@ (8000fa8 <HAL_GPIO_Init+0x2d0>)
 8000ef2:	689a      	ldr	r2, [r3, #8]
 8000ef4:	492c      	ldr	r1, [pc, #176]	@ (8000fa8 <HAL_GPIO_Init+0x2d0>)
 8000ef6:	69bb      	ldr	r3, [r7, #24]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	608b      	str	r3, [r1, #8]
 8000efc:	e006      	b.n	8000f0c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000efe:	4b2a      	ldr	r3, [pc, #168]	@ (8000fa8 <HAL_GPIO_Init+0x2d0>)
 8000f00:	689a      	ldr	r2, [r3, #8]
 8000f02:	69bb      	ldr	r3, [r7, #24]
 8000f04:	43db      	mvns	r3, r3
 8000f06:	4928      	ldr	r1, [pc, #160]	@ (8000fa8 <HAL_GPIO_Init+0x2d0>)
 8000f08:	4013      	ands	r3, r2
 8000f0a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d006      	beq.n	8000f26 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f18:	4b23      	ldr	r3, [pc, #140]	@ (8000fa8 <HAL_GPIO_Init+0x2d0>)
 8000f1a:	68da      	ldr	r2, [r3, #12]
 8000f1c:	4922      	ldr	r1, [pc, #136]	@ (8000fa8 <HAL_GPIO_Init+0x2d0>)
 8000f1e:	69bb      	ldr	r3, [r7, #24]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	60cb      	str	r3, [r1, #12]
 8000f24:	e006      	b.n	8000f34 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f26:	4b20      	ldr	r3, [pc, #128]	@ (8000fa8 <HAL_GPIO_Init+0x2d0>)
 8000f28:	68da      	ldr	r2, [r3, #12]
 8000f2a:	69bb      	ldr	r3, [r7, #24]
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	491e      	ldr	r1, [pc, #120]	@ (8000fa8 <HAL_GPIO_Init+0x2d0>)
 8000f30:	4013      	ands	r3, r2
 8000f32:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d006      	beq.n	8000f4e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f40:	4b19      	ldr	r3, [pc, #100]	@ (8000fa8 <HAL_GPIO_Init+0x2d0>)
 8000f42:	685a      	ldr	r2, [r3, #4]
 8000f44:	4918      	ldr	r1, [pc, #96]	@ (8000fa8 <HAL_GPIO_Init+0x2d0>)
 8000f46:	69bb      	ldr	r3, [r7, #24]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	604b      	str	r3, [r1, #4]
 8000f4c:	e006      	b.n	8000f5c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f4e:	4b16      	ldr	r3, [pc, #88]	@ (8000fa8 <HAL_GPIO_Init+0x2d0>)
 8000f50:	685a      	ldr	r2, [r3, #4]
 8000f52:	69bb      	ldr	r3, [r7, #24]
 8000f54:	43db      	mvns	r3, r3
 8000f56:	4914      	ldr	r1, [pc, #80]	@ (8000fa8 <HAL_GPIO_Init+0x2d0>)
 8000f58:	4013      	ands	r3, r2
 8000f5a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d021      	beq.n	8000fac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f68:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa8 <HAL_GPIO_Init+0x2d0>)
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	490e      	ldr	r1, [pc, #56]	@ (8000fa8 <HAL_GPIO_Init+0x2d0>)
 8000f6e:	69bb      	ldr	r3, [r7, #24]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	600b      	str	r3, [r1, #0]
 8000f74:	e021      	b.n	8000fba <HAL_GPIO_Init+0x2e2>
 8000f76:	bf00      	nop
 8000f78:	10320000 	.word	0x10320000
 8000f7c:	10310000 	.word	0x10310000
 8000f80:	10220000 	.word	0x10220000
 8000f84:	10210000 	.word	0x10210000
 8000f88:	10120000 	.word	0x10120000
 8000f8c:	10110000 	.word	0x10110000
 8000f90:	40021000 	.word	0x40021000
 8000f94:	40010000 	.word	0x40010000
 8000f98:	40010800 	.word	0x40010800
 8000f9c:	40010c00 	.word	0x40010c00
 8000fa0:	40011000 	.word	0x40011000
 8000fa4:	40011400 	.word	0x40011400
 8000fa8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000fac:	4b0b      	ldr	r3, [pc, #44]	@ (8000fdc <HAL_GPIO_Init+0x304>)
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	4909      	ldr	r1, [pc, #36]	@ (8000fdc <HAL_GPIO_Init+0x304>)
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fc6:	fa22 f303 	lsr.w	r3, r2, r3
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	f47f ae8e 	bne.w	8000cec <HAL_GPIO_Init+0x14>
  }
}
 8000fd0:	bf00      	nop
 8000fd2:	bf00      	nop
 8000fd4:	372c      	adds	r7, #44	@ 0x2c
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bc80      	pop	{r7}
 8000fda:	4770      	bx	lr
 8000fdc:	40010400 	.word	0x40010400

08000fe0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	460b      	mov	r3, r1
 8000fea:	807b      	strh	r3, [r7, #2]
 8000fec:	4613      	mov	r3, r2
 8000fee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ff0:	787b      	ldrb	r3, [r7, #1]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d003      	beq.n	8000ffe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ff6:	887a      	ldrh	r2, [r7, #2]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000ffc:	e003      	b.n	8001006 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ffe:	887b      	ldrh	r3, [r7, #2]
 8001000:	041a      	lsls	r2, r3, #16
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	611a      	str	r2, [r3, #16]
}
 8001006:	bf00      	nop
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	bc80      	pop	{r7}
 800100e:	4770      	bx	lr

08001010 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b086      	sub	sp, #24
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d101      	bne.n	8001022 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800101e:	2301      	movs	r3, #1
 8001020:	e272      	b.n	8001508 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f003 0301 	and.w	r3, r3, #1
 800102a:	2b00      	cmp	r3, #0
 800102c:	f000 8087 	beq.w	800113e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001030:	4b92      	ldr	r3, [pc, #584]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f003 030c 	and.w	r3, r3, #12
 8001038:	2b04      	cmp	r3, #4
 800103a:	d00c      	beq.n	8001056 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800103c:	4b8f      	ldr	r3, [pc, #572]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f003 030c 	and.w	r3, r3, #12
 8001044:	2b08      	cmp	r3, #8
 8001046:	d112      	bne.n	800106e <HAL_RCC_OscConfig+0x5e>
 8001048:	4b8c      	ldr	r3, [pc, #560]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001050:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001054:	d10b      	bne.n	800106e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001056:	4b89      	ldr	r3, [pc, #548]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800105e:	2b00      	cmp	r3, #0
 8001060:	d06c      	beq.n	800113c <HAL_RCC_OscConfig+0x12c>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d168      	bne.n	800113c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e24c      	b.n	8001508 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001076:	d106      	bne.n	8001086 <HAL_RCC_OscConfig+0x76>
 8001078:	4b80      	ldr	r3, [pc, #512]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a7f      	ldr	r2, [pc, #508]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 800107e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001082:	6013      	str	r3, [r2, #0]
 8001084:	e02e      	b.n	80010e4 <HAL_RCC_OscConfig+0xd4>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d10c      	bne.n	80010a8 <HAL_RCC_OscConfig+0x98>
 800108e:	4b7b      	ldr	r3, [pc, #492]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a7a      	ldr	r2, [pc, #488]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 8001094:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001098:	6013      	str	r3, [r2, #0]
 800109a:	4b78      	ldr	r3, [pc, #480]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a77      	ldr	r2, [pc, #476]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 80010a0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80010a4:	6013      	str	r3, [r2, #0]
 80010a6:	e01d      	b.n	80010e4 <HAL_RCC_OscConfig+0xd4>
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80010b0:	d10c      	bne.n	80010cc <HAL_RCC_OscConfig+0xbc>
 80010b2:	4b72      	ldr	r3, [pc, #456]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a71      	ldr	r2, [pc, #452]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 80010b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010bc:	6013      	str	r3, [r2, #0]
 80010be:	4b6f      	ldr	r3, [pc, #444]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a6e      	ldr	r2, [pc, #440]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 80010c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010c8:	6013      	str	r3, [r2, #0]
 80010ca:	e00b      	b.n	80010e4 <HAL_RCC_OscConfig+0xd4>
 80010cc:	4b6b      	ldr	r3, [pc, #428]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a6a      	ldr	r2, [pc, #424]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 80010d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80010d6:	6013      	str	r3, [r2, #0]
 80010d8:	4b68      	ldr	r3, [pc, #416]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a67      	ldr	r2, [pc, #412]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 80010de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80010e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d013      	beq.n	8001114 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ec:	f7ff fd06 	bl	8000afc <HAL_GetTick>
 80010f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010f2:	e008      	b.n	8001106 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010f4:	f7ff fd02 	bl	8000afc <HAL_GetTick>
 80010f8:	4602      	mov	r2, r0
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	2b64      	cmp	r3, #100	@ 0x64
 8001100:	d901      	bls.n	8001106 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001102:	2303      	movs	r3, #3
 8001104:	e200      	b.n	8001508 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001106:	4b5d      	ldr	r3, [pc, #372]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800110e:	2b00      	cmp	r3, #0
 8001110:	d0f0      	beq.n	80010f4 <HAL_RCC_OscConfig+0xe4>
 8001112:	e014      	b.n	800113e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001114:	f7ff fcf2 	bl	8000afc <HAL_GetTick>
 8001118:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800111a:	e008      	b.n	800112e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800111c:	f7ff fcee 	bl	8000afc <HAL_GetTick>
 8001120:	4602      	mov	r2, r0
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	2b64      	cmp	r3, #100	@ 0x64
 8001128:	d901      	bls.n	800112e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800112a:	2303      	movs	r3, #3
 800112c:	e1ec      	b.n	8001508 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800112e:	4b53      	ldr	r3, [pc, #332]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001136:	2b00      	cmp	r3, #0
 8001138:	d1f0      	bne.n	800111c <HAL_RCC_OscConfig+0x10c>
 800113a:	e000      	b.n	800113e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800113c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f003 0302 	and.w	r3, r3, #2
 8001146:	2b00      	cmp	r3, #0
 8001148:	d063      	beq.n	8001212 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800114a:	4b4c      	ldr	r3, [pc, #304]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f003 030c 	and.w	r3, r3, #12
 8001152:	2b00      	cmp	r3, #0
 8001154:	d00b      	beq.n	800116e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001156:	4b49      	ldr	r3, [pc, #292]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f003 030c 	and.w	r3, r3, #12
 800115e:	2b08      	cmp	r3, #8
 8001160:	d11c      	bne.n	800119c <HAL_RCC_OscConfig+0x18c>
 8001162:	4b46      	ldr	r3, [pc, #280]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800116a:	2b00      	cmp	r3, #0
 800116c:	d116      	bne.n	800119c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800116e:	4b43      	ldr	r3, [pc, #268]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f003 0302 	and.w	r3, r3, #2
 8001176:	2b00      	cmp	r3, #0
 8001178:	d005      	beq.n	8001186 <HAL_RCC_OscConfig+0x176>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	691b      	ldr	r3, [r3, #16]
 800117e:	2b01      	cmp	r3, #1
 8001180:	d001      	beq.n	8001186 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e1c0      	b.n	8001508 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001186:	4b3d      	ldr	r3, [pc, #244]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	695b      	ldr	r3, [r3, #20]
 8001192:	00db      	lsls	r3, r3, #3
 8001194:	4939      	ldr	r1, [pc, #228]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 8001196:	4313      	orrs	r3, r2
 8001198:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800119a:	e03a      	b.n	8001212 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	691b      	ldr	r3, [r3, #16]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d020      	beq.n	80011e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011a4:	4b36      	ldr	r3, [pc, #216]	@ (8001280 <HAL_RCC_OscConfig+0x270>)
 80011a6:	2201      	movs	r2, #1
 80011a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011aa:	f7ff fca7 	bl	8000afc <HAL_GetTick>
 80011ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011b0:	e008      	b.n	80011c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011b2:	f7ff fca3 	bl	8000afc <HAL_GetTick>
 80011b6:	4602      	mov	r2, r0
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	1ad3      	subs	r3, r2, r3
 80011bc:	2b02      	cmp	r3, #2
 80011be:	d901      	bls.n	80011c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80011c0:	2303      	movs	r3, #3
 80011c2:	e1a1      	b.n	8001508 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011c4:	4b2d      	ldr	r3, [pc, #180]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f003 0302 	and.w	r3, r3, #2
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d0f0      	beq.n	80011b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011d0:	4b2a      	ldr	r3, [pc, #168]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	695b      	ldr	r3, [r3, #20]
 80011dc:	00db      	lsls	r3, r3, #3
 80011de:	4927      	ldr	r1, [pc, #156]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 80011e0:	4313      	orrs	r3, r2
 80011e2:	600b      	str	r3, [r1, #0]
 80011e4:	e015      	b.n	8001212 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011e6:	4b26      	ldr	r3, [pc, #152]	@ (8001280 <HAL_RCC_OscConfig+0x270>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ec:	f7ff fc86 	bl	8000afc <HAL_GetTick>
 80011f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011f2:	e008      	b.n	8001206 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011f4:	f7ff fc82 	bl	8000afc <HAL_GetTick>
 80011f8:	4602      	mov	r2, r0
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	2b02      	cmp	r3, #2
 8001200:	d901      	bls.n	8001206 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001202:	2303      	movs	r3, #3
 8001204:	e180      	b.n	8001508 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001206:	4b1d      	ldr	r3, [pc, #116]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 0302 	and.w	r3, r3, #2
 800120e:	2b00      	cmp	r3, #0
 8001210:	d1f0      	bne.n	80011f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 0308 	and.w	r3, r3, #8
 800121a:	2b00      	cmp	r3, #0
 800121c:	d03a      	beq.n	8001294 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	699b      	ldr	r3, [r3, #24]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d019      	beq.n	800125a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001226:	4b17      	ldr	r3, [pc, #92]	@ (8001284 <HAL_RCC_OscConfig+0x274>)
 8001228:	2201      	movs	r2, #1
 800122a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800122c:	f7ff fc66 	bl	8000afc <HAL_GetTick>
 8001230:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001232:	e008      	b.n	8001246 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001234:	f7ff fc62 	bl	8000afc <HAL_GetTick>
 8001238:	4602      	mov	r2, r0
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	2b02      	cmp	r3, #2
 8001240:	d901      	bls.n	8001246 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001242:	2303      	movs	r3, #3
 8001244:	e160      	b.n	8001508 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001246:	4b0d      	ldr	r3, [pc, #52]	@ (800127c <HAL_RCC_OscConfig+0x26c>)
 8001248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800124a:	f003 0302 	and.w	r3, r3, #2
 800124e:	2b00      	cmp	r3, #0
 8001250:	d0f0      	beq.n	8001234 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001252:	2001      	movs	r0, #1
 8001254:	f000 face 	bl	80017f4 <RCC_Delay>
 8001258:	e01c      	b.n	8001294 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800125a:	4b0a      	ldr	r3, [pc, #40]	@ (8001284 <HAL_RCC_OscConfig+0x274>)
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001260:	f7ff fc4c 	bl	8000afc <HAL_GetTick>
 8001264:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001266:	e00f      	b.n	8001288 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001268:	f7ff fc48 	bl	8000afc <HAL_GetTick>
 800126c:	4602      	mov	r2, r0
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	2b02      	cmp	r3, #2
 8001274:	d908      	bls.n	8001288 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001276:	2303      	movs	r3, #3
 8001278:	e146      	b.n	8001508 <HAL_RCC_OscConfig+0x4f8>
 800127a:	bf00      	nop
 800127c:	40021000 	.word	0x40021000
 8001280:	42420000 	.word	0x42420000
 8001284:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001288:	4b92      	ldr	r3, [pc, #584]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 800128a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800128c:	f003 0302 	and.w	r3, r3, #2
 8001290:	2b00      	cmp	r3, #0
 8001292:	d1e9      	bne.n	8001268 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f003 0304 	and.w	r3, r3, #4
 800129c:	2b00      	cmp	r3, #0
 800129e:	f000 80a6 	beq.w	80013ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012a2:	2300      	movs	r3, #0
 80012a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012a6:	4b8b      	ldr	r3, [pc, #556]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 80012a8:	69db      	ldr	r3, [r3, #28]
 80012aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d10d      	bne.n	80012ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012b2:	4b88      	ldr	r3, [pc, #544]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 80012b4:	69db      	ldr	r3, [r3, #28]
 80012b6:	4a87      	ldr	r2, [pc, #540]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 80012b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012bc:	61d3      	str	r3, [r2, #28]
 80012be:	4b85      	ldr	r3, [pc, #532]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 80012c0:	69db      	ldr	r3, [r3, #28]
 80012c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012c6:	60bb      	str	r3, [r7, #8]
 80012c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012ca:	2301      	movs	r3, #1
 80012cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012ce:	4b82      	ldr	r3, [pc, #520]	@ (80014d8 <HAL_RCC_OscConfig+0x4c8>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d118      	bne.n	800130c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012da:	4b7f      	ldr	r3, [pc, #508]	@ (80014d8 <HAL_RCC_OscConfig+0x4c8>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a7e      	ldr	r2, [pc, #504]	@ (80014d8 <HAL_RCC_OscConfig+0x4c8>)
 80012e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012e6:	f7ff fc09 	bl	8000afc <HAL_GetTick>
 80012ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012ec:	e008      	b.n	8001300 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012ee:	f7ff fc05 	bl	8000afc <HAL_GetTick>
 80012f2:	4602      	mov	r2, r0
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	2b64      	cmp	r3, #100	@ 0x64
 80012fa:	d901      	bls.n	8001300 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80012fc:	2303      	movs	r3, #3
 80012fe:	e103      	b.n	8001508 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001300:	4b75      	ldr	r3, [pc, #468]	@ (80014d8 <HAL_RCC_OscConfig+0x4c8>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001308:	2b00      	cmp	r3, #0
 800130a:	d0f0      	beq.n	80012ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	2b01      	cmp	r3, #1
 8001312:	d106      	bne.n	8001322 <HAL_RCC_OscConfig+0x312>
 8001314:	4b6f      	ldr	r3, [pc, #444]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 8001316:	6a1b      	ldr	r3, [r3, #32]
 8001318:	4a6e      	ldr	r2, [pc, #440]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 800131a:	f043 0301 	orr.w	r3, r3, #1
 800131e:	6213      	str	r3, [r2, #32]
 8001320:	e02d      	b.n	800137e <HAL_RCC_OscConfig+0x36e>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	68db      	ldr	r3, [r3, #12]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d10c      	bne.n	8001344 <HAL_RCC_OscConfig+0x334>
 800132a:	4b6a      	ldr	r3, [pc, #424]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 800132c:	6a1b      	ldr	r3, [r3, #32]
 800132e:	4a69      	ldr	r2, [pc, #420]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 8001330:	f023 0301 	bic.w	r3, r3, #1
 8001334:	6213      	str	r3, [r2, #32]
 8001336:	4b67      	ldr	r3, [pc, #412]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 8001338:	6a1b      	ldr	r3, [r3, #32]
 800133a:	4a66      	ldr	r2, [pc, #408]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 800133c:	f023 0304 	bic.w	r3, r3, #4
 8001340:	6213      	str	r3, [r2, #32]
 8001342:	e01c      	b.n	800137e <HAL_RCC_OscConfig+0x36e>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	2b05      	cmp	r3, #5
 800134a:	d10c      	bne.n	8001366 <HAL_RCC_OscConfig+0x356>
 800134c:	4b61      	ldr	r3, [pc, #388]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 800134e:	6a1b      	ldr	r3, [r3, #32]
 8001350:	4a60      	ldr	r2, [pc, #384]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 8001352:	f043 0304 	orr.w	r3, r3, #4
 8001356:	6213      	str	r3, [r2, #32]
 8001358:	4b5e      	ldr	r3, [pc, #376]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 800135a:	6a1b      	ldr	r3, [r3, #32]
 800135c:	4a5d      	ldr	r2, [pc, #372]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 800135e:	f043 0301 	orr.w	r3, r3, #1
 8001362:	6213      	str	r3, [r2, #32]
 8001364:	e00b      	b.n	800137e <HAL_RCC_OscConfig+0x36e>
 8001366:	4b5b      	ldr	r3, [pc, #364]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 8001368:	6a1b      	ldr	r3, [r3, #32]
 800136a:	4a5a      	ldr	r2, [pc, #360]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 800136c:	f023 0301 	bic.w	r3, r3, #1
 8001370:	6213      	str	r3, [r2, #32]
 8001372:	4b58      	ldr	r3, [pc, #352]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 8001374:	6a1b      	ldr	r3, [r3, #32]
 8001376:	4a57      	ldr	r2, [pc, #348]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 8001378:	f023 0304 	bic.w	r3, r3, #4
 800137c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	68db      	ldr	r3, [r3, #12]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d015      	beq.n	80013b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001386:	f7ff fbb9 	bl	8000afc <HAL_GetTick>
 800138a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800138c:	e00a      	b.n	80013a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800138e:	f7ff fbb5 	bl	8000afc <HAL_GetTick>
 8001392:	4602      	mov	r2, r0
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	f241 3288 	movw	r2, #5000	@ 0x1388
 800139c:	4293      	cmp	r3, r2
 800139e:	d901      	bls.n	80013a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80013a0:	2303      	movs	r3, #3
 80013a2:	e0b1      	b.n	8001508 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013a4:	4b4b      	ldr	r3, [pc, #300]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 80013a6:	6a1b      	ldr	r3, [r3, #32]
 80013a8:	f003 0302 	and.w	r3, r3, #2
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d0ee      	beq.n	800138e <HAL_RCC_OscConfig+0x37e>
 80013b0:	e014      	b.n	80013dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013b2:	f7ff fba3 	bl	8000afc <HAL_GetTick>
 80013b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013b8:	e00a      	b.n	80013d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013ba:	f7ff fb9f 	bl	8000afc <HAL_GetTick>
 80013be:	4602      	mov	r2, r0
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d901      	bls.n	80013d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80013cc:	2303      	movs	r3, #3
 80013ce:	e09b      	b.n	8001508 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013d0:	4b40      	ldr	r3, [pc, #256]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 80013d2:	6a1b      	ldr	r3, [r3, #32]
 80013d4:	f003 0302 	and.w	r3, r3, #2
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d1ee      	bne.n	80013ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80013dc:	7dfb      	ldrb	r3, [r7, #23]
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d105      	bne.n	80013ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013e2:	4b3c      	ldr	r3, [pc, #240]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 80013e4:	69db      	ldr	r3, [r3, #28]
 80013e6:	4a3b      	ldr	r2, [pc, #236]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 80013e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80013ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	69db      	ldr	r3, [r3, #28]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	f000 8087 	beq.w	8001506 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013f8:	4b36      	ldr	r3, [pc, #216]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f003 030c 	and.w	r3, r3, #12
 8001400:	2b08      	cmp	r3, #8
 8001402:	d061      	beq.n	80014c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	69db      	ldr	r3, [r3, #28]
 8001408:	2b02      	cmp	r3, #2
 800140a:	d146      	bne.n	800149a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800140c:	4b33      	ldr	r3, [pc, #204]	@ (80014dc <HAL_RCC_OscConfig+0x4cc>)
 800140e:	2200      	movs	r2, #0
 8001410:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001412:	f7ff fb73 	bl	8000afc <HAL_GetTick>
 8001416:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001418:	e008      	b.n	800142c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800141a:	f7ff fb6f 	bl	8000afc <HAL_GetTick>
 800141e:	4602      	mov	r2, r0
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	2b02      	cmp	r3, #2
 8001426:	d901      	bls.n	800142c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001428:	2303      	movs	r3, #3
 800142a:	e06d      	b.n	8001508 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800142c:	4b29      	ldr	r3, [pc, #164]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d1f0      	bne.n	800141a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6a1b      	ldr	r3, [r3, #32]
 800143c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001440:	d108      	bne.n	8001454 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001442:	4b24      	ldr	r3, [pc, #144]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	4921      	ldr	r1, [pc, #132]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 8001450:	4313      	orrs	r3, r2
 8001452:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001454:	4b1f      	ldr	r3, [pc, #124]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6a19      	ldr	r1, [r3, #32]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001464:	430b      	orrs	r3, r1
 8001466:	491b      	ldr	r1, [pc, #108]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 8001468:	4313      	orrs	r3, r2
 800146a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800146c:	4b1b      	ldr	r3, [pc, #108]	@ (80014dc <HAL_RCC_OscConfig+0x4cc>)
 800146e:	2201      	movs	r2, #1
 8001470:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001472:	f7ff fb43 	bl	8000afc <HAL_GetTick>
 8001476:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001478:	e008      	b.n	800148c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800147a:	f7ff fb3f 	bl	8000afc <HAL_GetTick>
 800147e:	4602      	mov	r2, r0
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	2b02      	cmp	r3, #2
 8001486:	d901      	bls.n	800148c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001488:	2303      	movs	r3, #3
 800148a:	e03d      	b.n	8001508 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800148c:	4b11      	ldr	r3, [pc, #68]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001494:	2b00      	cmp	r3, #0
 8001496:	d0f0      	beq.n	800147a <HAL_RCC_OscConfig+0x46a>
 8001498:	e035      	b.n	8001506 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800149a:	4b10      	ldr	r3, [pc, #64]	@ (80014dc <HAL_RCC_OscConfig+0x4cc>)
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a0:	f7ff fb2c 	bl	8000afc <HAL_GetTick>
 80014a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014a6:	e008      	b.n	80014ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014a8:	f7ff fb28 	bl	8000afc <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d901      	bls.n	80014ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e026      	b.n	8001508 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014ba:	4b06      	ldr	r3, [pc, #24]	@ (80014d4 <HAL_RCC_OscConfig+0x4c4>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d1f0      	bne.n	80014a8 <HAL_RCC_OscConfig+0x498>
 80014c6:	e01e      	b.n	8001506 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	69db      	ldr	r3, [r3, #28]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d107      	bne.n	80014e0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	e019      	b.n	8001508 <HAL_RCC_OscConfig+0x4f8>
 80014d4:	40021000 	.word	0x40021000
 80014d8:	40007000 	.word	0x40007000
 80014dc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80014e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001510 <HAL_RCC_OscConfig+0x500>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6a1b      	ldr	r3, [r3, #32]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d106      	bne.n	8001502 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014fe:	429a      	cmp	r2, r3
 8001500:	d001      	beq.n	8001506 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e000      	b.n	8001508 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001506:	2300      	movs	r3, #0
}
 8001508:	4618      	mov	r0, r3
 800150a:	3718      	adds	r7, #24
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40021000 	.word	0x40021000

08001514 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d101      	bne.n	8001528 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e0d0      	b.n	80016ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001528:	4b6a      	ldr	r3, [pc, #424]	@ (80016d4 <HAL_RCC_ClockConfig+0x1c0>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 0307 	and.w	r3, r3, #7
 8001530:	683a      	ldr	r2, [r7, #0]
 8001532:	429a      	cmp	r2, r3
 8001534:	d910      	bls.n	8001558 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001536:	4b67      	ldr	r3, [pc, #412]	@ (80016d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f023 0207 	bic.w	r2, r3, #7
 800153e:	4965      	ldr	r1, [pc, #404]	@ (80016d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	4313      	orrs	r3, r2
 8001544:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001546:	4b63      	ldr	r3, [pc, #396]	@ (80016d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0307 	and.w	r3, r3, #7
 800154e:	683a      	ldr	r2, [r7, #0]
 8001550:	429a      	cmp	r2, r3
 8001552:	d001      	beq.n	8001558 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e0b8      	b.n	80016ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 0302 	and.w	r3, r3, #2
 8001560:	2b00      	cmp	r3, #0
 8001562:	d020      	beq.n	80015a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0304 	and.w	r3, r3, #4
 800156c:	2b00      	cmp	r3, #0
 800156e:	d005      	beq.n	800157c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001570:	4b59      	ldr	r3, [pc, #356]	@ (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	4a58      	ldr	r2, [pc, #352]	@ (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001576:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800157a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 0308 	and.w	r3, r3, #8
 8001584:	2b00      	cmp	r3, #0
 8001586:	d005      	beq.n	8001594 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001588:	4b53      	ldr	r3, [pc, #332]	@ (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	4a52      	ldr	r2, [pc, #328]	@ (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 800158e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001592:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001594:	4b50      	ldr	r3, [pc, #320]	@ (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	494d      	ldr	r1, [pc, #308]	@ (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 80015a2:	4313      	orrs	r3, r2
 80015a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d040      	beq.n	8001634 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d107      	bne.n	80015ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ba:	4b47      	ldr	r3, [pc, #284]	@ (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d115      	bne.n	80015f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e07f      	b.n	80016ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d107      	bne.n	80015e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015d2:	4b41      	ldr	r3, [pc, #260]	@ (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d109      	bne.n	80015f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e073      	b.n	80016ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015e2:	4b3d      	ldr	r3, [pc, #244]	@ (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d101      	bne.n	80015f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e06b      	b.n	80016ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015f2:	4b39      	ldr	r3, [pc, #228]	@ (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f023 0203 	bic.w	r2, r3, #3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	4936      	ldr	r1, [pc, #216]	@ (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001600:	4313      	orrs	r3, r2
 8001602:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001604:	f7ff fa7a 	bl	8000afc <HAL_GetTick>
 8001608:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800160a:	e00a      	b.n	8001622 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800160c:	f7ff fa76 	bl	8000afc <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	f241 3288 	movw	r2, #5000	@ 0x1388
 800161a:	4293      	cmp	r3, r2
 800161c:	d901      	bls.n	8001622 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e053      	b.n	80016ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001622:	4b2d      	ldr	r3, [pc, #180]	@ (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f003 020c 	and.w	r2, r3, #12
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	429a      	cmp	r2, r3
 8001632:	d1eb      	bne.n	800160c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001634:	4b27      	ldr	r3, [pc, #156]	@ (80016d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0307 	and.w	r3, r3, #7
 800163c:	683a      	ldr	r2, [r7, #0]
 800163e:	429a      	cmp	r2, r3
 8001640:	d210      	bcs.n	8001664 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001642:	4b24      	ldr	r3, [pc, #144]	@ (80016d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f023 0207 	bic.w	r2, r3, #7
 800164a:	4922      	ldr	r1, [pc, #136]	@ (80016d4 <HAL_RCC_ClockConfig+0x1c0>)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	4313      	orrs	r3, r2
 8001650:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001652:	4b20      	ldr	r3, [pc, #128]	@ (80016d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0307 	and.w	r3, r3, #7
 800165a:	683a      	ldr	r2, [r7, #0]
 800165c:	429a      	cmp	r2, r3
 800165e:	d001      	beq.n	8001664 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e032      	b.n	80016ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0304 	and.w	r3, r3, #4
 800166c:	2b00      	cmp	r3, #0
 800166e:	d008      	beq.n	8001682 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001670:	4b19      	ldr	r3, [pc, #100]	@ (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	4916      	ldr	r1, [pc, #88]	@ (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 800167e:	4313      	orrs	r3, r2
 8001680:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0308 	and.w	r3, r3, #8
 800168a:	2b00      	cmp	r3, #0
 800168c:	d009      	beq.n	80016a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800168e:	4b12      	ldr	r3, [pc, #72]	@ (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	691b      	ldr	r3, [r3, #16]
 800169a:	00db      	lsls	r3, r3, #3
 800169c:	490e      	ldr	r1, [pc, #56]	@ (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 800169e:	4313      	orrs	r3, r2
 80016a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016a2:	f000 f821 	bl	80016e8 <HAL_RCC_GetSysClockFreq>
 80016a6:	4602      	mov	r2, r0
 80016a8:	4b0b      	ldr	r3, [pc, #44]	@ (80016d8 <HAL_RCC_ClockConfig+0x1c4>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	091b      	lsrs	r3, r3, #4
 80016ae:	f003 030f 	and.w	r3, r3, #15
 80016b2:	490a      	ldr	r1, [pc, #40]	@ (80016dc <HAL_RCC_ClockConfig+0x1c8>)
 80016b4:	5ccb      	ldrb	r3, [r1, r3]
 80016b6:	fa22 f303 	lsr.w	r3, r2, r3
 80016ba:	4a09      	ldr	r2, [pc, #36]	@ (80016e0 <HAL_RCC_ClockConfig+0x1cc>)
 80016bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80016be:	4b09      	ldr	r3, [pc, #36]	@ (80016e4 <HAL_RCC_ClockConfig+0x1d0>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff f9d8 	bl	8000a78 <HAL_InitTick>

  return HAL_OK;
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3710      	adds	r7, #16
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40022000 	.word	0x40022000
 80016d8:	40021000 	.word	0x40021000
 80016dc:	080032c8 	.word	0x080032c8
 80016e0:	20000000 	.word	0x20000000
 80016e4:	20000004 	.word	0x20000004

080016e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b087      	sub	sp, #28
 80016ec:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80016ee:	2300      	movs	r3, #0
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	2300      	movs	r3, #0
 80016f4:	60bb      	str	r3, [r7, #8]
 80016f6:	2300      	movs	r3, #0
 80016f8:	617b      	str	r3, [r7, #20]
 80016fa:	2300      	movs	r3, #0
 80016fc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80016fe:	2300      	movs	r3, #0
 8001700:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001702:	4b1e      	ldr	r3, [pc, #120]	@ (800177c <HAL_RCC_GetSysClockFreq+0x94>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	f003 030c 	and.w	r3, r3, #12
 800170e:	2b04      	cmp	r3, #4
 8001710:	d002      	beq.n	8001718 <HAL_RCC_GetSysClockFreq+0x30>
 8001712:	2b08      	cmp	r3, #8
 8001714:	d003      	beq.n	800171e <HAL_RCC_GetSysClockFreq+0x36>
 8001716:	e027      	b.n	8001768 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001718:	4b19      	ldr	r3, [pc, #100]	@ (8001780 <HAL_RCC_GetSysClockFreq+0x98>)
 800171a:	613b      	str	r3, [r7, #16]
      break;
 800171c:	e027      	b.n	800176e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	0c9b      	lsrs	r3, r3, #18
 8001722:	f003 030f 	and.w	r3, r3, #15
 8001726:	4a17      	ldr	r2, [pc, #92]	@ (8001784 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001728:	5cd3      	ldrb	r3, [r2, r3]
 800172a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d010      	beq.n	8001758 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001736:	4b11      	ldr	r3, [pc, #68]	@ (800177c <HAL_RCC_GetSysClockFreq+0x94>)
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	0c5b      	lsrs	r3, r3, #17
 800173c:	f003 0301 	and.w	r3, r3, #1
 8001740:	4a11      	ldr	r2, [pc, #68]	@ (8001788 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001742:	5cd3      	ldrb	r3, [r2, r3]
 8001744:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a0d      	ldr	r2, [pc, #52]	@ (8001780 <HAL_RCC_GetSysClockFreq+0x98>)
 800174a:	fb03 f202 	mul.w	r2, r3, r2
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	fbb2 f3f3 	udiv	r3, r2, r3
 8001754:	617b      	str	r3, [r7, #20]
 8001756:	e004      	b.n	8001762 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	4a0c      	ldr	r2, [pc, #48]	@ (800178c <HAL_RCC_GetSysClockFreq+0xa4>)
 800175c:	fb02 f303 	mul.w	r3, r2, r3
 8001760:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	613b      	str	r3, [r7, #16]
      break;
 8001766:	e002      	b.n	800176e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001768:	4b05      	ldr	r3, [pc, #20]	@ (8001780 <HAL_RCC_GetSysClockFreq+0x98>)
 800176a:	613b      	str	r3, [r7, #16]
      break;
 800176c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800176e:	693b      	ldr	r3, [r7, #16]
}
 8001770:	4618      	mov	r0, r3
 8001772:	371c      	adds	r7, #28
 8001774:	46bd      	mov	sp, r7
 8001776:	bc80      	pop	{r7}
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	40021000 	.word	0x40021000
 8001780:	007a1200 	.word	0x007a1200
 8001784:	080032e0 	.word	0x080032e0
 8001788:	080032f0 	.word	0x080032f0
 800178c:	003d0900 	.word	0x003d0900

08001790 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001794:	4b02      	ldr	r3, [pc, #8]	@ (80017a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001796:	681b      	ldr	r3, [r3, #0]
}
 8001798:	4618      	mov	r0, r3
 800179a:	46bd      	mov	sp, r7
 800179c:	bc80      	pop	{r7}
 800179e:	4770      	bx	lr
 80017a0:	20000000 	.word	0x20000000

080017a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80017a8:	f7ff fff2 	bl	8001790 <HAL_RCC_GetHCLKFreq>
 80017ac:	4602      	mov	r2, r0
 80017ae:	4b05      	ldr	r3, [pc, #20]	@ (80017c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	0a1b      	lsrs	r3, r3, #8
 80017b4:	f003 0307 	and.w	r3, r3, #7
 80017b8:	4903      	ldr	r1, [pc, #12]	@ (80017c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80017ba:	5ccb      	ldrb	r3, [r1, r3]
 80017bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	40021000 	.word	0x40021000
 80017c8:	080032d8 	.word	0x080032d8

080017cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80017d0:	f7ff ffde 	bl	8001790 <HAL_RCC_GetHCLKFreq>
 80017d4:	4602      	mov	r2, r0
 80017d6:	4b05      	ldr	r3, [pc, #20]	@ (80017ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	0adb      	lsrs	r3, r3, #11
 80017dc:	f003 0307 	and.w	r3, r3, #7
 80017e0:	4903      	ldr	r1, [pc, #12]	@ (80017f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80017e2:	5ccb      	ldrb	r3, [r1, r3]
 80017e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	40021000 	.word	0x40021000
 80017f0:	080032d8 	.word	0x080032d8

080017f4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80017fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001828 <RCC_Delay+0x34>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a0a      	ldr	r2, [pc, #40]	@ (800182c <RCC_Delay+0x38>)
 8001802:	fba2 2303 	umull	r2, r3, r2, r3
 8001806:	0a5b      	lsrs	r3, r3, #9
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	fb02 f303 	mul.w	r3, r2, r3
 800180e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001810:	bf00      	nop
  }
  while (Delay --);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	1e5a      	subs	r2, r3, #1
 8001816:	60fa      	str	r2, [r7, #12]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d1f9      	bne.n	8001810 <RCC_Delay+0x1c>
}
 800181c:	bf00      	nop
 800181e:	bf00      	nop
 8001820:	3714      	adds	r7, #20
 8001822:	46bd      	mov	sp, r7
 8001824:	bc80      	pop	{r7}
 8001826:	4770      	bx	lr
 8001828:	20000000 	.word	0x20000000
 800182c:	10624dd3 	.word	0x10624dd3

08001830 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d101      	bne.n	8001842 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e076      	b.n	8001930 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001846:	2b00      	cmp	r3, #0
 8001848:	d108      	bne.n	800185c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001852:	d009      	beq.n	8001868 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2200      	movs	r2, #0
 8001858:	61da      	str	r2, [r3, #28]
 800185a:	e005      	b.n	8001868 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2200      	movs	r2, #0
 8001860:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2200      	movs	r2, #0
 8001866:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2200      	movs	r2, #0
 800186c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001874:	b2db      	uxtb	r3, r3
 8001876:	2b00      	cmp	r3, #0
 8001878:	d106      	bne.n	8001888 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2200      	movs	r2, #0
 800187e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f7fe fd96 	bl	80003b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2202      	movs	r2, #2
 800188c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800189e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80018b0:	431a      	orrs	r2, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	68db      	ldr	r3, [r3, #12]
 80018b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80018ba:	431a      	orrs	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	691b      	ldr	r3, [r3, #16]
 80018c0:	f003 0302 	and.w	r3, r3, #2
 80018c4:	431a      	orrs	r2, r3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	695b      	ldr	r3, [r3, #20]
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	431a      	orrs	r2, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	699b      	ldr	r3, [r3, #24]
 80018d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80018d8:	431a      	orrs	r2, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	69db      	ldr	r3, [r3, #28]
 80018de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80018e2:	431a      	orrs	r2, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6a1b      	ldr	r3, [r3, #32]
 80018e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018ec:	ea42 0103 	orr.w	r1, r2, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018f4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	430a      	orrs	r2, r1
 80018fe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	699b      	ldr	r3, [r3, #24]
 8001904:	0c1a      	lsrs	r2, r3, #16
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f002 0204 	and.w	r2, r2, #4
 800190e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	69da      	ldr	r2, [r3, #28]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800191e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2200      	movs	r2, #0
 8001924:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2201      	movs	r2, #1
 800192a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800192e:	2300      	movs	r3, #0
}
 8001930:	4618      	mov	r0, r3
 8001932:	3708      	adds	r7, #8
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}

08001938 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b088      	sub	sp, #32
 800193c:	af00      	add	r7, sp, #0
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	60b9      	str	r1, [r7, #8]
 8001942:	603b      	str	r3, [r7, #0]
 8001944:	4613      	mov	r3, r2
 8001946:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001948:	f7ff f8d8 	bl	8000afc <HAL_GetTick>
 800194c:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800194e:	88fb      	ldrh	r3, [r7, #6]
 8001950:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001958:	b2db      	uxtb	r3, r3
 800195a:	2b01      	cmp	r3, #1
 800195c:	d001      	beq.n	8001962 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800195e:	2302      	movs	r3, #2
 8001960:	e12a      	b.n	8001bb8 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d002      	beq.n	800196e <HAL_SPI_Transmit+0x36>
 8001968:	88fb      	ldrh	r3, [r7, #6]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d101      	bne.n	8001972 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e122      	b.n	8001bb8 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001978:	2b01      	cmp	r3, #1
 800197a:	d101      	bne.n	8001980 <HAL_SPI_Transmit+0x48>
 800197c:	2302      	movs	r3, #2
 800197e:	e11b      	b.n	8001bb8 <HAL_SPI_Transmit+0x280>
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2201      	movs	r2, #1
 8001984:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2203      	movs	r2, #3
 800198c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2200      	movs	r2, #0
 8001994:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	68ba      	ldr	r2, [r7, #8]
 800199a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	88fa      	ldrh	r2, [r7, #6]
 80019a0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	88fa      	ldrh	r2, [r7, #6]
 80019a6:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	2200      	movs	r2, #0
 80019ac:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	2200      	movs	r2, #0
 80019b2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2200      	movs	r2, #0
 80019b8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	2200      	movs	r2, #0
 80019be:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2200      	movs	r2, #0
 80019c4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80019ce:	d10f      	bne.n	80019f0 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80019de:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80019ee:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019fa:	2b40      	cmp	r3, #64	@ 0x40
 80019fc:	d007      	beq.n	8001a0e <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001a0c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	68db      	ldr	r3, [r3, #12]
 8001a12:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001a16:	d152      	bne.n	8001abe <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d002      	beq.n	8001a26 <HAL_SPI_Transmit+0xee>
 8001a20:	8b7b      	ldrh	r3, [r7, #26]
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d145      	bne.n	8001ab2 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2a:	881a      	ldrh	r2, [r3, #0]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a36:	1c9a      	adds	r2, r3, #2
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	3b01      	subs	r3, #1
 8001a44:	b29a      	uxth	r2, r3
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001a4a:	e032      	b.n	8001ab2 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d112      	bne.n	8001a80 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a5e:	881a      	ldrh	r2, [r3, #0]
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6a:	1c9a      	adds	r2, r3, #2
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	3b01      	subs	r3, #1
 8001a78:	b29a      	uxth	r2, r3
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001a7e:	e018      	b.n	8001ab2 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001a80:	f7ff f83c 	bl	8000afc <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	683a      	ldr	r2, [r7, #0]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d803      	bhi.n	8001a98 <HAL_SPI_Transmit+0x160>
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a96:	d102      	bne.n	8001a9e <HAL_SPI_Transmit+0x166>
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d109      	bne.n	8001ab2 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e082      	b.n	8001bb8 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d1c7      	bne.n	8001a4c <HAL_SPI_Transmit+0x114>
 8001abc:	e053      	b.n	8001b66 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d002      	beq.n	8001acc <HAL_SPI_Transmit+0x194>
 8001ac6:	8b7b      	ldrh	r3, [r7, #26]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d147      	bne.n	8001b5c <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	330c      	adds	r3, #12
 8001ad6:	7812      	ldrb	r2, [r2, #0]
 8001ad8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ade:	1c5a      	adds	r2, r3, #1
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	3b01      	subs	r3, #1
 8001aec:	b29a      	uxth	r2, r3
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001af2:	e033      	b.n	8001b5c <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d113      	bne.n	8001b2a <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	330c      	adds	r3, #12
 8001b0c:	7812      	ldrb	r2, [r2, #0]
 8001b0e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b14:	1c5a      	adds	r2, r3, #1
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	3b01      	subs	r3, #1
 8001b22:	b29a      	uxth	r2, r3
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001b28:	e018      	b.n	8001b5c <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001b2a:	f7fe ffe7 	bl	8000afc <HAL_GetTick>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	683a      	ldr	r2, [r7, #0]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d803      	bhi.n	8001b42 <HAL_SPI_Transmit+0x20a>
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b40:	d102      	bne.n	8001b48 <HAL_SPI_Transmit+0x210>
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d109      	bne.n	8001b5c <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2200      	movs	r2, #0
 8001b54:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e02d      	b.n	8001bb8 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d1c6      	bne.n	8001af4 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001b66:	69fa      	ldr	r2, [r7, #28]
 8001b68:	6839      	ldr	r1, [r7, #0]
 8001b6a:	68f8      	ldr	r0, [r7, #12]
 8001b6c:	f000 fbc4 	bl	80022f8 <SPI_EndRxTxTransaction>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d002      	beq.n	8001b7c <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2220      	movs	r2, #32
 8001b7a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d10a      	bne.n	8001b9a <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001b84:	2300      	movs	r3, #0
 8001b86:	617b      	str	r3, [r7, #20]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	68db      	ldr	r3, [r3, #12]
 8001b8e:	617b      	str	r3, [r7, #20]
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	617b      	str	r3, [r7, #20]
 8001b98:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e000      	b.n	8001bb8 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8001bb6:	2300      	movs	r3, #0
  }
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3720      	adds	r7, #32
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b088      	sub	sp, #32
 8001bc4:	af02      	add	r7, sp, #8
 8001bc6:	60f8      	str	r0, [r7, #12]
 8001bc8:	60b9      	str	r1, [r7, #8]
 8001bca:	603b      	str	r3, [r7, #0]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d001      	beq.n	8001be0 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8001bdc:	2302      	movs	r3, #2
 8001bde:	e104      	b.n	8001dea <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001be8:	d112      	bne.n	8001c10 <HAL_SPI_Receive+0x50>
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d10e      	bne.n	8001c10 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2204      	movs	r2, #4
 8001bf6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001bfa:	88fa      	ldrh	r2, [r7, #6]
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	9300      	str	r3, [sp, #0]
 8001c00:	4613      	mov	r3, r2
 8001c02:	68ba      	ldr	r2, [r7, #8]
 8001c04:	68b9      	ldr	r1, [r7, #8]
 8001c06:	68f8      	ldr	r0, [r7, #12]
 8001c08:	f000 f8f3 	bl	8001df2 <HAL_SPI_TransmitReceive>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	e0ec      	b.n	8001dea <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001c10:	f7fe ff74 	bl	8000afc <HAL_GetTick>
 8001c14:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d002      	beq.n	8001c22 <HAL_SPI_Receive+0x62>
 8001c1c:	88fb      	ldrh	r3, [r7, #6]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d101      	bne.n	8001c26 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e0e1      	b.n	8001dea <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d101      	bne.n	8001c34 <HAL_SPI_Receive+0x74>
 8001c30:	2302      	movs	r3, #2
 8001c32:	e0da      	b.n	8001dea <HAL_SPI_Receive+0x22a>
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2204      	movs	r2, #4
 8001c40:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2200      	movs	r2, #0
 8001c48:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	68ba      	ldr	r2, [r7, #8]
 8001c4e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	88fa      	ldrh	r2, [r7, #6]
 8001c54:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	88fa      	ldrh	r2, [r7, #6]
 8001c5a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2200      	movs	r2, #0
 8001c66:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	2200      	movs	r2, #0
 8001c72:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2200      	movs	r2, #0
 8001c78:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001c82:	d10f      	bne.n	8001ca4 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001c92:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001ca2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cae:	2b40      	cmp	r3, #64	@ 0x40
 8001cb0:	d007      	beq.n	8001cc2 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001cc0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d170      	bne.n	8001dac <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001cca:	e035      	b.n	8001d38 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	f003 0301 	and.w	r3, r3, #1
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d115      	bne.n	8001d06 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f103 020c 	add.w	r2, r3, #12
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ce6:	7812      	ldrb	r2, [r2, #0]
 8001ce8:	b2d2      	uxtb	r2, r2
 8001cea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cf0:	1c5a      	adds	r2, r3, #1
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	3b01      	subs	r3, #1
 8001cfe:	b29a      	uxth	r2, r3
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001d04:	e018      	b.n	8001d38 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001d06:	f7fe fef9 	bl	8000afc <HAL_GetTick>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	683a      	ldr	r2, [r7, #0]
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d803      	bhi.n	8001d1e <HAL_SPI_Receive+0x15e>
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d1c:	d102      	bne.n	8001d24 <HAL_SPI_Receive+0x164>
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d109      	bne.n	8001d38 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001d34:	2303      	movs	r3, #3
 8001d36:	e058      	b.n	8001dea <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d1c4      	bne.n	8001ccc <HAL_SPI_Receive+0x10c>
 8001d42:	e038      	b.n	8001db6 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d113      	bne.n	8001d7a <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	68da      	ldr	r2, [r3, #12]
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d5c:	b292      	uxth	r2, r2
 8001d5e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d64:	1c9a      	adds	r2, r3, #2
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	3b01      	subs	r3, #1
 8001d72:	b29a      	uxth	r2, r3
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001d78:	e018      	b.n	8001dac <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001d7a:	f7fe febf 	bl	8000afc <HAL_GetTick>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	683a      	ldr	r2, [r7, #0]
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d803      	bhi.n	8001d92 <HAL_SPI_Receive+0x1d2>
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d90:	d102      	bne.n	8001d98 <HAL_SPI_Receive+0x1d8>
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d109      	bne.n	8001dac <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2200      	movs	r2, #0
 8001da4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001da8:	2303      	movs	r3, #3
 8001daa:	e01e      	b.n	8001dea <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d1c6      	bne.n	8001d44 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001db6:	697a      	ldr	r2, [r7, #20]
 8001db8:	6839      	ldr	r1, [r7, #0]
 8001dba:	68f8      	ldr	r0, [r7, #12]
 8001dbc:	f000 fa4a 	bl	8002254 <SPI_EndRxTransaction>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d002      	beq.n	8001dcc <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2220      	movs	r2, #32
 8001dca:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e000      	b.n	8001dea <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8001de8:	2300      	movs	r3, #0
  }
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3718      	adds	r7, #24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b08a      	sub	sp, #40	@ 0x28
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	60f8      	str	r0, [r7, #12]
 8001dfa:	60b9      	str	r1, [r7, #8]
 8001dfc:	607a      	str	r2, [r7, #4]
 8001dfe:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001e00:	2301      	movs	r3, #1
 8001e02:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001e04:	f7fe fe7a 	bl	8000afc <HAL_GetTick>
 8001e08:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001e10:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8001e18:	887b      	ldrh	r3, [r7, #2]
 8001e1a:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001e1c:	7ffb      	ldrb	r3, [r7, #31]
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d00c      	beq.n	8001e3c <HAL_SPI_TransmitReceive+0x4a>
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001e28:	d106      	bne.n	8001e38 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d102      	bne.n	8001e38 <HAL_SPI_TransmitReceive+0x46>
 8001e32:	7ffb      	ldrb	r3, [r7, #31]
 8001e34:	2b04      	cmp	r3, #4
 8001e36:	d001      	beq.n	8001e3c <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8001e38:	2302      	movs	r3, #2
 8001e3a:	e17f      	b.n	800213c <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d005      	beq.n	8001e4e <HAL_SPI_TransmitReceive+0x5c>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d002      	beq.n	8001e4e <HAL_SPI_TransmitReceive+0x5c>
 8001e48:	887b      	ldrh	r3, [r7, #2]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d101      	bne.n	8001e52 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e174      	b.n	800213c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d101      	bne.n	8001e60 <HAL_SPI_TransmitReceive+0x6e>
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	e16d      	b.n	800213c <HAL_SPI_TransmitReceive+0x34a>
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	2b04      	cmp	r3, #4
 8001e72:	d003      	beq.n	8001e7c <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2205      	movs	r2, #5
 8001e78:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	887a      	ldrh	r2, [r7, #2]
 8001e8c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	887a      	ldrh	r2, [r7, #2]
 8001e92:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	68ba      	ldr	r2, [r7, #8]
 8001e98:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	887a      	ldrh	r2, [r7, #2]
 8001e9e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	887a      	ldrh	r2, [r7, #2]
 8001ea4:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ebc:	2b40      	cmp	r3, #64	@ 0x40
 8001ebe:	d007      	beq.n	8001ed0 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001ece:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001ed8:	d17e      	bne.n	8001fd8 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d002      	beq.n	8001ee8 <HAL_SPI_TransmitReceive+0xf6>
 8001ee2:	8afb      	ldrh	r3, [r7, #22]
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d16c      	bne.n	8001fc2 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eec:	881a      	ldrh	r2, [r3, #0]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef8:	1c9a      	adds	r2, r3, #2
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	3b01      	subs	r3, #1
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f0c:	e059      	b.n	8001fc2 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	f003 0302 	and.w	r3, r3, #2
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d11b      	bne.n	8001f54 <HAL_SPI_TransmitReceive+0x162>
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d016      	beq.n	8001f54 <HAL_SPI_TransmitReceive+0x162>
 8001f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d113      	bne.n	8001f54 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f30:	881a      	ldrh	r2, [r3, #0]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f3c:	1c9a      	adds	r2, r3, #2
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	3b01      	subs	r3, #1
 8001f4a:	b29a      	uxth	r2, r3
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001f50:	2300      	movs	r3, #0
 8001f52:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d119      	bne.n	8001f96 <HAL_SPI_TransmitReceive+0x1a4>
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d014      	beq.n	8001f96 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	68da      	ldr	r2, [r3, #12]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f76:	b292      	uxth	r2, r2
 8001f78:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f7e:	1c9a      	adds	r2, r3, #2
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	b29a      	uxth	r2, r3
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001f92:	2301      	movs	r3, #1
 8001f94:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001f96:	f7fe fdb1 	bl	8000afc <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	6a3b      	ldr	r3, [r7, #32]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d80d      	bhi.n	8001fc2 <HAL_SPI_TransmitReceive+0x1d0>
 8001fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fac:	d009      	beq.n	8001fc2 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e0bc      	b.n	800213c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d1a0      	bne.n	8001f0e <HAL_SPI_TransmitReceive+0x11c>
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d19b      	bne.n	8001f0e <HAL_SPI_TransmitReceive+0x11c>
 8001fd6:	e082      	b.n	80020de <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d002      	beq.n	8001fe6 <HAL_SPI_TransmitReceive+0x1f4>
 8001fe0:	8afb      	ldrh	r3, [r7, #22]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d171      	bne.n	80020ca <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	330c      	adds	r3, #12
 8001ff0:	7812      	ldrb	r2, [r2, #0]
 8001ff2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff8:	1c5a      	adds	r2, r3, #1
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002002:	b29b      	uxth	r3, r3
 8002004:	3b01      	subs	r3, #1
 8002006:	b29a      	uxth	r2, r3
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800200c:	e05d      	b.n	80020ca <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	f003 0302 	and.w	r3, r3, #2
 8002018:	2b02      	cmp	r3, #2
 800201a:	d11c      	bne.n	8002056 <HAL_SPI_TransmitReceive+0x264>
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002020:	b29b      	uxth	r3, r3
 8002022:	2b00      	cmp	r3, #0
 8002024:	d017      	beq.n	8002056 <HAL_SPI_TransmitReceive+0x264>
 8002026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002028:	2b01      	cmp	r3, #1
 800202a:	d114      	bne.n	8002056 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	330c      	adds	r3, #12
 8002036:	7812      	ldrb	r2, [r2, #0]
 8002038:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800203e:	1c5a      	adds	r2, r3, #1
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002048:	b29b      	uxth	r3, r3
 800204a:	3b01      	subs	r3, #1
 800204c:	b29a      	uxth	r2, r3
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002052:	2300      	movs	r3, #0
 8002054:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f003 0301 	and.w	r3, r3, #1
 8002060:	2b01      	cmp	r3, #1
 8002062:	d119      	bne.n	8002098 <HAL_SPI_TransmitReceive+0x2a6>
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002068:	b29b      	uxth	r3, r3
 800206a:	2b00      	cmp	r3, #0
 800206c:	d014      	beq.n	8002098 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	68da      	ldr	r2, [r3, #12]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002078:	b2d2      	uxtb	r2, r2
 800207a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002080:	1c5a      	adds	r2, r3, #1
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800208a:	b29b      	uxth	r3, r3
 800208c:	3b01      	subs	r3, #1
 800208e:	b29a      	uxth	r2, r3
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002094:	2301      	movs	r3, #1
 8002096:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002098:	f7fe fd30 	bl	8000afc <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	6a3b      	ldr	r3, [r7, #32]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d803      	bhi.n	80020b0 <HAL_SPI_TransmitReceive+0x2be>
 80020a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ae:	d102      	bne.n	80020b6 <HAL_SPI_TransmitReceive+0x2c4>
 80020b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d109      	bne.n	80020ca <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2201      	movs	r2, #1
 80020ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e038      	b.n	800213c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d19c      	bne.n	800200e <HAL_SPI_TransmitReceive+0x21c>
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80020d8:	b29b      	uxth	r3, r3
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d197      	bne.n	800200e <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80020de:	6a3a      	ldr	r2, [r7, #32]
 80020e0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80020e2:	68f8      	ldr	r0, [r7, #12]
 80020e4:	f000 f908 	bl	80022f8 <SPI_EndRxTxTransaction>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d008      	beq.n	8002100 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2220      	movs	r2, #32
 80020f2:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2200      	movs	r2, #0
 80020f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e01d      	b.n	800213c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d10a      	bne.n	800211e <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002108:	2300      	movs	r3, #0
 800210a:	613b      	str	r3, [r7, #16]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	613b      	str	r3, [r7, #16]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	613b      	str	r3, [r7, #16]
 800211c:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2201      	movs	r2, #1
 8002122:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2200      	movs	r2, #0
 800212a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e000      	b.n	800213c <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800213a:	2300      	movs	r3, #0
  }
}
 800213c:	4618      	mov	r0, r3
 800213e:	3728      	adds	r7, #40	@ 0x28
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}

08002144 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b088      	sub	sp, #32
 8002148:	af00      	add	r7, sp, #0
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	60b9      	str	r1, [r7, #8]
 800214e:	603b      	str	r3, [r7, #0]
 8002150:	4613      	mov	r3, r2
 8002152:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002154:	f7fe fcd2 	bl	8000afc <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800215c:	1a9b      	subs	r3, r3, r2
 800215e:	683a      	ldr	r2, [r7, #0]
 8002160:	4413      	add	r3, r2
 8002162:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002164:	f7fe fcca 	bl	8000afc <HAL_GetTick>
 8002168:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800216a:	4b39      	ldr	r3, [pc, #228]	@ (8002250 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	015b      	lsls	r3, r3, #5
 8002170:	0d1b      	lsrs	r3, r3, #20
 8002172:	69fa      	ldr	r2, [r7, #28]
 8002174:	fb02 f303 	mul.w	r3, r2, r3
 8002178:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800217a:	e054      	b.n	8002226 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002182:	d050      	beq.n	8002226 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002184:	f7fe fcba 	bl	8000afc <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	69fa      	ldr	r2, [r7, #28]
 8002190:	429a      	cmp	r2, r3
 8002192:	d902      	bls.n	800219a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d13d      	bne.n	8002216 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	685a      	ldr	r2, [r3, #4]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80021a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80021b2:	d111      	bne.n	80021d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80021bc:	d004      	beq.n	80021c8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021c6:	d107      	bne.n	80021d8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80021d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80021e0:	d10f      	bne.n	8002202 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80021f0:	601a      	str	r2, [r3, #0]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002200:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2201      	movs	r2, #1
 8002206:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2200      	movs	r2, #0
 800220e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e017      	b.n	8002246 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d101      	bne.n	8002220 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800221c:	2300      	movs	r3, #0
 800221e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	3b01      	subs	r3, #1
 8002224:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	689a      	ldr	r2, [r3, #8]
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	4013      	ands	r3, r2
 8002230:	68ba      	ldr	r2, [r7, #8]
 8002232:	429a      	cmp	r2, r3
 8002234:	bf0c      	ite	eq
 8002236:	2301      	moveq	r3, #1
 8002238:	2300      	movne	r3, #0
 800223a:	b2db      	uxtb	r3, r3
 800223c:	461a      	mov	r2, r3
 800223e:	79fb      	ldrb	r3, [r7, #7]
 8002240:	429a      	cmp	r2, r3
 8002242:	d19b      	bne.n	800217c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	3720      	adds	r7, #32
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	20000000 	.word	0x20000000

08002254 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b086      	sub	sp, #24
 8002258:	af02      	add	r7, sp, #8
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002268:	d111      	bne.n	800228e <SPI_EndRxTransaction+0x3a>
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002272:	d004      	beq.n	800227e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800227c:	d107      	bne.n	800228e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800228c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002296:	d117      	bne.n	80022c8 <SPI_EndRxTransaction+0x74>
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022a0:	d112      	bne.n	80022c8 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	9300      	str	r3, [sp, #0]
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	2200      	movs	r2, #0
 80022aa:	2101      	movs	r1, #1
 80022ac:	68f8      	ldr	r0, [r7, #12]
 80022ae:	f7ff ff49 	bl	8002144 <SPI_WaitFlagStateUntilTimeout>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d01a      	beq.n	80022ee <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022bc:	f043 0220 	orr.w	r2, r3, #32
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e013      	b.n	80022f0 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	9300      	str	r3, [sp, #0]
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	2200      	movs	r2, #0
 80022d0:	2180      	movs	r1, #128	@ 0x80
 80022d2:	68f8      	ldr	r0, [r7, #12]
 80022d4:	f7ff ff36 	bl	8002144 <SPI_WaitFlagStateUntilTimeout>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d007      	beq.n	80022ee <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022e2:	f043 0220 	orr.w	r2, r3, #32
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e000      	b.n	80022f0 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80022ee:	2300      	movs	r3, #0
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3710      	adds	r7, #16
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b086      	sub	sp, #24
 80022fc:	af02      	add	r7, sp, #8
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	9300      	str	r3, [sp, #0]
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	2201      	movs	r2, #1
 800230c:	2102      	movs	r1, #2
 800230e:	68f8      	ldr	r0, [r7, #12]
 8002310:	f7ff ff18 	bl	8002144 <SPI_WaitFlagStateUntilTimeout>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d007      	beq.n	800232a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800231e:	f043 0220 	orr.w	r2, r3, #32
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e013      	b.n	8002352 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	9300      	str	r3, [sp, #0]
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	2200      	movs	r2, #0
 8002332:	2180      	movs	r1, #128	@ 0x80
 8002334:	68f8      	ldr	r0, [r7, #12]
 8002336:	f7ff ff05 	bl	8002144 <SPI_WaitFlagStateUntilTimeout>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d007      	beq.n	8002350 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002344:	f043 0220 	orr.w	r2, r3, #32
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e000      	b.n	8002352 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	3710      	adds	r7, #16
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}

0800235a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800235a:	b580      	push	{r7, lr}
 800235c:	b082      	sub	sp, #8
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d101      	bne.n	800236c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e042      	b.n	80023f2 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002372:	b2db      	uxtb	r3, r3
 8002374:	2b00      	cmp	r3, #0
 8002376:	d106      	bne.n	8002386 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2200      	movs	r2, #0
 800237c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f7fe f861 	bl	8000448 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2224      	movs	r2, #36	@ 0x24
 800238a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	68da      	ldr	r2, [r3, #12]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800239c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f000 f972 	bl	8002688 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	691a      	ldr	r2, [r3, #16]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80023b2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	695a      	ldr	r2, [r3, #20]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80023c2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	68da      	ldr	r2, [r3, #12]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80023d2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2220      	movs	r2, #32
 80023de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2220      	movs	r2, #32
 80023e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}

080023fa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023fa:	b580      	push	{r7, lr}
 80023fc:	b08a      	sub	sp, #40	@ 0x28
 80023fe:	af02      	add	r7, sp, #8
 8002400:	60f8      	str	r0, [r7, #12]
 8002402:	60b9      	str	r1, [r7, #8]
 8002404:	603b      	str	r3, [r7, #0]
 8002406:	4613      	mov	r3, r2
 8002408:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800240a:	2300      	movs	r3, #0
 800240c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002414:	b2db      	uxtb	r3, r3
 8002416:	2b20      	cmp	r3, #32
 8002418:	d175      	bne.n	8002506 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d002      	beq.n	8002426 <HAL_UART_Transmit+0x2c>
 8002420:	88fb      	ldrh	r3, [r7, #6]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d101      	bne.n	800242a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e06e      	b.n	8002508 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2200      	movs	r2, #0
 800242e:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2221      	movs	r2, #33	@ 0x21
 8002434:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002438:	f7fe fb60 	bl	8000afc <HAL_GetTick>
 800243c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	88fa      	ldrh	r2, [r7, #6]
 8002442:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	88fa      	ldrh	r2, [r7, #6]
 8002448:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002452:	d108      	bne.n	8002466 <HAL_UART_Transmit+0x6c>
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	691b      	ldr	r3, [r3, #16]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d104      	bne.n	8002466 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800245c:	2300      	movs	r3, #0
 800245e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	61bb      	str	r3, [r7, #24]
 8002464:	e003      	b.n	800246e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800246a:	2300      	movs	r3, #0
 800246c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800246e:	e02e      	b.n	80024ce <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	9300      	str	r3, [sp, #0]
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	2200      	movs	r2, #0
 8002478:	2180      	movs	r1, #128	@ 0x80
 800247a:	68f8      	ldr	r0, [r7, #12]
 800247c:	f000 f848 	bl	8002510 <UART_WaitOnFlagUntilTimeout>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d005      	beq.n	8002492 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2220      	movs	r2, #32
 800248a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e03a      	b.n	8002508 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d10b      	bne.n	80024b0 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	881b      	ldrh	r3, [r3, #0]
 800249c:	461a      	mov	r2, r3
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024a6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	3302      	adds	r3, #2
 80024ac:	61bb      	str	r3, [r7, #24]
 80024ae:	e007      	b.n	80024c0 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	781a      	ldrb	r2, [r3, #0]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	3301      	adds	r3, #1
 80024be:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	3b01      	subs	r3, #1
 80024c8:	b29a      	uxth	r2, r3
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d1cb      	bne.n	8002470 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	9300      	str	r3, [sp, #0]
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	2200      	movs	r2, #0
 80024e0:	2140      	movs	r1, #64	@ 0x40
 80024e2:	68f8      	ldr	r0, [r7, #12]
 80024e4:	f000 f814 	bl	8002510 <UART_WaitOnFlagUntilTimeout>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d005      	beq.n	80024fa <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2220      	movs	r2, #32
 80024f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e006      	b.n	8002508 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2220      	movs	r2, #32
 80024fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002502:	2300      	movs	r3, #0
 8002504:	e000      	b.n	8002508 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002506:	2302      	movs	r3, #2
  }
}
 8002508:	4618      	mov	r0, r3
 800250a:	3720      	adds	r7, #32
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b086      	sub	sp, #24
 8002514:	af00      	add	r7, sp, #0
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	603b      	str	r3, [r7, #0]
 800251c:	4613      	mov	r3, r2
 800251e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002520:	e03b      	b.n	800259a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002522:	6a3b      	ldr	r3, [r7, #32]
 8002524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002528:	d037      	beq.n	800259a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800252a:	f7fe fae7 	bl	8000afc <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	6a3a      	ldr	r2, [r7, #32]
 8002536:	429a      	cmp	r2, r3
 8002538:	d302      	bcc.n	8002540 <UART_WaitOnFlagUntilTimeout+0x30>
 800253a:	6a3b      	ldr	r3, [r7, #32]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d101      	bne.n	8002544 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	e03a      	b.n	80025ba <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	f003 0304 	and.w	r3, r3, #4
 800254e:	2b00      	cmp	r3, #0
 8002550:	d023      	beq.n	800259a <UART_WaitOnFlagUntilTimeout+0x8a>
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	2b80      	cmp	r3, #128	@ 0x80
 8002556:	d020      	beq.n	800259a <UART_WaitOnFlagUntilTimeout+0x8a>
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	2b40      	cmp	r3, #64	@ 0x40
 800255c:	d01d      	beq.n	800259a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0308 	and.w	r3, r3, #8
 8002568:	2b08      	cmp	r3, #8
 800256a:	d116      	bne.n	800259a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800256c:	2300      	movs	r3, #0
 800256e:	617b      	str	r3, [r7, #20]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	617b      	str	r3, [r7, #20]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	617b      	str	r3, [r7, #20]
 8002580:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002582:	68f8      	ldr	r0, [r7, #12]
 8002584:	f000 f81d 	bl	80025c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2208      	movs	r2, #8
 800258c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2200      	movs	r2, #0
 8002592:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e00f      	b.n	80025ba <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	4013      	ands	r3, r2
 80025a4:	68ba      	ldr	r2, [r7, #8]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	bf0c      	ite	eq
 80025aa:	2301      	moveq	r3, #1
 80025ac:	2300      	movne	r3, #0
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	461a      	mov	r2, r3
 80025b2:	79fb      	ldrb	r3, [r7, #7]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d0b4      	beq.n	8002522 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3718      	adds	r7, #24
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80025c2:	b480      	push	{r7}
 80025c4:	b095      	sub	sp, #84	@ 0x54
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	330c      	adds	r3, #12
 80025d0:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025d4:	e853 3f00 	ldrex	r3, [r3]
 80025d8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80025da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80025e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	330c      	adds	r3, #12
 80025e8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80025ea:	643a      	str	r2, [r7, #64]	@ 0x40
 80025ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025ee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80025f0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80025f2:	e841 2300 	strex	r3, r2, [r1]
 80025f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80025f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d1e5      	bne.n	80025ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	3314      	adds	r3, #20
 8002604:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002606:	6a3b      	ldr	r3, [r7, #32]
 8002608:	e853 3f00 	ldrex	r3, [r3]
 800260c:	61fb      	str	r3, [r7, #28]
   return(result);
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	f023 0301 	bic.w	r3, r3, #1
 8002614:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	3314      	adds	r3, #20
 800261c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800261e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002620:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002622:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002624:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002626:	e841 2300 	strex	r3, r2, [r1]
 800262a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800262c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1e5      	bne.n	80025fe <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002636:	2b01      	cmp	r3, #1
 8002638:	d119      	bne.n	800266e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	330c      	adds	r3, #12
 8002640:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	e853 3f00 	ldrex	r3, [r3]
 8002648:	60bb      	str	r3, [r7, #8]
   return(result);
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	f023 0310 	bic.w	r3, r3, #16
 8002650:	647b      	str	r3, [r7, #68]	@ 0x44
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	330c      	adds	r3, #12
 8002658:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800265a:	61ba      	str	r2, [r7, #24]
 800265c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800265e:	6979      	ldr	r1, [r7, #20]
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	e841 2300 	strex	r3, r2, [r1]
 8002666:	613b      	str	r3, [r7, #16]
   return(result);
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1e5      	bne.n	800263a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2220      	movs	r2, #32
 8002672:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800267c:	bf00      	nop
 800267e:	3754      	adds	r7, #84	@ 0x54
 8002680:	46bd      	mov	sp, r7
 8002682:	bc80      	pop	{r7}
 8002684:	4770      	bx	lr
	...

08002688 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	68da      	ldr	r2, [r3, #12]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	430a      	orrs	r2, r1
 80026a4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	689a      	ldr	r2, [r3, #8]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	431a      	orrs	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	695b      	ldr	r3, [r3, #20]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80026c2:	f023 030c 	bic.w	r3, r3, #12
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	6812      	ldr	r2, [r2, #0]
 80026ca:	68b9      	ldr	r1, [r7, #8]
 80026cc:	430b      	orrs	r3, r1
 80026ce:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	695b      	ldr	r3, [r3, #20]
 80026d6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	699a      	ldr	r2, [r3, #24]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	430a      	orrs	r2, r1
 80026e4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a2c      	ldr	r2, [pc, #176]	@ (800279c <UART_SetConfig+0x114>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d103      	bne.n	80026f8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80026f0:	f7ff f86c 	bl	80017cc <HAL_RCC_GetPCLK2Freq>
 80026f4:	60f8      	str	r0, [r7, #12]
 80026f6:	e002      	b.n	80026fe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80026f8:	f7ff f854 	bl	80017a4 <HAL_RCC_GetPCLK1Freq>
 80026fc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80026fe:	68fa      	ldr	r2, [r7, #12]
 8002700:	4613      	mov	r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	4413      	add	r3, r2
 8002706:	009a      	lsls	r2, r3, #2
 8002708:	441a      	add	r2, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	fbb2 f3f3 	udiv	r3, r2, r3
 8002714:	4a22      	ldr	r2, [pc, #136]	@ (80027a0 <UART_SetConfig+0x118>)
 8002716:	fba2 2303 	umull	r2, r3, r2, r3
 800271a:	095b      	lsrs	r3, r3, #5
 800271c:	0119      	lsls	r1, r3, #4
 800271e:	68fa      	ldr	r2, [r7, #12]
 8002720:	4613      	mov	r3, r2
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	4413      	add	r3, r2
 8002726:	009a      	lsls	r2, r3, #2
 8002728:	441a      	add	r2, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	fbb2 f2f3 	udiv	r2, r2, r3
 8002734:	4b1a      	ldr	r3, [pc, #104]	@ (80027a0 <UART_SetConfig+0x118>)
 8002736:	fba3 0302 	umull	r0, r3, r3, r2
 800273a:	095b      	lsrs	r3, r3, #5
 800273c:	2064      	movs	r0, #100	@ 0x64
 800273e:	fb00 f303 	mul.w	r3, r0, r3
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	011b      	lsls	r3, r3, #4
 8002746:	3332      	adds	r3, #50	@ 0x32
 8002748:	4a15      	ldr	r2, [pc, #84]	@ (80027a0 <UART_SetConfig+0x118>)
 800274a:	fba2 2303 	umull	r2, r3, r2, r3
 800274e:	095b      	lsrs	r3, r3, #5
 8002750:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002754:	4419      	add	r1, r3
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	4613      	mov	r3, r2
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	4413      	add	r3, r2
 800275e:	009a      	lsls	r2, r3, #2
 8002760:	441a      	add	r2, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	fbb2 f2f3 	udiv	r2, r2, r3
 800276c:	4b0c      	ldr	r3, [pc, #48]	@ (80027a0 <UART_SetConfig+0x118>)
 800276e:	fba3 0302 	umull	r0, r3, r3, r2
 8002772:	095b      	lsrs	r3, r3, #5
 8002774:	2064      	movs	r0, #100	@ 0x64
 8002776:	fb00 f303 	mul.w	r3, r0, r3
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	011b      	lsls	r3, r3, #4
 800277e:	3332      	adds	r3, #50	@ 0x32
 8002780:	4a07      	ldr	r2, [pc, #28]	@ (80027a0 <UART_SetConfig+0x118>)
 8002782:	fba2 2303 	umull	r2, r3, r2, r3
 8002786:	095b      	lsrs	r3, r3, #5
 8002788:	f003 020f 	and.w	r2, r3, #15
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	440a      	add	r2, r1
 8002792:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002794:	bf00      	nop
 8002796:	3710      	adds	r7, #16
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	40013800 	.word	0x40013800
 80027a0:	51eb851f 	.word	0x51eb851f

080027a4 <siprintf>:
 80027a4:	b40e      	push	{r1, r2, r3}
 80027a6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80027aa:	b500      	push	{lr}
 80027ac:	b09c      	sub	sp, #112	@ 0x70
 80027ae:	ab1d      	add	r3, sp, #116	@ 0x74
 80027b0:	9002      	str	r0, [sp, #8]
 80027b2:	9006      	str	r0, [sp, #24]
 80027b4:	9107      	str	r1, [sp, #28]
 80027b6:	9104      	str	r1, [sp, #16]
 80027b8:	4808      	ldr	r0, [pc, #32]	@ (80027dc <siprintf+0x38>)
 80027ba:	4909      	ldr	r1, [pc, #36]	@ (80027e0 <siprintf+0x3c>)
 80027bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80027c0:	9105      	str	r1, [sp, #20]
 80027c2:	6800      	ldr	r0, [r0, #0]
 80027c4:	a902      	add	r1, sp, #8
 80027c6:	9301      	str	r3, [sp, #4]
 80027c8:	f000 f992 	bl	8002af0 <_svfiprintf_r>
 80027cc:	2200      	movs	r2, #0
 80027ce:	9b02      	ldr	r3, [sp, #8]
 80027d0:	701a      	strb	r2, [r3, #0]
 80027d2:	b01c      	add	sp, #112	@ 0x70
 80027d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80027d8:	b003      	add	sp, #12
 80027da:	4770      	bx	lr
 80027dc:	2000000c 	.word	0x2000000c
 80027e0:	ffff0208 	.word	0xffff0208

080027e4 <memset>:
 80027e4:	4603      	mov	r3, r0
 80027e6:	4402      	add	r2, r0
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d100      	bne.n	80027ee <memset+0xa>
 80027ec:	4770      	bx	lr
 80027ee:	f803 1b01 	strb.w	r1, [r3], #1
 80027f2:	e7f9      	b.n	80027e8 <memset+0x4>

080027f4 <__errno>:
 80027f4:	4b01      	ldr	r3, [pc, #4]	@ (80027fc <__errno+0x8>)
 80027f6:	6818      	ldr	r0, [r3, #0]
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	2000000c 	.word	0x2000000c

08002800 <__libc_init_array>:
 8002800:	b570      	push	{r4, r5, r6, lr}
 8002802:	2600      	movs	r6, #0
 8002804:	4d0c      	ldr	r5, [pc, #48]	@ (8002838 <__libc_init_array+0x38>)
 8002806:	4c0d      	ldr	r4, [pc, #52]	@ (800283c <__libc_init_array+0x3c>)
 8002808:	1b64      	subs	r4, r4, r5
 800280a:	10a4      	asrs	r4, r4, #2
 800280c:	42a6      	cmp	r6, r4
 800280e:	d109      	bne.n	8002824 <__libc_init_array+0x24>
 8002810:	f000 fc78 	bl	8003104 <_init>
 8002814:	2600      	movs	r6, #0
 8002816:	4d0a      	ldr	r5, [pc, #40]	@ (8002840 <__libc_init_array+0x40>)
 8002818:	4c0a      	ldr	r4, [pc, #40]	@ (8002844 <__libc_init_array+0x44>)
 800281a:	1b64      	subs	r4, r4, r5
 800281c:	10a4      	asrs	r4, r4, #2
 800281e:	42a6      	cmp	r6, r4
 8002820:	d105      	bne.n	800282e <__libc_init_array+0x2e>
 8002822:	bd70      	pop	{r4, r5, r6, pc}
 8002824:	f855 3b04 	ldr.w	r3, [r5], #4
 8002828:	4798      	blx	r3
 800282a:	3601      	adds	r6, #1
 800282c:	e7ee      	b.n	800280c <__libc_init_array+0xc>
 800282e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002832:	4798      	blx	r3
 8002834:	3601      	adds	r6, #1
 8002836:	e7f2      	b.n	800281e <__libc_init_array+0x1e>
 8002838:	08003330 	.word	0x08003330
 800283c:	08003330 	.word	0x08003330
 8002840:	08003330 	.word	0x08003330
 8002844:	08003334 	.word	0x08003334

08002848 <__retarget_lock_acquire_recursive>:
 8002848:	4770      	bx	lr

0800284a <__retarget_lock_release_recursive>:
 800284a:	4770      	bx	lr

0800284c <_free_r>:
 800284c:	b538      	push	{r3, r4, r5, lr}
 800284e:	4605      	mov	r5, r0
 8002850:	2900      	cmp	r1, #0
 8002852:	d040      	beq.n	80028d6 <_free_r+0x8a>
 8002854:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002858:	1f0c      	subs	r4, r1, #4
 800285a:	2b00      	cmp	r3, #0
 800285c:	bfb8      	it	lt
 800285e:	18e4      	addlt	r4, r4, r3
 8002860:	f000 f8de 	bl	8002a20 <__malloc_lock>
 8002864:	4a1c      	ldr	r2, [pc, #112]	@ (80028d8 <_free_r+0x8c>)
 8002866:	6813      	ldr	r3, [r2, #0]
 8002868:	b933      	cbnz	r3, 8002878 <_free_r+0x2c>
 800286a:	6063      	str	r3, [r4, #4]
 800286c:	6014      	str	r4, [r2, #0]
 800286e:	4628      	mov	r0, r5
 8002870:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002874:	f000 b8da 	b.w	8002a2c <__malloc_unlock>
 8002878:	42a3      	cmp	r3, r4
 800287a:	d908      	bls.n	800288e <_free_r+0x42>
 800287c:	6820      	ldr	r0, [r4, #0]
 800287e:	1821      	adds	r1, r4, r0
 8002880:	428b      	cmp	r3, r1
 8002882:	bf01      	itttt	eq
 8002884:	6819      	ldreq	r1, [r3, #0]
 8002886:	685b      	ldreq	r3, [r3, #4]
 8002888:	1809      	addeq	r1, r1, r0
 800288a:	6021      	streq	r1, [r4, #0]
 800288c:	e7ed      	b.n	800286a <_free_r+0x1e>
 800288e:	461a      	mov	r2, r3
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	b10b      	cbz	r3, 8002898 <_free_r+0x4c>
 8002894:	42a3      	cmp	r3, r4
 8002896:	d9fa      	bls.n	800288e <_free_r+0x42>
 8002898:	6811      	ldr	r1, [r2, #0]
 800289a:	1850      	adds	r0, r2, r1
 800289c:	42a0      	cmp	r0, r4
 800289e:	d10b      	bne.n	80028b8 <_free_r+0x6c>
 80028a0:	6820      	ldr	r0, [r4, #0]
 80028a2:	4401      	add	r1, r0
 80028a4:	1850      	adds	r0, r2, r1
 80028a6:	4283      	cmp	r3, r0
 80028a8:	6011      	str	r1, [r2, #0]
 80028aa:	d1e0      	bne.n	800286e <_free_r+0x22>
 80028ac:	6818      	ldr	r0, [r3, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	4408      	add	r0, r1
 80028b2:	6010      	str	r0, [r2, #0]
 80028b4:	6053      	str	r3, [r2, #4]
 80028b6:	e7da      	b.n	800286e <_free_r+0x22>
 80028b8:	d902      	bls.n	80028c0 <_free_r+0x74>
 80028ba:	230c      	movs	r3, #12
 80028bc:	602b      	str	r3, [r5, #0]
 80028be:	e7d6      	b.n	800286e <_free_r+0x22>
 80028c0:	6820      	ldr	r0, [r4, #0]
 80028c2:	1821      	adds	r1, r4, r0
 80028c4:	428b      	cmp	r3, r1
 80028c6:	bf01      	itttt	eq
 80028c8:	6819      	ldreq	r1, [r3, #0]
 80028ca:	685b      	ldreq	r3, [r3, #4]
 80028cc:	1809      	addeq	r1, r1, r0
 80028ce:	6021      	streq	r1, [r4, #0]
 80028d0:	6063      	str	r3, [r4, #4]
 80028d2:	6054      	str	r4, [r2, #4]
 80028d4:	e7cb      	b.n	800286e <_free_r+0x22>
 80028d6:	bd38      	pop	{r3, r4, r5, pc}
 80028d8:	2000031c 	.word	0x2000031c

080028dc <sbrk_aligned>:
 80028dc:	b570      	push	{r4, r5, r6, lr}
 80028de:	4e0f      	ldr	r6, [pc, #60]	@ (800291c <sbrk_aligned+0x40>)
 80028e0:	460c      	mov	r4, r1
 80028e2:	6831      	ldr	r1, [r6, #0]
 80028e4:	4605      	mov	r5, r0
 80028e6:	b911      	cbnz	r1, 80028ee <sbrk_aligned+0x12>
 80028e8:	f000 fbaa 	bl	8003040 <_sbrk_r>
 80028ec:	6030      	str	r0, [r6, #0]
 80028ee:	4621      	mov	r1, r4
 80028f0:	4628      	mov	r0, r5
 80028f2:	f000 fba5 	bl	8003040 <_sbrk_r>
 80028f6:	1c43      	adds	r3, r0, #1
 80028f8:	d103      	bne.n	8002902 <sbrk_aligned+0x26>
 80028fa:	f04f 34ff 	mov.w	r4, #4294967295
 80028fe:	4620      	mov	r0, r4
 8002900:	bd70      	pop	{r4, r5, r6, pc}
 8002902:	1cc4      	adds	r4, r0, #3
 8002904:	f024 0403 	bic.w	r4, r4, #3
 8002908:	42a0      	cmp	r0, r4
 800290a:	d0f8      	beq.n	80028fe <sbrk_aligned+0x22>
 800290c:	1a21      	subs	r1, r4, r0
 800290e:	4628      	mov	r0, r5
 8002910:	f000 fb96 	bl	8003040 <_sbrk_r>
 8002914:	3001      	adds	r0, #1
 8002916:	d1f2      	bne.n	80028fe <sbrk_aligned+0x22>
 8002918:	e7ef      	b.n	80028fa <sbrk_aligned+0x1e>
 800291a:	bf00      	nop
 800291c:	20000318 	.word	0x20000318

08002920 <_malloc_r>:
 8002920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002924:	1ccd      	adds	r5, r1, #3
 8002926:	f025 0503 	bic.w	r5, r5, #3
 800292a:	3508      	adds	r5, #8
 800292c:	2d0c      	cmp	r5, #12
 800292e:	bf38      	it	cc
 8002930:	250c      	movcc	r5, #12
 8002932:	2d00      	cmp	r5, #0
 8002934:	4606      	mov	r6, r0
 8002936:	db01      	blt.n	800293c <_malloc_r+0x1c>
 8002938:	42a9      	cmp	r1, r5
 800293a:	d904      	bls.n	8002946 <_malloc_r+0x26>
 800293c:	230c      	movs	r3, #12
 800293e:	6033      	str	r3, [r6, #0]
 8002940:	2000      	movs	r0, #0
 8002942:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002946:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002a1c <_malloc_r+0xfc>
 800294a:	f000 f869 	bl	8002a20 <__malloc_lock>
 800294e:	f8d8 3000 	ldr.w	r3, [r8]
 8002952:	461c      	mov	r4, r3
 8002954:	bb44      	cbnz	r4, 80029a8 <_malloc_r+0x88>
 8002956:	4629      	mov	r1, r5
 8002958:	4630      	mov	r0, r6
 800295a:	f7ff ffbf 	bl	80028dc <sbrk_aligned>
 800295e:	1c43      	adds	r3, r0, #1
 8002960:	4604      	mov	r4, r0
 8002962:	d158      	bne.n	8002a16 <_malloc_r+0xf6>
 8002964:	f8d8 4000 	ldr.w	r4, [r8]
 8002968:	4627      	mov	r7, r4
 800296a:	2f00      	cmp	r7, #0
 800296c:	d143      	bne.n	80029f6 <_malloc_r+0xd6>
 800296e:	2c00      	cmp	r4, #0
 8002970:	d04b      	beq.n	8002a0a <_malloc_r+0xea>
 8002972:	6823      	ldr	r3, [r4, #0]
 8002974:	4639      	mov	r1, r7
 8002976:	4630      	mov	r0, r6
 8002978:	eb04 0903 	add.w	r9, r4, r3
 800297c:	f000 fb60 	bl	8003040 <_sbrk_r>
 8002980:	4581      	cmp	r9, r0
 8002982:	d142      	bne.n	8002a0a <_malloc_r+0xea>
 8002984:	6821      	ldr	r1, [r4, #0]
 8002986:	4630      	mov	r0, r6
 8002988:	1a6d      	subs	r5, r5, r1
 800298a:	4629      	mov	r1, r5
 800298c:	f7ff ffa6 	bl	80028dc <sbrk_aligned>
 8002990:	3001      	adds	r0, #1
 8002992:	d03a      	beq.n	8002a0a <_malloc_r+0xea>
 8002994:	6823      	ldr	r3, [r4, #0]
 8002996:	442b      	add	r3, r5
 8002998:	6023      	str	r3, [r4, #0]
 800299a:	f8d8 3000 	ldr.w	r3, [r8]
 800299e:	685a      	ldr	r2, [r3, #4]
 80029a0:	bb62      	cbnz	r2, 80029fc <_malloc_r+0xdc>
 80029a2:	f8c8 7000 	str.w	r7, [r8]
 80029a6:	e00f      	b.n	80029c8 <_malloc_r+0xa8>
 80029a8:	6822      	ldr	r2, [r4, #0]
 80029aa:	1b52      	subs	r2, r2, r5
 80029ac:	d420      	bmi.n	80029f0 <_malloc_r+0xd0>
 80029ae:	2a0b      	cmp	r2, #11
 80029b0:	d917      	bls.n	80029e2 <_malloc_r+0xc2>
 80029b2:	1961      	adds	r1, r4, r5
 80029b4:	42a3      	cmp	r3, r4
 80029b6:	6025      	str	r5, [r4, #0]
 80029b8:	bf18      	it	ne
 80029ba:	6059      	strne	r1, [r3, #4]
 80029bc:	6863      	ldr	r3, [r4, #4]
 80029be:	bf08      	it	eq
 80029c0:	f8c8 1000 	streq.w	r1, [r8]
 80029c4:	5162      	str	r2, [r4, r5]
 80029c6:	604b      	str	r3, [r1, #4]
 80029c8:	4630      	mov	r0, r6
 80029ca:	f000 f82f 	bl	8002a2c <__malloc_unlock>
 80029ce:	f104 000b 	add.w	r0, r4, #11
 80029d2:	1d23      	adds	r3, r4, #4
 80029d4:	f020 0007 	bic.w	r0, r0, #7
 80029d8:	1ac2      	subs	r2, r0, r3
 80029da:	bf1c      	itt	ne
 80029dc:	1a1b      	subne	r3, r3, r0
 80029de:	50a3      	strne	r3, [r4, r2]
 80029e0:	e7af      	b.n	8002942 <_malloc_r+0x22>
 80029e2:	6862      	ldr	r2, [r4, #4]
 80029e4:	42a3      	cmp	r3, r4
 80029e6:	bf0c      	ite	eq
 80029e8:	f8c8 2000 	streq.w	r2, [r8]
 80029ec:	605a      	strne	r2, [r3, #4]
 80029ee:	e7eb      	b.n	80029c8 <_malloc_r+0xa8>
 80029f0:	4623      	mov	r3, r4
 80029f2:	6864      	ldr	r4, [r4, #4]
 80029f4:	e7ae      	b.n	8002954 <_malloc_r+0x34>
 80029f6:	463c      	mov	r4, r7
 80029f8:	687f      	ldr	r7, [r7, #4]
 80029fa:	e7b6      	b.n	800296a <_malloc_r+0x4a>
 80029fc:	461a      	mov	r2, r3
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	42a3      	cmp	r3, r4
 8002a02:	d1fb      	bne.n	80029fc <_malloc_r+0xdc>
 8002a04:	2300      	movs	r3, #0
 8002a06:	6053      	str	r3, [r2, #4]
 8002a08:	e7de      	b.n	80029c8 <_malloc_r+0xa8>
 8002a0a:	230c      	movs	r3, #12
 8002a0c:	4630      	mov	r0, r6
 8002a0e:	6033      	str	r3, [r6, #0]
 8002a10:	f000 f80c 	bl	8002a2c <__malloc_unlock>
 8002a14:	e794      	b.n	8002940 <_malloc_r+0x20>
 8002a16:	6005      	str	r5, [r0, #0]
 8002a18:	e7d6      	b.n	80029c8 <_malloc_r+0xa8>
 8002a1a:	bf00      	nop
 8002a1c:	2000031c 	.word	0x2000031c

08002a20 <__malloc_lock>:
 8002a20:	4801      	ldr	r0, [pc, #4]	@ (8002a28 <__malloc_lock+0x8>)
 8002a22:	f7ff bf11 	b.w	8002848 <__retarget_lock_acquire_recursive>
 8002a26:	bf00      	nop
 8002a28:	20000314 	.word	0x20000314

08002a2c <__malloc_unlock>:
 8002a2c:	4801      	ldr	r0, [pc, #4]	@ (8002a34 <__malloc_unlock+0x8>)
 8002a2e:	f7ff bf0c 	b.w	800284a <__retarget_lock_release_recursive>
 8002a32:	bf00      	nop
 8002a34:	20000314 	.word	0x20000314

08002a38 <__ssputs_r>:
 8002a38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a3c:	461f      	mov	r7, r3
 8002a3e:	688e      	ldr	r6, [r1, #8]
 8002a40:	4682      	mov	sl, r0
 8002a42:	42be      	cmp	r6, r7
 8002a44:	460c      	mov	r4, r1
 8002a46:	4690      	mov	r8, r2
 8002a48:	680b      	ldr	r3, [r1, #0]
 8002a4a:	d82d      	bhi.n	8002aa8 <__ssputs_r+0x70>
 8002a4c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002a50:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002a54:	d026      	beq.n	8002aa4 <__ssputs_r+0x6c>
 8002a56:	6965      	ldr	r5, [r4, #20]
 8002a58:	6909      	ldr	r1, [r1, #16]
 8002a5a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002a5e:	eba3 0901 	sub.w	r9, r3, r1
 8002a62:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002a66:	1c7b      	adds	r3, r7, #1
 8002a68:	444b      	add	r3, r9
 8002a6a:	106d      	asrs	r5, r5, #1
 8002a6c:	429d      	cmp	r5, r3
 8002a6e:	bf38      	it	cc
 8002a70:	461d      	movcc	r5, r3
 8002a72:	0553      	lsls	r3, r2, #21
 8002a74:	d527      	bpl.n	8002ac6 <__ssputs_r+0x8e>
 8002a76:	4629      	mov	r1, r5
 8002a78:	f7ff ff52 	bl	8002920 <_malloc_r>
 8002a7c:	4606      	mov	r6, r0
 8002a7e:	b360      	cbz	r0, 8002ada <__ssputs_r+0xa2>
 8002a80:	464a      	mov	r2, r9
 8002a82:	6921      	ldr	r1, [r4, #16]
 8002a84:	f000 fafa 	bl	800307c <memcpy>
 8002a88:	89a3      	ldrh	r3, [r4, #12]
 8002a8a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002a8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a92:	81a3      	strh	r3, [r4, #12]
 8002a94:	6126      	str	r6, [r4, #16]
 8002a96:	444e      	add	r6, r9
 8002a98:	6026      	str	r6, [r4, #0]
 8002a9a:	463e      	mov	r6, r7
 8002a9c:	6165      	str	r5, [r4, #20]
 8002a9e:	eba5 0509 	sub.w	r5, r5, r9
 8002aa2:	60a5      	str	r5, [r4, #8]
 8002aa4:	42be      	cmp	r6, r7
 8002aa6:	d900      	bls.n	8002aaa <__ssputs_r+0x72>
 8002aa8:	463e      	mov	r6, r7
 8002aaa:	4632      	mov	r2, r6
 8002aac:	4641      	mov	r1, r8
 8002aae:	6820      	ldr	r0, [r4, #0]
 8002ab0:	f000 faac 	bl	800300c <memmove>
 8002ab4:	2000      	movs	r0, #0
 8002ab6:	68a3      	ldr	r3, [r4, #8]
 8002ab8:	1b9b      	subs	r3, r3, r6
 8002aba:	60a3      	str	r3, [r4, #8]
 8002abc:	6823      	ldr	r3, [r4, #0]
 8002abe:	4433      	add	r3, r6
 8002ac0:	6023      	str	r3, [r4, #0]
 8002ac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ac6:	462a      	mov	r2, r5
 8002ac8:	f000 fae6 	bl	8003098 <_realloc_r>
 8002acc:	4606      	mov	r6, r0
 8002ace:	2800      	cmp	r0, #0
 8002ad0:	d1e0      	bne.n	8002a94 <__ssputs_r+0x5c>
 8002ad2:	4650      	mov	r0, sl
 8002ad4:	6921      	ldr	r1, [r4, #16]
 8002ad6:	f7ff feb9 	bl	800284c <_free_r>
 8002ada:	230c      	movs	r3, #12
 8002adc:	f8ca 3000 	str.w	r3, [sl]
 8002ae0:	89a3      	ldrh	r3, [r4, #12]
 8002ae2:	f04f 30ff 	mov.w	r0, #4294967295
 8002ae6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002aea:	81a3      	strh	r3, [r4, #12]
 8002aec:	e7e9      	b.n	8002ac2 <__ssputs_r+0x8a>
	...

08002af0 <_svfiprintf_r>:
 8002af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002af4:	4698      	mov	r8, r3
 8002af6:	898b      	ldrh	r3, [r1, #12]
 8002af8:	4607      	mov	r7, r0
 8002afa:	061b      	lsls	r3, r3, #24
 8002afc:	460d      	mov	r5, r1
 8002afe:	4614      	mov	r4, r2
 8002b00:	b09d      	sub	sp, #116	@ 0x74
 8002b02:	d510      	bpl.n	8002b26 <_svfiprintf_r+0x36>
 8002b04:	690b      	ldr	r3, [r1, #16]
 8002b06:	b973      	cbnz	r3, 8002b26 <_svfiprintf_r+0x36>
 8002b08:	2140      	movs	r1, #64	@ 0x40
 8002b0a:	f7ff ff09 	bl	8002920 <_malloc_r>
 8002b0e:	6028      	str	r0, [r5, #0]
 8002b10:	6128      	str	r0, [r5, #16]
 8002b12:	b930      	cbnz	r0, 8002b22 <_svfiprintf_r+0x32>
 8002b14:	230c      	movs	r3, #12
 8002b16:	603b      	str	r3, [r7, #0]
 8002b18:	f04f 30ff 	mov.w	r0, #4294967295
 8002b1c:	b01d      	add	sp, #116	@ 0x74
 8002b1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b22:	2340      	movs	r3, #64	@ 0x40
 8002b24:	616b      	str	r3, [r5, #20]
 8002b26:	2300      	movs	r3, #0
 8002b28:	9309      	str	r3, [sp, #36]	@ 0x24
 8002b2a:	2320      	movs	r3, #32
 8002b2c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002b30:	2330      	movs	r3, #48	@ 0x30
 8002b32:	f04f 0901 	mov.w	r9, #1
 8002b36:	f8cd 800c 	str.w	r8, [sp, #12]
 8002b3a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8002cd4 <_svfiprintf_r+0x1e4>
 8002b3e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002b42:	4623      	mov	r3, r4
 8002b44:	469a      	mov	sl, r3
 8002b46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002b4a:	b10a      	cbz	r2, 8002b50 <_svfiprintf_r+0x60>
 8002b4c:	2a25      	cmp	r2, #37	@ 0x25
 8002b4e:	d1f9      	bne.n	8002b44 <_svfiprintf_r+0x54>
 8002b50:	ebba 0b04 	subs.w	fp, sl, r4
 8002b54:	d00b      	beq.n	8002b6e <_svfiprintf_r+0x7e>
 8002b56:	465b      	mov	r3, fp
 8002b58:	4622      	mov	r2, r4
 8002b5a:	4629      	mov	r1, r5
 8002b5c:	4638      	mov	r0, r7
 8002b5e:	f7ff ff6b 	bl	8002a38 <__ssputs_r>
 8002b62:	3001      	adds	r0, #1
 8002b64:	f000 80a7 	beq.w	8002cb6 <_svfiprintf_r+0x1c6>
 8002b68:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002b6a:	445a      	add	r2, fp
 8002b6c:	9209      	str	r2, [sp, #36]	@ 0x24
 8002b6e:	f89a 3000 	ldrb.w	r3, [sl]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	f000 809f 	beq.w	8002cb6 <_svfiprintf_r+0x1c6>
 8002b78:	2300      	movs	r3, #0
 8002b7a:	f04f 32ff 	mov.w	r2, #4294967295
 8002b7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002b82:	f10a 0a01 	add.w	sl, sl, #1
 8002b86:	9304      	str	r3, [sp, #16]
 8002b88:	9307      	str	r3, [sp, #28]
 8002b8a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002b8e:	931a      	str	r3, [sp, #104]	@ 0x68
 8002b90:	4654      	mov	r4, sl
 8002b92:	2205      	movs	r2, #5
 8002b94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b98:	484e      	ldr	r0, [pc, #312]	@ (8002cd4 <_svfiprintf_r+0x1e4>)
 8002b9a:	f000 fa61 	bl	8003060 <memchr>
 8002b9e:	9a04      	ldr	r2, [sp, #16]
 8002ba0:	b9d8      	cbnz	r0, 8002bda <_svfiprintf_r+0xea>
 8002ba2:	06d0      	lsls	r0, r2, #27
 8002ba4:	bf44      	itt	mi
 8002ba6:	2320      	movmi	r3, #32
 8002ba8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002bac:	0711      	lsls	r1, r2, #28
 8002bae:	bf44      	itt	mi
 8002bb0:	232b      	movmi	r3, #43	@ 0x2b
 8002bb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002bb6:	f89a 3000 	ldrb.w	r3, [sl]
 8002bba:	2b2a      	cmp	r3, #42	@ 0x2a
 8002bbc:	d015      	beq.n	8002bea <_svfiprintf_r+0xfa>
 8002bbe:	4654      	mov	r4, sl
 8002bc0:	2000      	movs	r0, #0
 8002bc2:	f04f 0c0a 	mov.w	ip, #10
 8002bc6:	9a07      	ldr	r2, [sp, #28]
 8002bc8:	4621      	mov	r1, r4
 8002bca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002bce:	3b30      	subs	r3, #48	@ 0x30
 8002bd0:	2b09      	cmp	r3, #9
 8002bd2:	d94b      	bls.n	8002c6c <_svfiprintf_r+0x17c>
 8002bd4:	b1b0      	cbz	r0, 8002c04 <_svfiprintf_r+0x114>
 8002bd6:	9207      	str	r2, [sp, #28]
 8002bd8:	e014      	b.n	8002c04 <_svfiprintf_r+0x114>
 8002bda:	eba0 0308 	sub.w	r3, r0, r8
 8002bde:	fa09 f303 	lsl.w	r3, r9, r3
 8002be2:	4313      	orrs	r3, r2
 8002be4:	46a2      	mov	sl, r4
 8002be6:	9304      	str	r3, [sp, #16]
 8002be8:	e7d2      	b.n	8002b90 <_svfiprintf_r+0xa0>
 8002bea:	9b03      	ldr	r3, [sp, #12]
 8002bec:	1d19      	adds	r1, r3, #4
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	9103      	str	r1, [sp, #12]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	bfbb      	ittet	lt
 8002bf6:	425b      	neglt	r3, r3
 8002bf8:	f042 0202 	orrlt.w	r2, r2, #2
 8002bfc:	9307      	strge	r3, [sp, #28]
 8002bfe:	9307      	strlt	r3, [sp, #28]
 8002c00:	bfb8      	it	lt
 8002c02:	9204      	strlt	r2, [sp, #16]
 8002c04:	7823      	ldrb	r3, [r4, #0]
 8002c06:	2b2e      	cmp	r3, #46	@ 0x2e
 8002c08:	d10a      	bne.n	8002c20 <_svfiprintf_r+0x130>
 8002c0a:	7863      	ldrb	r3, [r4, #1]
 8002c0c:	2b2a      	cmp	r3, #42	@ 0x2a
 8002c0e:	d132      	bne.n	8002c76 <_svfiprintf_r+0x186>
 8002c10:	9b03      	ldr	r3, [sp, #12]
 8002c12:	3402      	adds	r4, #2
 8002c14:	1d1a      	adds	r2, r3, #4
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	9203      	str	r2, [sp, #12]
 8002c1a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002c1e:	9305      	str	r3, [sp, #20]
 8002c20:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8002cd8 <_svfiprintf_r+0x1e8>
 8002c24:	2203      	movs	r2, #3
 8002c26:	4650      	mov	r0, sl
 8002c28:	7821      	ldrb	r1, [r4, #0]
 8002c2a:	f000 fa19 	bl	8003060 <memchr>
 8002c2e:	b138      	cbz	r0, 8002c40 <_svfiprintf_r+0x150>
 8002c30:	2240      	movs	r2, #64	@ 0x40
 8002c32:	9b04      	ldr	r3, [sp, #16]
 8002c34:	eba0 000a 	sub.w	r0, r0, sl
 8002c38:	4082      	lsls	r2, r0
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	3401      	adds	r4, #1
 8002c3e:	9304      	str	r3, [sp, #16]
 8002c40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c44:	2206      	movs	r2, #6
 8002c46:	4825      	ldr	r0, [pc, #148]	@ (8002cdc <_svfiprintf_r+0x1ec>)
 8002c48:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002c4c:	f000 fa08 	bl	8003060 <memchr>
 8002c50:	2800      	cmp	r0, #0
 8002c52:	d036      	beq.n	8002cc2 <_svfiprintf_r+0x1d2>
 8002c54:	4b22      	ldr	r3, [pc, #136]	@ (8002ce0 <_svfiprintf_r+0x1f0>)
 8002c56:	bb1b      	cbnz	r3, 8002ca0 <_svfiprintf_r+0x1b0>
 8002c58:	9b03      	ldr	r3, [sp, #12]
 8002c5a:	3307      	adds	r3, #7
 8002c5c:	f023 0307 	bic.w	r3, r3, #7
 8002c60:	3308      	adds	r3, #8
 8002c62:	9303      	str	r3, [sp, #12]
 8002c64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002c66:	4433      	add	r3, r6
 8002c68:	9309      	str	r3, [sp, #36]	@ 0x24
 8002c6a:	e76a      	b.n	8002b42 <_svfiprintf_r+0x52>
 8002c6c:	460c      	mov	r4, r1
 8002c6e:	2001      	movs	r0, #1
 8002c70:	fb0c 3202 	mla	r2, ip, r2, r3
 8002c74:	e7a8      	b.n	8002bc8 <_svfiprintf_r+0xd8>
 8002c76:	2300      	movs	r3, #0
 8002c78:	f04f 0c0a 	mov.w	ip, #10
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	3401      	adds	r4, #1
 8002c80:	9305      	str	r3, [sp, #20]
 8002c82:	4620      	mov	r0, r4
 8002c84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002c88:	3a30      	subs	r2, #48	@ 0x30
 8002c8a:	2a09      	cmp	r2, #9
 8002c8c:	d903      	bls.n	8002c96 <_svfiprintf_r+0x1a6>
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d0c6      	beq.n	8002c20 <_svfiprintf_r+0x130>
 8002c92:	9105      	str	r1, [sp, #20]
 8002c94:	e7c4      	b.n	8002c20 <_svfiprintf_r+0x130>
 8002c96:	4604      	mov	r4, r0
 8002c98:	2301      	movs	r3, #1
 8002c9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8002c9e:	e7f0      	b.n	8002c82 <_svfiprintf_r+0x192>
 8002ca0:	ab03      	add	r3, sp, #12
 8002ca2:	9300      	str	r3, [sp, #0]
 8002ca4:	462a      	mov	r2, r5
 8002ca6:	4638      	mov	r0, r7
 8002ca8:	4b0e      	ldr	r3, [pc, #56]	@ (8002ce4 <_svfiprintf_r+0x1f4>)
 8002caa:	a904      	add	r1, sp, #16
 8002cac:	f3af 8000 	nop.w
 8002cb0:	1c42      	adds	r2, r0, #1
 8002cb2:	4606      	mov	r6, r0
 8002cb4:	d1d6      	bne.n	8002c64 <_svfiprintf_r+0x174>
 8002cb6:	89ab      	ldrh	r3, [r5, #12]
 8002cb8:	065b      	lsls	r3, r3, #25
 8002cba:	f53f af2d 	bmi.w	8002b18 <_svfiprintf_r+0x28>
 8002cbe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002cc0:	e72c      	b.n	8002b1c <_svfiprintf_r+0x2c>
 8002cc2:	ab03      	add	r3, sp, #12
 8002cc4:	9300      	str	r3, [sp, #0]
 8002cc6:	462a      	mov	r2, r5
 8002cc8:	4638      	mov	r0, r7
 8002cca:	4b06      	ldr	r3, [pc, #24]	@ (8002ce4 <_svfiprintf_r+0x1f4>)
 8002ccc:	a904      	add	r1, sp, #16
 8002cce:	f000 f87d 	bl	8002dcc <_printf_i>
 8002cd2:	e7ed      	b.n	8002cb0 <_svfiprintf_r+0x1c0>
 8002cd4:	080032f2 	.word	0x080032f2
 8002cd8:	080032f8 	.word	0x080032f8
 8002cdc:	080032fc 	.word	0x080032fc
 8002ce0:	00000000 	.word	0x00000000
 8002ce4:	08002a39 	.word	0x08002a39

08002ce8 <_printf_common>:
 8002ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002cec:	4616      	mov	r6, r2
 8002cee:	4698      	mov	r8, r3
 8002cf0:	688a      	ldr	r2, [r1, #8]
 8002cf2:	690b      	ldr	r3, [r1, #16]
 8002cf4:	4607      	mov	r7, r0
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	bfb8      	it	lt
 8002cfa:	4613      	movlt	r3, r2
 8002cfc:	6033      	str	r3, [r6, #0]
 8002cfe:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002d02:	460c      	mov	r4, r1
 8002d04:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002d08:	b10a      	cbz	r2, 8002d0e <_printf_common+0x26>
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	6033      	str	r3, [r6, #0]
 8002d0e:	6823      	ldr	r3, [r4, #0]
 8002d10:	0699      	lsls	r1, r3, #26
 8002d12:	bf42      	ittt	mi
 8002d14:	6833      	ldrmi	r3, [r6, #0]
 8002d16:	3302      	addmi	r3, #2
 8002d18:	6033      	strmi	r3, [r6, #0]
 8002d1a:	6825      	ldr	r5, [r4, #0]
 8002d1c:	f015 0506 	ands.w	r5, r5, #6
 8002d20:	d106      	bne.n	8002d30 <_printf_common+0x48>
 8002d22:	f104 0a19 	add.w	sl, r4, #25
 8002d26:	68e3      	ldr	r3, [r4, #12]
 8002d28:	6832      	ldr	r2, [r6, #0]
 8002d2a:	1a9b      	subs	r3, r3, r2
 8002d2c:	42ab      	cmp	r3, r5
 8002d2e:	dc2b      	bgt.n	8002d88 <_printf_common+0xa0>
 8002d30:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002d34:	6822      	ldr	r2, [r4, #0]
 8002d36:	3b00      	subs	r3, #0
 8002d38:	bf18      	it	ne
 8002d3a:	2301      	movne	r3, #1
 8002d3c:	0692      	lsls	r2, r2, #26
 8002d3e:	d430      	bmi.n	8002da2 <_printf_common+0xba>
 8002d40:	4641      	mov	r1, r8
 8002d42:	4638      	mov	r0, r7
 8002d44:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002d48:	47c8      	blx	r9
 8002d4a:	3001      	adds	r0, #1
 8002d4c:	d023      	beq.n	8002d96 <_printf_common+0xae>
 8002d4e:	6823      	ldr	r3, [r4, #0]
 8002d50:	6922      	ldr	r2, [r4, #16]
 8002d52:	f003 0306 	and.w	r3, r3, #6
 8002d56:	2b04      	cmp	r3, #4
 8002d58:	bf14      	ite	ne
 8002d5a:	2500      	movne	r5, #0
 8002d5c:	6833      	ldreq	r3, [r6, #0]
 8002d5e:	f04f 0600 	mov.w	r6, #0
 8002d62:	bf08      	it	eq
 8002d64:	68e5      	ldreq	r5, [r4, #12]
 8002d66:	f104 041a 	add.w	r4, r4, #26
 8002d6a:	bf08      	it	eq
 8002d6c:	1aed      	subeq	r5, r5, r3
 8002d6e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002d72:	bf08      	it	eq
 8002d74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	bfc4      	itt	gt
 8002d7c:	1a9b      	subgt	r3, r3, r2
 8002d7e:	18ed      	addgt	r5, r5, r3
 8002d80:	42b5      	cmp	r5, r6
 8002d82:	d11a      	bne.n	8002dba <_printf_common+0xd2>
 8002d84:	2000      	movs	r0, #0
 8002d86:	e008      	b.n	8002d9a <_printf_common+0xb2>
 8002d88:	2301      	movs	r3, #1
 8002d8a:	4652      	mov	r2, sl
 8002d8c:	4641      	mov	r1, r8
 8002d8e:	4638      	mov	r0, r7
 8002d90:	47c8      	blx	r9
 8002d92:	3001      	adds	r0, #1
 8002d94:	d103      	bne.n	8002d9e <_printf_common+0xb6>
 8002d96:	f04f 30ff 	mov.w	r0, #4294967295
 8002d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d9e:	3501      	adds	r5, #1
 8002da0:	e7c1      	b.n	8002d26 <_printf_common+0x3e>
 8002da2:	2030      	movs	r0, #48	@ 0x30
 8002da4:	18e1      	adds	r1, r4, r3
 8002da6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002daa:	1c5a      	adds	r2, r3, #1
 8002dac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002db0:	4422      	add	r2, r4
 8002db2:	3302      	adds	r3, #2
 8002db4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002db8:	e7c2      	b.n	8002d40 <_printf_common+0x58>
 8002dba:	2301      	movs	r3, #1
 8002dbc:	4622      	mov	r2, r4
 8002dbe:	4641      	mov	r1, r8
 8002dc0:	4638      	mov	r0, r7
 8002dc2:	47c8      	blx	r9
 8002dc4:	3001      	adds	r0, #1
 8002dc6:	d0e6      	beq.n	8002d96 <_printf_common+0xae>
 8002dc8:	3601      	adds	r6, #1
 8002dca:	e7d9      	b.n	8002d80 <_printf_common+0x98>

08002dcc <_printf_i>:
 8002dcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002dd0:	7e0f      	ldrb	r7, [r1, #24]
 8002dd2:	4691      	mov	r9, r2
 8002dd4:	2f78      	cmp	r7, #120	@ 0x78
 8002dd6:	4680      	mov	r8, r0
 8002dd8:	460c      	mov	r4, r1
 8002dda:	469a      	mov	sl, r3
 8002ddc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002dde:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002de2:	d807      	bhi.n	8002df4 <_printf_i+0x28>
 8002de4:	2f62      	cmp	r7, #98	@ 0x62
 8002de6:	d80a      	bhi.n	8002dfe <_printf_i+0x32>
 8002de8:	2f00      	cmp	r7, #0
 8002dea:	f000 80d3 	beq.w	8002f94 <_printf_i+0x1c8>
 8002dee:	2f58      	cmp	r7, #88	@ 0x58
 8002df0:	f000 80ba 	beq.w	8002f68 <_printf_i+0x19c>
 8002df4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002df8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002dfc:	e03a      	b.n	8002e74 <_printf_i+0xa8>
 8002dfe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002e02:	2b15      	cmp	r3, #21
 8002e04:	d8f6      	bhi.n	8002df4 <_printf_i+0x28>
 8002e06:	a101      	add	r1, pc, #4	@ (adr r1, 8002e0c <_printf_i+0x40>)
 8002e08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002e0c:	08002e65 	.word	0x08002e65
 8002e10:	08002e79 	.word	0x08002e79
 8002e14:	08002df5 	.word	0x08002df5
 8002e18:	08002df5 	.word	0x08002df5
 8002e1c:	08002df5 	.word	0x08002df5
 8002e20:	08002df5 	.word	0x08002df5
 8002e24:	08002e79 	.word	0x08002e79
 8002e28:	08002df5 	.word	0x08002df5
 8002e2c:	08002df5 	.word	0x08002df5
 8002e30:	08002df5 	.word	0x08002df5
 8002e34:	08002df5 	.word	0x08002df5
 8002e38:	08002f7b 	.word	0x08002f7b
 8002e3c:	08002ea3 	.word	0x08002ea3
 8002e40:	08002f35 	.word	0x08002f35
 8002e44:	08002df5 	.word	0x08002df5
 8002e48:	08002df5 	.word	0x08002df5
 8002e4c:	08002f9d 	.word	0x08002f9d
 8002e50:	08002df5 	.word	0x08002df5
 8002e54:	08002ea3 	.word	0x08002ea3
 8002e58:	08002df5 	.word	0x08002df5
 8002e5c:	08002df5 	.word	0x08002df5
 8002e60:	08002f3d 	.word	0x08002f3d
 8002e64:	6833      	ldr	r3, [r6, #0]
 8002e66:	1d1a      	adds	r2, r3, #4
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	6032      	str	r2, [r6, #0]
 8002e6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002e70:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002e74:	2301      	movs	r3, #1
 8002e76:	e09e      	b.n	8002fb6 <_printf_i+0x1ea>
 8002e78:	6833      	ldr	r3, [r6, #0]
 8002e7a:	6820      	ldr	r0, [r4, #0]
 8002e7c:	1d19      	adds	r1, r3, #4
 8002e7e:	6031      	str	r1, [r6, #0]
 8002e80:	0606      	lsls	r6, r0, #24
 8002e82:	d501      	bpl.n	8002e88 <_printf_i+0xbc>
 8002e84:	681d      	ldr	r5, [r3, #0]
 8002e86:	e003      	b.n	8002e90 <_printf_i+0xc4>
 8002e88:	0645      	lsls	r5, r0, #25
 8002e8a:	d5fb      	bpl.n	8002e84 <_printf_i+0xb8>
 8002e8c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002e90:	2d00      	cmp	r5, #0
 8002e92:	da03      	bge.n	8002e9c <_printf_i+0xd0>
 8002e94:	232d      	movs	r3, #45	@ 0x2d
 8002e96:	426d      	negs	r5, r5
 8002e98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002e9c:	230a      	movs	r3, #10
 8002e9e:	4859      	ldr	r0, [pc, #356]	@ (8003004 <_printf_i+0x238>)
 8002ea0:	e011      	b.n	8002ec6 <_printf_i+0xfa>
 8002ea2:	6821      	ldr	r1, [r4, #0]
 8002ea4:	6833      	ldr	r3, [r6, #0]
 8002ea6:	0608      	lsls	r0, r1, #24
 8002ea8:	f853 5b04 	ldr.w	r5, [r3], #4
 8002eac:	d402      	bmi.n	8002eb4 <_printf_i+0xe8>
 8002eae:	0649      	lsls	r1, r1, #25
 8002eb0:	bf48      	it	mi
 8002eb2:	b2ad      	uxthmi	r5, r5
 8002eb4:	2f6f      	cmp	r7, #111	@ 0x6f
 8002eb6:	6033      	str	r3, [r6, #0]
 8002eb8:	bf14      	ite	ne
 8002eba:	230a      	movne	r3, #10
 8002ebc:	2308      	moveq	r3, #8
 8002ebe:	4851      	ldr	r0, [pc, #324]	@ (8003004 <_printf_i+0x238>)
 8002ec0:	2100      	movs	r1, #0
 8002ec2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002ec6:	6866      	ldr	r6, [r4, #4]
 8002ec8:	2e00      	cmp	r6, #0
 8002eca:	bfa8      	it	ge
 8002ecc:	6821      	ldrge	r1, [r4, #0]
 8002ece:	60a6      	str	r6, [r4, #8]
 8002ed0:	bfa4      	itt	ge
 8002ed2:	f021 0104 	bicge.w	r1, r1, #4
 8002ed6:	6021      	strge	r1, [r4, #0]
 8002ed8:	b90d      	cbnz	r5, 8002ede <_printf_i+0x112>
 8002eda:	2e00      	cmp	r6, #0
 8002edc:	d04b      	beq.n	8002f76 <_printf_i+0x1aa>
 8002ede:	4616      	mov	r6, r2
 8002ee0:	fbb5 f1f3 	udiv	r1, r5, r3
 8002ee4:	fb03 5711 	mls	r7, r3, r1, r5
 8002ee8:	5dc7      	ldrb	r7, [r0, r7]
 8002eea:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002eee:	462f      	mov	r7, r5
 8002ef0:	42bb      	cmp	r3, r7
 8002ef2:	460d      	mov	r5, r1
 8002ef4:	d9f4      	bls.n	8002ee0 <_printf_i+0x114>
 8002ef6:	2b08      	cmp	r3, #8
 8002ef8:	d10b      	bne.n	8002f12 <_printf_i+0x146>
 8002efa:	6823      	ldr	r3, [r4, #0]
 8002efc:	07df      	lsls	r7, r3, #31
 8002efe:	d508      	bpl.n	8002f12 <_printf_i+0x146>
 8002f00:	6923      	ldr	r3, [r4, #16]
 8002f02:	6861      	ldr	r1, [r4, #4]
 8002f04:	4299      	cmp	r1, r3
 8002f06:	bfde      	ittt	le
 8002f08:	2330      	movle	r3, #48	@ 0x30
 8002f0a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002f0e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002f12:	1b92      	subs	r2, r2, r6
 8002f14:	6122      	str	r2, [r4, #16]
 8002f16:	464b      	mov	r3, r9
 8002f18:	4621      	mov	r1, r4
 8002f1a:	4640      	mov	r0, r8
 8002f1c:	f8cd a000 	str.w	sl, [sp]
 8002f20:	aa03      	add	r2, sp, #12
 8002f22:	f7ff fee1 	bl	8002ce8 <_printf_common>
 8002f26:	3001      	adds	r0, #1
 8002f28:	d14a      	bne.n	8002fc0 <_printf_i+0x1f4>
 8002f2a:	f04f 30ff 	mov.w	r0, #4294967295
 8002f2e:	b004      	add	sp, #16
 8002f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f34:	6823      	ldr	r3, [r4, #0]
 8002f36:	f043 0320 	orr.w	r3, r3, #32
 8002f3a:	6023      	str	r3, [r4, #0]
 8002f3c:	2778      	movs	r7, #120	@ 0x78
 8002f3e:	4832      	ldr	r0, [pc, #200]	@ (8003008 <_printf_i+0x23c>)
 8002f40:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002f44:	6823      	ldr	r3, [r4, #0]
 8002f46:	6831      	ldr	r1, [r6, #0]
 8002f48:	061f      	lsls	r7, r3, #24
 8002f4a:	f851 5b04 	ldr.w	r5, [r1], #4
 8002f4e:	d402      	bmi.n	8002f56 <_printf_i+0x18a>
 8002f50:	065f      	lsls	r7, r3, #25
 8002f52:	bf48      	it	mi
 8002f54:	b2ad      	uxthmi	r5, r5
 8002f56:	6031      	str	r1, [r6, #0]
 8002f58:	07d9      	lsls	r1, r3, #31
 8002f5a:	bf44      	itt	mi
 8002f5c:	f043 0320 	orrmi.w	r3, r3, #32
 8002f60:	6023      	strmi	r3, [r4, #0]
 8002f62:	b11d      	cbz	r5, 8002f6c <_printf_i+0x1a0>
 8002f64:	2310      	movs	r3, #16
 8002f66:	e7ab      	b.n	8002ec0 <_printf_i+0xf4>
 8002f68:	4826      	ldr	r0, [pc, #152]	@ (8003004 <_printf_i+0x238>)
 8002f6a:	e7e9      	b.n	8002f40 <_printf_i+0x174>
 8002f6c:	6823      	ldr	r3, [r4, #0]
 8002f6e:	f023 0320 	bic.w	r3, r3, #32
 8002f72:	6023      	str	r3, [r4, #0]
 8002f74:	e7f6      	b.n	8002f64 <_printf_i+0x198>
 8002f76:	4616      	mov	r6, r2
 8002f78:	e7bd      	b.n	8002ef6 <_printf_i+0x12a>
 8002f7a:	6833      	ldr	r3, [r6, #0]
 8002f7c:	6825      	ldr	r5, [r4, #0]
 8002f7e:	1d18      	adds	r0, r3, #4
 8002f80:	6961      	ldr	r1, [r4, #20]
 8002f82:	6030      	str	r0, [r6, #0]
 8002f84:	062e      	lsls	r6, r5, #24
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	d501      	bpl.n	8002f8e <_printf_i+0x1c2>
 8002f8a:	6019      	str	r1, [r3, #0]
 8002f8c:	e002      	b.n	8002f94 <_printf_i+0x1c8>
 8002f8e:	0668      	lsls	r0, r5, #25
 8002f90:	d5fb      	bpl.n	8002f8a <_printf_i+0x1be>
 8002f92:	8019      	strh	r1, [r3, #0]
 8002f94:	2300      	movs	r3, #0
 8002f96:	4616      	mov	r6, r2
 8002f98:	6123      	str	r3, [r4, #16]
 8002f9a:	e7bc      	b.n	8002f16 <_printf_i+0x14a>
 8002f9c:	6833      	ldr	r3, [r6, #0]
 8002f9e:	2100      	movs	r1, #0
 8002fa0:	1d1a      	adds	r2, r3, #4
 8002fa2:	6032      	str	r2, [r6, #0]
 8002fa4:	681e      	ldr	r6, [r3, #0]
 8002fa6:	6862      	ldr	r2, [r4, #4]
 8002fa8:	4630      	mov	r0, r6
 8002faa:	f000 f859 	bl	8003060 <memchr>
 8002fae:	b108      	cbz	r0, 8002fb4 <_printf_i+0x1e8>
 8002fb0:	1b80      	subs	r0, r0, r6
 8002fb2:	6060      	str	r0, [r4, #4]
 8002fb4:	6863      	ldr	r3, [r4, #4]
 8002fb6:	6123      	str	r3, [r4, #16]
 8002fb8:	2300      	movs	r3, #0
 8002fba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002fbe:	e7aa      	b.n	8002f16 <_printf_i+0x14a>
 8002fc0:	4632      	mov	r2, r6
 8002fc2:	4649      	mov	r1, r9
 8002fc4:	4640      	mov	r0, r8
 8002fc6:	6923      	ldr	r3, [r4, #16]
 8002fc8:	47d0      	blx	sl
 8002fca:	3001      	adds	r0, #1
 8002fcc:	d0ad      	beq.n	8002f2a <_printf_i+0x15e>
 8002fce:	6823      	ldr	r3, [r4, #0]
 8002fd0:	079b      	lsls	r3, r3, #30
 8002fd2:	d413      	bmi.n	8002ffc <_printf_i+0x230>
 8002fd4:	68e0      	ldr	r0, [r4, #12]
 8002fd6:	9b03      	ldr	r3, [sp, #12]
 8002fd8:	4298      	cmp	r0, r3
 8002fda:	bfb8      	it	lt
 8002fdc:	4618      	movlt	r0, r3
 8002fde:	e7a6      	b.n	8002f2e <_printf_i+0x162>
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	4632      	mov	r2, r6
 8002fe4:	4649      	mov	r1, r9
 8002fe6:	4640      	mov	r0, r8
 8002fe8:	47d0      	blx	sl
 8002fea:	3001      	adds	r0, #1
 8002fec:	d09d      	beq.n	8002f2a <_printf_i+0x15e>
 8002fee:	3501      	adds	r5, #1
 8002ff0:	68e3      	ldr	r3, [r4, #12]
 8002ff2:	9903      	ldr	r1, [sp, #12]
 8002ff4:	1a5b      	subs	r3, r3, r1
 8002ff6:	42ab      	cmp	r3, r5
 8002ff8:	dcf2      	bgt.n	8002fe0 <_printf_i+0x214>
 8002ffa:	e7eb      	b.n	8002fd4 <_printf_i+0x208>
 8002ffc:	2500      	movs	r5, #0
 8002ffe:	f104 0619 	add.w	r6, r4, #25
 8003002:	e7f5      	b.n	8002ff0 <_printf_i+0x224>
 8003004:	08003303 	.word	0x08003303
 8003008:	08003314 	.word	0x08003314

0800300c <memmove>:
 800300c:	4288      	cmp	r0, r1
 800300e:	b510      	push	{r4, lr}
 8003010:	eb01 0402 	add.w	r4, r1, r2
 8003014:	d902      	bls.n	800301c <memmove+0x10>
 8003016:	4284      	cmp	r4, r0
 8003018:	4623      	mov	r3, r4
 800301a:	d807      	bhi.n	800302c <memmove+0x20>
 800301c:	1e43      	subs	r3, r0, #1
 800301e:	42a1      	cmp	r1, r4
 8003020:	d008      	beq.n	8003034 <memmove+0x28>
 8003022:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003026:	f803 2f01 	strb.w	r2, [r3, #1]!
 800302a:	e7f8      	b.n	800301e <memmove+0x12>
 800302c:	4601      	mov	r1, r0
 800302e:	4402      	add	r2, r0
 8003030:	428a      	cmp	r2, r1
 8003032:	d100      	bne.n	8003036 <memmove+0x2a>
 8003034:	bd10      	pop	{r4, pc}
 8003036:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800303a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800303e:	e7f7      	b.n	8003030 <memmove+0x24>

08003040 <_sbrk_r>:
 8003040:	b538      	push	{r3, r4, r5, lr}
 8003042:	2300      	movs	r3, #0
 8003044:	4d05      	ldr	r5, [pc, #20]	@ (800305c <_sbrk_r+0x1c>)
 8003046:	4604      	mov	r4, r0
 8003048:	4608      	mov	r0, r1
 800304a:	602b      	str	r3, [r5, #0]
 800304c:	f7fd fa74 	bl	8000538 <_sbrk>
 8003050:	1c43      	adds	r3, r0, #1
 8003052:	d102      	bne.n	800305a <_sbrk_r+0x1a>
 8003054:	682b      	ldr	r3, [r5, #0]
 8003056:	b103      	cbz	r3, 800305a <_sbrk_r+0x1a>
 8003058:	6023      	str	r3, [r4, #0]
 800305a:	bd38      	pop	{r3, r4, r5, pc}
 800305c:	20000310 	.word	0x20000310

08003060 <memchr>:
 8003060:	4603      	mov	r3, r0
 8003062:	b510      	push	{r4, lr}
 8003064:	b2c9      	uxtb	r1, r1
 8003066:	4402      	add	r2, r0
 8003068:	4293      	cmp	r3, r2
 800306a:	4618      	mov	r0, r3
 800306c:	d101      	bne.n	8003072 <memchr+0x12>
 800306e:	2000      	movs	r0, #0
 8003070:	e003      	b.n	800307a <memchr+0x1a>
 8003072:	7804      	ldrb	r4, [r0, #0]
 8003074:	3301      	adds	r3, #1
 8003076:	428c      	cmp	r4, r1
 8003078:	d1f6      	bne.n	8003068 <memchr+0x8>
 800307a:	bd10      	pop	{r4, pc}

0800307c <memcpy>:
 800307c:	440a      	add	r2, r1
 800307e:	4291      	cmp	r1, r2
 8003080:	f100 33ff 	add.w	r3, r0, #4294967295
 8003084:	d100      	bne.n	8003088 <memcpy+0xc>
 8003086:	4770      	bx	lr
 8003088:	b510      	push	{r4, lr}
 800308a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800308e:	4291      	cmp	r1, r2
 8003090:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003094:	d1f9      	bne.n	800308a <memcpy+0xe>
 8003096:	bd10      	pop	{r4, pc}

08003098 <_realloc_r>:
 8003098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800309c:	4680      	mov	r8, r0
 800309e:	4615      	mov	r5, r2
 80030a0:	460c      	mov	r4, r1
 80030a2:	b921      	cbnz	r1, 80030ae <_realloc_r+0x16>
 80030a4:	4611      	mov	r1, r2
 80030a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80030aa:	f7ff bc39 	b.w	8002920 <_malloc_r>
 80030ae:	b92a      	cbnz	r2, 80030bc <_realloc_r+0x24>
 80030b0:	f7ff fbcc 	bl	800284c <_free_r>
 80030b4:	2400      	movs	r4, #0
 80030b6:	4620      	mov	r0, r4
 80030b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80030bc:	f000 f81a 	bl	80030f4 <_malloc_usable_size_r>
 80030c0:	4285      	cmp	r5, r0
 80030c2:	4606      	mov	r6, r0
 80030c4:	d802      	bhi.n	80030cc <_realloc_r+0x34>
 80030c6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80030ca:	d8f4      	bhi.n	80030b6 <_realloc_r+0x1e>
 80030cc:	4629      	mov	r1, r5
 80030ce:	4640      	mov	r0, r8
 80030d0:	f7ff fc26 	bl	8002920 <_malloc_r>
 80030d4:	4607      	mov	r7, r0
 80030d6:	2800      	cmp	r0, #0
 80030d8:	d0ec      	beq.n	80030b4 <_realloc_r+0x1c>
 80030da:	42b5      	cmp	r5, r6
 80030dc:	462a      	mov	r2, r5
 80030de:	4621      	mov	r1, r4
 80030e0:	bf28      	it	cs
 80030e2:	4632      	movcs	r2, r6
 80030e4:	f7ff ffca 	bl	800307c <memcpy>
 80030e8:	4621      	mov	r1, r4
 80030ea:	4640      	mov	r0, r8
 80030ec:	f7ff fbae 	bl	800284c <_free_r>
 80030f0:	463c      	mov	r4, r7
 80030f2:	e7e0      	b.n	80030b6 <_realloc_r+0x1e>

080030f4 <_malloc_usable_size_r>:
 80030f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80030f8:	1f18      	subs	r0, r3, #4
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	bfbc      	itt	lt
 80030fe:	580b      	ldrlt	r3, [r1, r0]
 8003100:	18c0      	addlt	r0, r0, r3
 8003102:	4770      	bx	lr

08003104 <_init>:
 8003104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003106:	bf00      	nop
 8003108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800310a:	bc08      	pop	{r3}
 800310c:	469e      	mov	lr, r3
 800310e:	4770      	bx	lr

08003110 <_fini>:
 8003110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003112:	bf00      	nop
 8003114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003116:	bc08      	pop	{r3}
 8003118:	469e      	mov	lr, r3
 800311a:	4770      	bx	lr
