
SPI_Flash_Read.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003218  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000230  08003324  08003324  00004324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003554  08003554  0000505c  2**0
                  CONTENTS
  4 .ARM          00000008  08003554  08003554  00004554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800355c  0800355c  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800355c  0800355c  0000455c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003560  08003560  00004560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003564  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006c8  2000005c  080035c0  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000724  080035c0  00005724  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008a90  00000000  00000000  00005085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001847  00000000  00000000  0000db15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000848  00000000  00000000  0000f360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000654  00000000  00000000  0000fba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017250  00000000  00000000  000101fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a3a2  00000000  00000000  0002744c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083b7c  00000000  00000000  000317ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b536a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025fc  00000000  00000000  000b53b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000b79ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800330c 	.word	0x0800330c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	0800330c 	.word	0x0800330c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b08c      	sub	sp, #48	@ 0x30
 8000160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char str[30];
	unsigned int addr = 0;
 8000162:	2300      	movs	r3, #0
 8000164:	627b      	str	r3, [r7, #36]	@ 0x24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000166:	f000 fd75 	bl	8000c54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800016a:	f000 f8d7 	bl	800031c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016e:	f000 f97b 	bl	8000468 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000172:	f000 f919 	bl	80003a8 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000176:	f000 f94d 	bl	8000414 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  w25_Init();
 800017a:	f000 fb89 	bl	8000890 <w25_Init>
  for(uint16_t k=0; k<4; k++) //читаем первые 4 страницы
 800017e:	2300      	movs	r3, #0
 8000180:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8000182:	e0b2      	b.n	80002ea <main+0x18e>
    {
	  w25_Read_Data(k*256, rx_buf, 256);
 8000184:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000186:	021b      	lsls	r3, r3, #8
 8000188:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800018c:	495a      	ldr	r1, [pc, #360]	@ (80002f8 <main+0x19c>)
 800018e:	4618      	mov	r0, r3
 8000190:	f000 fb22 	bl	80007d8 <w25_Read_Data>
      for(uint8_t i=0; i<16; i++)
 8000194:	2300      	movs	r3, #0
 8000196:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 800019a:	e097      	b.n	80002cc <main+0x170>
      {
        addr = k*256 + i*16;
 800019c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800019e:	011a      	lsls	r2, r3, #4
 80001a0:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80001a4:	4413      	add	r3, r2
 80001a6:	011b      	lsls	r3, r3, #4
 80001a8:	627b      	str	r3, [r7, #36]	@ 0x24
        sprintf(str,"%08X: ", addr);
 80001aa:	1d3b      	adds	r3, r7, #4
 80001ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80001ae:	4953      	ldr	r1, [pc, #332]	@ (80002fc <main+0x1a0>)
 80001b0:	4618      	mov	r0, r3
 80001b2:	f002 fbfb 	bl	80029ac <siprintf>
        HAL_UART_Transmit(&huart1,(uint8_t*)str,10,0x1000);
 80001b6:	1d39      	adds	r1, r7, #4
 80001b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80001bc:	220a      	movs	r2, #10
 80001be:	4850      	ldr	r0, [pc, #320]	@ (8000300 <main+0x1a4>)
 80001c0:	f002 fa1f 	bl	8002602 <HAL_UART_Transmit>
        for(uint8_t j=0; j<16; j++)
 80001c4:	2300      	movs	r3, #0
 80001c6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 80001ca:	e02c      	b.n	8000226 <main+0xca>
        {
          sprintf(str,"%02X", rx_buf[(uint16_t)i*16 + (uint16_t)j]);
 80001cc:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80001d0:	011a      	lsls	r2, r3, #4
 80001d2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80001d6:	4413      	add	r3, r2
 80001d8:	4a47      	ldr	r2, [pc, #284]	@ (80002f8 <main+0x19c>)
 80001da:	5cd3      	ldrb	r3, [r2, r3]
 80001dc:	461a      	mov	r2, r3
 80001de:	1d3b      	adds	r3, r7, #4
 80001e0:	4948      	ldr	r1, [pc, #288]	@ (8000304 <main+0x1a8>)
 80001e2:	4618      	mov	r0, r3
 80001e4:	f002 fbe2 	bl	80029ac <siprintf>
          HAL_UART_Transmit(&huart1,(uint8_t*)str,2,0x1000);
 80001e8:	1d39      	adds	r1, r7, #4
 80001ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80001ee:	2202      	movs	r2, #2
 80001f0:	4843      	ldr	r0, [pc, #268]	@ (8000300 <main+0x1a4>)
 80001f2:	f002 fa06 	bl	8002602 <HAL_UART_Transmit>
          if(j==7) HAL_UART_Transmit(&huart1,(uint8_t*)"|",1,0x1000);
 80001f6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80001fa:	2b07      	cmp	r3, #7
 80001fc:	d107      	bne.n	800020e <main+0xb2>
 80001fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000202:	2201      	movs	r2, #1
 8000204:	4940      	ldr	r1, [pc, #256]	@ (8000308 <main+0x1ac>)
 8000206:	483e      	ldr	r0, [pc, #248]	@ (8000300 <main+0x1a4>)
 8000208:	f002 f9fb 	bl	8002602 <HAL_UART_Transmit>
 800020c:	e006      	b.n	800021c <main+0xc0>
          else HAL_UART_Transmit(&huart1,(uint8_t*)" ",1,0x1000);
 800020e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000212:	2201      	movs	r2, #1
 8000214:	493d      	ldr	r1, [pc, #244]	@ (800030c <main+0x1b0>)
 8000216:	483a      	ldr	r0, [pc, #232]	@ (8000300 <main+0x1a4>)
 8000218:	f002 f9f3 	bl	8002602 <HAL_UART_Transmit>
        for(uint8_t j=0; j<16; j++)
 800021c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000220:	3301      	adds	r3, #1
 8000222:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8000226:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800022a:	2b0f      	cmp	r3, #15
 800022c:	d9ce      	bls.n	80001cc <main+0x70>
        }
        HAL_UART_Transmit(&huart1,(uint8_t*)"| ",1,0x1000);
 800022e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000232:	2201      	movs	r2, #1
 8000234:	4936      	ldr	r1, [pc, #216]	@ (8000310 <main+0x1b4>)
 8000236:	4832      	ldr	r0, [pc, #200]	@ (8000300 <main+0x1a4>)
 8000238:	f002 f9e3 	bl	8002602 <HAL_UART_Transmit>
        for(uint8_t j=0; j<16; j++)
 800023c:	2300      	movs	r3, #0
 800023e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8000242:	e033      	b.n	80002ac <main+0x150>
        {
          if ((rx_buf[(uint16_t)i*16 + (uint16_t)j] == 0x0A) ||
 8000244:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000248:	011a      	lsls	r2, r3, #4
 800024a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800024e:	4413      	add	r3, r2
 8000250:	4a29      	ldr	r2, [pc, #164]	@ (80002f8 <main+0x19c>)
 8000252:	5cd3      	ldrb	r3, [r2, r3]
 8000254:	2b0a      	cmp	r3, #10
 8000256:	d009      	beq.n	800026c <main+0x110>
              (rx_buf[(uint16_t)i*16 + (uint16_t)j] == 0x0D)) sprintf(str," ");
 8000258:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800025c:	011a      	lsls	r2, r3, #4
 800025e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000262:	4413      	add	r3, r2
 8000264:	4a24      	ldr	r2, [pc, #144]	@ (80002f8 <main+0x19c>)
 8000266:	5cd3      	ldrb	r3, [r2, r3]
          if ((rx_buf[(uint16_t)i*16 + (uint16_t)j] == 0x0A) ||
 8000268:	2b0d      	cmp	r3, #13
 800026a:	d105      	bne.n	8000278 <main+0x11c>
              (rx_buf[(uint16_t)i*16 + (uint16_t)j] == 0x0D)) sprintf(str," ");
 800026c:	1d3b      	adds	r3, r7, #4
 800026e:	4927      	ldr	r1, [pc, #156]	@ (800030c <main+0x1b0>)
 8000270:	4618      	mov	r0, r3
 8000272:	f002 fb9b 	bl	80029ac <siprintf>
 8000276:	e00d      	b.n	8000294 <main+0x138>
          else sprintf(str,"%c", (char) rx_buf[(uint16_t)i*16 + (uint16_t)j]);
 8000278:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800027c:	011a      	lsls	r2, r3, #4
 800027e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000282:	4413      	add	r3, r2
 8000284:	4a1c      	ldr	r2, [pc, #112]	@ (80002f8 <main+0x19c>)
 8000286:	5cd3      	ldrb	r3, [r2, r3]
 8000288:	461a      	mov	r2, r3
 800028a:	1d3b      	adds	r3, r7, #4
 800028c:	4921      	ldr	r1, [pc, #132]	@ (8000314 <main+0x1b8>)
 800028e:	4618      	mov	r0, r3
 8000290:	f002 fb8c 	bl	80029ac <siprintf>
          HAL_UART_Transmit(&huart1,(uint8_t*)str,1,0x1000);
 8000294:	1d39      	adds	r1, r7, #4
 8000296:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800029a:	2201      	movs	r2, #1
 800029c:	4818      	ldr	r0, [pc, #96]	@ (8000300 <main+0x1a4>)
 800029e:	f002 f9b0 	bl	8002602 <HAL_UART_Transmit>
        for(uint8_t j=0; j<16; j++)
 80002a2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80002a6:	3301      	adds	r3, #1
 80002a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80002ac:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80002b0:	2b0f      	cmp	r3, #15
 80002b2:	d9c7      	bls.n	8000244 <main+0xe8>
        }
        HAL_UART_Transmit(&huart1,(uint8_t*)"\r\n",2,0x1000);
 80002b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80002b8:	2202      	movs	r2, #2
 80002ba:	4917      	ldr	r1, [pc, #92]	@ (8000318 <main+0x1bc>)
 80002bc:	4810      	ldr	r0, [pc, #64]	@ (8000300 <main+0x1a4>)
 80002be:	f002 f9a0 	bl	8002602 <HAL_UART_Transmit>
      for(uint8_t i=0; i<16; i++)
 80002c2:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80002c6:	3301      	adds	r3, #1
 80002c8:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 80002cc:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80002d0:	2b0f      	cmp	r3, #15
 80002d2:	f67f af63 	bls.w	800019c <main+0x40>
      }
      HAL_UART_Transmit(&huart1,(uint8_t*)"\r\n",2,0x1000);
 80002d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80002da:	2202      	movs	r2, #2
 80002dc:	490e      	ldr	r1, [pc, #56]	@ (8000318 <main+0x1bc>)
 80002de:	4808      	ldr	r0, [pc, #32]	@ (8000300 <main+0x1a4>)
 80002e0:	f002 f98f 	bl	8002602 <HAL_UART_Transmit>
  for(uint16_t k=0; k<4; k++) //читаем первые 4 страницы
 80002e4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80002e6:	3301      	adds	r3, #1
 80002e8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80002ea:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80002ec:	2b03      	cmp	r3, #3
 80002ee:	f67f af49 	bls.w	8000184 <main+0x28>
    }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002f2:	bf00      	nop
 80002f4:	e7fd      	b.n	80002f2 <main+0x196>
 80002f6:	bf00      	nop
 80002f8:	20000118 	.word	0x20000118
 80002fc:	08003324 	.word	0x08003324
 8000300:	200000d0 	.word	0x200000d0
 8000304:	0800332c 	.word	0x0800332c
 8000308:	08003334 	.word	0x08003334
 800030c:	08003338 	.word	0x08003338
 8000310:	0800333c 	.word	0x0800333c
 8000314:	08003340 	.word	0x08003340
 8000318:	08003344 	.word	0x08003344

0800031c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b090      	sub	sp, #64	@ 0x40
 8000320:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000322:	f107 0318 	add.w	r3, r7, #24
 8000326:	2228      	movs	r2, #40	@ 0x28
 8000328:	2100      	movs	r1, #0
 800032a:	4618      	mov	r0, r3
 800032c:	f002 fb5e 	bl	80029ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000330:	1d3b      	adds	r3, r7, #4
 8000332:	2200      	movs	r2, #0
 8000334:	601a      	str	r2, [r3, #0]
 8000336:	605a      	str	r2, [r3, #4]
 8000338:	609a      	str	r2, [r3, #8]
 800033a:	60da      	str	r2, [r3, #12]
 800033c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800033e:	2301      	movs	r3, #1
 8000340:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000342:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000346:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000348:	2300      	movs	r3, #0
 800034a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800034c:	2301      	movs	r3, #1
 800034e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000350:	2302      	movs	r3, #2
 8000352:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000354:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000358:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800035a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800035e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000360:	f107 0318 	add.w	r3, r7, #24
 8000364:	4618      	mov	r0, r3
 8000366:	f000 ff57 	bl	8001218 <HAL_RCC_OscConfig>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	d001      	beq.n	8000374 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000370:	f000 f8b8 	bl	80004e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000374:	230f      	movs	r3, #15
 8000376:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000378:	2302      	movs	r3, #2
 800037a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800037c:	2300      	movs	r3, #0
 800037e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000380:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000384:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000386:	2300      	movs	r3, #0
 8000388:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800038a:	1d3b      	adds	r3, r7, #4
 800038c:	2102      	movs	r1, #2
 800038e:	4618      	mov	r0, r3
 8000390:	f001 f9c4 	bl	800171c <HAL_RCC_ClockConfig>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d001      	beq.n	800039e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800039a:	f000 f8a3 	bl	80004e4 <Error_Handler>
  }
}
 800039e:	bf00      	nop
 80003a0:	3740      	adds	r7, #64	@ 0x40
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bd80      	pop	{r7, pc}
	...

080003a8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80003ac:	4b17      	ldr	r3, [pc, #92]	@ (800040c <MX_SPI1_Init+0x64>)
 80003ae:	4a18      	ldr	r2, [pc, #96]	@ (8000410 <MX_SPI1_Init+0x68>)
 80003b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80003b2:	4b16      	ldr	r3, [pc, #88]	@ (800040c <MX_SPI1_Init+0x64>)
 80003b4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80003b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80003ba:	4b14      	ldr	r3, [pc, #80]	@ (800040c <MX_SPI1_Init+0x64>)
 80003bc:	2200      	movs	r2, #0
 80003be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80003c0:	4b12      	ldr	r3, [pc, #72]	@ (800040c <MX_SPI1_Init+0x64>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003c6:	4b11      	ldr	r3, [pc, #68]	@ (800040c <MX_SPI1_Init+0x64>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003cc:	4b0f      	ldr	r3, [pc, #60]	@ (800040c <MX_SPI1_Init+0x64>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80003d2:	4b0e      	ldr	r3, [pc, #56]	@ (800040c <MX_SPI1_Init+0x64>)
 80003d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80003d8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80003da:	4b0c      	ldr	r3, [pc, #48]	@ (800040c <MX_SPI1_Init+0x64>)
 80003dc:	2220      	movs	r2, #32
 80003de:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003e0:	4b0a      	ldr	r3, [pc, #40]	@ (800040c <MX_SPI1_Init+0x64>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003e6:	4b09      	ldr	r3, [pc, #36]	@ (800040c <MX_SPI1_Init+0x64>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003ec:	4b07      	ldr	r3, [pc, #28]	@ (800040c <MX_SPI1_Init+0x64>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80003f2:	4b06      	ldr	r3, [pc, #24]	@ (800040c <MX_SPI1_Init+0x64>)
 80003f4:	220a      	movs	r2, #10
 80003f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003f8:	4804      	ldr	r0, [pc, #16]	@ (800040c <MX_SPI1_Init+0x64>)
 80003fa:	f001 fb1d 	bl	8001a38 <HAL_SPI_Init>
 80003fe:	4603      	mov	r3, r0
 8000400:	2b00      	cmp	r3, #0
 8000402:	d001      	beq.n	8000408 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000404:	f000 f86e 	bl	80004e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000408:	bf00      	nop
 800040a:	bd80      	pop	{r7, pc}
 800040c:	20000078 	.word	0x20000078
 8000410:	40013000 	.word	0x40013000

08000414 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000418:	4b11      	ldr	r3, [pc, #68]	@ (8000460 <MX_USART1_UART_Init+0x4c>)
 800041a:	4a12      	ldr	r2, [pc, #72]	@ (8000464 <MX_USART1_UART_Init+0x50>)
 800041c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800041e:	4b10      	ldr	r3, [pc, #64]	@ (8000460 <MX_USART1_UART_Init+0x4c>)
 8000420:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000424:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000426:	4b0e      	ldr	r3, [pc, #56]	@ (8000460 <MX_USART1_UART_Init+0x4c>)
 8000428:	2200      	movs	r2, #0
 800042a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800042c:	4b0c      	ldr	r3, [pc, #48]	@ (8000460 <MX_USART1_UART_Init+0x4c>)
 800042e:	2200      	movs	r2, #0
 8000430:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000432:	4b0b      	ldr	r3, [pc, #44]	@ (8000460 <MX_USART1_UART_Init+0x4c>)
 8000434:	2200      	movs	r2, #0
 8000436:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000438:	4b09      	ldr	r3, [pc, #36]	@ (8000460 <MX_USART1_UART_Init+0x4c>)
 800043a:	220c      	movs	r2, #12
 800043c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800043e:	4b08      	ldr	r3, [pc, #32]	@ (8000460 <MX_USART1_UART_Init+0x4c>)
 8000440:	2200      	movs	r2, #0
 8000442:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000444:	4b06      	ldr	r3, [pc, #24]	@ (8000460 <MX_USART1_UART_Init+0x4c>)
 8000446:	2200      	movs	r2, #0
 8000448:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800044a:	4805      	ldr	r0, [pc, #20]	@ (8000460 <MX_USART1_UART_Init+0x4c>)
 800044c:	f002 f889 	bl	8002562 <HAL_UART_Init>
 8000450:	4603      	mov	r3, r0
 8000452:	2b00      	cmp	r3, #0
 8000454:	d001      	beq.n	800045a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000456:	f000 f845 	bl	80004e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800045a:	bf00      	nop
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop
 8000460:	200000d0 	.word	0x200000d0
 8000464:	40013800 	.word	0x40013800

08000468 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b086      	sub	sp, #24
 800046c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800046e:	f107 0308 	add.w	r3, r7, #8
 8000472:	2200      	movs	r2, #0
 8000474:	601a      	str	r2, [r3, #0]
 8000476:	605a      	str	r2, [r3, #4]
 8000478:	609a      	str	r2, [r3, #8]
 800047a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800047c:	4b17      	ldr	r3, [pc, #92]	@ (80004dc <MX_GPIO_Init+0x74>)
 800047e:	699b      	ldr	r3, [r3, #24]
 8000480:	4a16      	ldr	r2, [pc, #88]	@ (80004dc <MX_GPIO_Init+0x74>)
 8000482:	f043 0320 	orr.w	r3, r3, #32
 8000486:	6193      	str	r3, [r2, #24]
 8000488:	4b14      	ldr	r3, [pc, #80]	@ (80004dc <MX_GPIO_Init+0x74>)
 800048a:	699b      	ldr	r3, [r3, #24]
 800048c:	f003 0320 	and.w	r3, r3, #32
 8000490:	607b      	str	r3, [r7, #4]
 8000492:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000494:	4b11      	ldr	r3, [pc, #68]	@ (80004dc <MX_GPIO_Init+0x74>)
 8000496:	699b      	ldr	r3, [r3, #24]
 8000498:	4a10      	ldr	r2, [pc, #64]	@ (80004dc <MX_GPIO_Init+0x74>)
 800049a:	f043 0304 	orr.w	r3, r3, #4
 800049e:	6193      	str	r3, [r2, #24]
 80004a0:	4b0e      	ldr	r3, [pc, #56]	@ (80004dc <MX_GPIO_Init+0x74>)
 80004a2:	699b      	ldr	r3, [r3, #24]
 80004a4:	f003 0304 	and.w	r3, r3, #4
 80004a8:	603b      	str	r3, [r7, #0]
 80004aa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80004ac:	2200      	movs	r2, #0
 80004ae:	2110      	movs	r1, #16
 80004b0:	480b      	ldr	r0, [pc, #44]	@ (80004e0 <MX_GPIO_Init+0x78>)
 80004b2:	f000 fe99 	bl	80011e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80004b6:	2310      	movs	r3, #16
 80004b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ba:	2301      	movs	r3, #1
 80004bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004be:	2300      	movs	r3, #0
 80004c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004c2:	2303      	movs	r3, #3
 80004c4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004c6:	f107 0308 	add.w	r3, r7, #8
 80004ca:	4619      	mov	r1, r3
 80004cc:	4804      	ldr	r0, [pc, #16]	@ (80004e0 <MX_GPIO_Init+0x78>)
 80004ce:	f000 fd07 	bl	8000ee0 <HAL_GPIO_Init>

}
 80004d2:	bf00      	nop
 80004d4:	3718      	adds	r7, #24
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	40021000 	.word	0x40021000
 80004e0:	40010800 	.word	0x40010800

080004e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004e8:	b672      	cpsid	i
}
 80004ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004ec:	bf00      	nop
 80004ee:	e7fd      	b.n	80004ec <Error_Handler+0x8>

080004f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b085      	sub	sp, #20
 80004f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004f6:	4b15      	ldr	r3, [pc, #84]	@ (800054c <HAL_MspInit+0x5c>)
 80004f8:	699b      	ldr	r3, [r3, #24]
 80004fa:	4a14      	ldr	r2, [pc, #80]	@ (800054c <HAL_MspInit+0x5c>)
 80004fc:	f043 0301 	orr.w	r3, r3, #1
 8000500:	6193      	str	r3, [r2, #24]
 8000502:	4b12      	ldr	r3, [pc, #72]	@ (800054c <HAL_MspInit+0x5c>)
 8000504:	699b      	ldr	r3, [r3, #24]
 8000506:	f003 0301 	and.w	r3, r3, #1
 800050a:	60bb      	str	r3, [r7, #8]
 800050c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800050e:	4b0f      	ldr	r3, [pc, #60]	@ (800054c <HAL_MspInit+0x5c>)
 8000510:	69db      	ldr	r3, [r3, #28]
 8000512:	4a0e      	ldr	r2, [pc, #56]	@ (800054c <HAL_MspInit+0x5c>)
 8000514:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000518:	61d3      	str	r3, [r2, #28]
 800051a:	4b0c      	ldr	r3, [pc, #48]	@ (800054c <HAL_MspInit+0x5c>)
 800051c:	69db      	ldr	r3, [r3, #28]
 800051e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000522:	607b      	str	r3, [r7, #4]
 8000524:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000526:	4b0a      	ldr	r3, [pc, #40]	@ (8000550 <HAL_MspInit+0x60>)
 8000528:	685b      	ldr	r3, [r3, #4]
 800052a:	60fb      	str	r3, [r7, #12]
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000532:	60fb      	str	r3, [r7, #12]
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800053a:	60fb      	str	r3, [r7, #12]
 800053c:	4a04      	ldr	r2, [pc, #16]	@ (8000550 <HAL_MspInit+0x60>)
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000542:	bf00      	nop
 8000544:	3714      	adds	r7, #20
 8000546:	46bd      	mov	sp, r7
 8000548:	bc80      	pop	{r7}
 800054a:	4770      	bx	lr
 800054c:	40021000 	.word	0x40021000
 8000550:	40010000 	.word	0x40010000

08000554 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b088      	sub	sp, #32
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800055c:	f107 0310 	add.w	r3, r7, #16
 8000560:	2200      	movs	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
 8000564:	605a      	str	r2, [r3, #4]
 8000566:	609a      	str	r2, [r3, #8]
 8000568:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	4a1b      	ldr	r2, [pc, #108]	@ (80005dc <HAL_SPI_MspInit+0x88>)
 8000570:	4293      	cmp	r3, r2
 8000572:	d12f      	bne.n	80005d4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000574:	4b1a      	ldr	r3, [pc, #104]	@ (80005e0 <HAL_SPI_MspInit+0x8c>)
 8000576:	699b      	ldr	r3, [r3, #24]
 8000578:	4a19      	ldr	r2, [pc, #100]	@ (80005e0 <HAL_SPI_MspInit+0x8c>)
 800057a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800057e:	6193      	str	r3, [r2, #24]
 8000580:	4b17      	ldr	r3, [pc, #92]	@ (80005e0 <HAL_SPI_MspInit+0x8c>)
 8000582:	699b      	ldr	r3, [r3, #24]
 8000584:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000588:	60fb      	str	r3, [r7, #12]
 800058a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800058c:	4b14      	ldr	r3, [pc, #80]	@ (80005e0 <HAL_SPI_MspInit+0x8c>)
 800058e:	699b      	ldr	r3, [r3, #24]
 8000590:	4a13      	ldr	r2, [pc, #76]	@ (80005e0 <HAL_SPI_MspInit+0x8c>)
 8000592:	f043 0304 	orr.w	r3, r3, #4
 8000596:	6193      	str	r3, [r2, #24]
 8000598:	4b11      	ldr	r3, [pc, #68]	@ (80005e0 <HAL_SPI_MspInit+0x8c>)
 800059a:	699b      	ldr	r3, [r3, #24]
 800059c:	f003 0304 	and.w	r3, r3, #4
 80005a0:	60bb      	str	r3, [r7, #8]
 80005a2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80005a4:	23a0      	movs	r3, #160	@ 0xa0
 80005a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005a8:	2302      	movs	r3, #2
 80005aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005ac:	2303      	movs	r3, #3
 80005ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b0:	f107 0310 	add.w	r3, r7, #16
 80005b4:	4619      	mov	r1, r3
 80005b6:	480b      	ldr	r0, [pc, #44]	@ (80005e4 <HAL_SPI_MspInit+0x90>)
 80005b8:	f000 fc92 	bl	8000ee0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80005bc:	2340      	movs	r3, #64	@ 0x40
 80005be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005c0:	2300      	movs	r3, #0
 80005c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c4:	2300      	movs	r3, #0
 80005c6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c8:	f107 0310 	add.w	r3, r7, #16
 80005cc:	4619      	mov	r1, r3
 80005ce:	4805      	ldr	r0, [pc, #20]	@ (80005e4 <HAL_SPI_MspInit+0x90>)
 80005d0:	f000 fc86 	bl	8000ee0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80005d4:	bf00      	nop
 80005d6:	3720      	adds	r7, #32
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	40013000 	.word	0x40013000
 80005e0:	40021000 	.word	0x40021000
 80005e4:	40010800 	.word	0x40010800

080005e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b088      	sub	sp, #32
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f0:	f107 0310 	add.w	r3, r7, #16
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4a1c      	ldr	r2, [pc, #112]	@ (8000674 <HAL_UART_MspInit+0x8c>)
 8000604:	4293      	cmp	r3, r2
 8000606:	d131      	bne.n	800066c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000608:	4b1b      	ldr	r3, [pc, #108]	@ (8000678 <HAL_UART_MspInit+0x90>)
 800060a:	699b      	ldr	r3, [r3, #24]
 800060c:	4a1a      	ldr	r2, [pc, #104]	@ (8000678 <HAL_UART_MspInit+0x90>)
 800060e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000612:	6193      	str	r3, [r2, #24]
 8000614:	4b18      	ldr	r3, [pc, #96]	@ (8000678 <HAL_UART_MspInit+0x90>)
 8000616:	699b      	ldr	r3, [r3, #24]
 8000618:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800061c:	60fb      	str	r3, [r7, #12]
 800061e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000620:	4b15      	ldr	r3, [pc, #84]	@ (8000678 <HAL_UART_MspInit+0x90>)
 8000622:	699b      	ldr	r3, [r3, #24]
 8000624:	4a14      	ldr	r2, [pc, #80]	@ (8000678 <HAL_UART_MspInit+0x90>)
 8000626:	f043 0304 	orr.w	r3, r3, #4
 800062a:	6193      	str	r3, [r2, #24]
 800062c:	4b12      	ldr	r3, [pc, #72]	@ (8000678 <HAL_UART_MspInit+0x90>)
 800062e:	699b      	ldr	r3, [r3, #24]
 8000630:	f003 0304 	and.w	r3, r3, #4
 8000634:	60bb      	str	r3, [r7, #8]
 8000636:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000638:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800063c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800063e:	2302      	movs	r3, #2
 8000640:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000642:	2303      	movs	r3, #3
 8000644:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000646:	f107 0310 	add.w	r3, r7, #16
 800064a:	4619      	mov	r1, r3
 800064c:	480b      	ldr	r0, [pc, #44]	@ (800067c <HAL_UART_MspInit+0x94>)
 800064e:	f000 fc47 	bl	8000ee0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000652:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000656:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000658:	2300      	movs	r3, #0
 800065a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065c:	2300      	movs	r3, #0
 800065e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000660:	f107 0310 	add.w	r3, r7, #16
 8000664:	4619      	mov	r1, r3
 8000666:	4805      	ldr	r0, [pc, #20]	@ (800067c <HAL_UART_MspInit+0x94>)
 8000668:	f000 fc3a 	bl	8000ee0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800066c:	bf00      	nop
 800066e:	3720      	adds	r7, #32
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	40013800 	.word	0x40013800
 8000678:	40021000 	.word	0x40021000
 800067c:	40010800 	.word	0x40010800

08000680 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000684:	bf00      	nop
 8000686:	e7fd      	b.n	8000684 <NMI_Handler+0x4>

08000688 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800068c:	bf00      	nop
 800068e:	e7fd      	b.n	800068c <HardFault_Handler+0x4>

08000690 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000694:	bf00      	nop
 8000696:	e7fd      	b.n	8000694 <MemManage_Handler+0x4>

08000698 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800069c:	bf00      	nop
 800069e:	e7fd      	b.n	800069c <BusFault_Handler+0x4>

080006a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006a4:	bf00      	nop
 80006a6:	e7fd      	b.n	80006a4 <UsageFault_Handler+0x4>

080006a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006ac:	bf00      	nop
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bc80      	pop	{r7}
 80006b2:	4770      	bx	lr

080006b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006b8:	bf00      	nop
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bc80      	pop	{r7}
 80006be:	4770      	bx	lr

080006c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006c4:	bf00      	nop
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bc80      	pop	{r7}
 80006ca:	4770      	bx	lr

080006cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006d0:	f000 fb06 	bl	8000ce0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006d4:	bf00      	nop
 80006d6:	bd80      	pop	{r7, pc}

080006d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b086      	sub	sp, #24
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006e0:	4a14      	ldr	r2, [pc, #80]	@ (8000734 <_sbrk+0x5c>)
 80006e2:	4b15      	ldr	r3, [pc, #84]	@ (8000738 <_sbrk+0x60>)
 80006e4:	1ad3      	subs	r3, r2, r3
 80006e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006e8:	697b      	ldr	r3, [r7, #20]
 80006ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006ec:	4b13      	ldr	r3, [pc, #76]	@ (800073c <_sbrk+0x64>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d102      	bne.n	80006fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006f4:	4b11      	ldr	r3, [pc, #68]	@ (800073c <_sbrk+0x64>)
 80006f6:	4a12      	ldr	r2, [pc, #72]	@ (8000740 <_sbrk+0x68>)
 80006f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006fa:	4b10      	ldr	r3, [pc, #64]	@ (800073c <_sbrk+0x64>)
 80006fc:	681a      	ldr	r2, [r3, #0]
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	4413      	add	r3, r2
 8000702:	693a      	ldr	r2, [r7, #16]
 8000704:	429a      	cmp	r2, r3
 8000706:	d207      	bcs.n	8000718 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000708:	f002 f978 	bl	80029fc <__errno>
 800070c:	4603      	mov	r3, r0
 800070e:	220c      	movs	r2, #12
 8000710:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000712:	f04f 33ff 	mov.w	r3, #4294967295
 8000716:	e009      	b.n	800072c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000718:	4b08      	ldr	r3, [pc, #32]	@ (800073c <_sbrk+0x64>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800071e:	4b07      	ldr	r3, [pc, #28]	@ (800073c <_sbrk+0x64>)
 8000720:	681a      	ldr	r2, [r3, #0]
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	4413      	add	r3, r2
 8000726:	4a05      	ldr	r2, [pc, #20]	@ (800073c <_sbrk+0x64>)
 8000728:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800072a:	68fb      	ldr	r3, [r7, #12]
}
 800072c:	4618      	mov	r0, r3
 800072e:	3718      	adds	r7, #24
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	20005000 	.word	0x20005000
 8000738:	00000400 	.word	0x00000400
 800073c:	2000051c 	.word	0x2000051c
 8000740:	20000728 	.word	0x20000728

08000744 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000748:	bf00      	nop
 800074a:	46bd      	mov	sp, r7
 800074c:	bc80      	pop	{r7}
 800074e:	4770      	bx	lr

08000750 <SPI1_Send>:
uint32_t time = 0; //delay ms
uint8_t timeFlag = 0;
char str[130];
uint8_t buf[10];

void SPI1_Send(uint8_t *dt, uint16_t cnt){
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
 8000758:	460b      	mov	r3, r1
 800075a:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Transmit(&hspi1, dt, cnt, 5000);
 800075c:	887a      	ldrh	r2, [r7, #2]
 800075e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000762:	6879      	ldr	r1, [r7, #4]
 8000764:	4803      	ldr	r0, [pc, #12]	@ (8000774 <SPI1_Send+0x24>)
 8000766:	f001 f9eb 	bl	8001b40 <HAL_SPI_Transmit>
}
 800076a:	bf00      	nop
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	20000078 	.word	0x20000078

08000778 <SPI1_Recv>:
void SPI1_Recv(uint8_t *dt, uint16_t cnt){
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
 8000780:	460b      	mov	r3, r1
 8000782:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Receive(&hspi1, dt, cnt, 5000);
 8000784:	887a      	ldrh	r2, [r7, #2]
 8000786:	f241 3388 	movw	r3, #5000	@ 0x1388
 800078a:	6879      	ldr	r1, [r7, #4]
 800078c:	4803      	ldr	r0, [pc, #12]	@ (800079c <SPI1_Recv+0x24>)
 800078e:	f001 fb1b 	bl	8001dc8 <HAL_SPI_Receive>
}
 8000792:	bf00      	nop
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	20000078 	.word	0x20000078

080007a0 <w25_Reset>:
void w25_Reset(void){
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
	cs_set();
 80007a4:	2200      	movs	r2, #0
 80007a6:	2110      	movs	r1, #16
 80007a8:	4809      	ldr	r0, [pc, #36]	@ (80007d0 <w25_Reset+0x30>)
 80007aa:	f000 fd1d 	bl	80011e8 <HAL_GPIO_WritePin>
	buf[0] = w25_ENABLE_RESET;
 80007ae:	4b09      	ldr	r3, [pc, #36]	@ (80007d4 <w25_Reset+0x34>)
 80007b0:	2266      	movs	r2, #102	@ 0x66
 80007b2:	701a      	strb	r2, [r3, #0]
	buf[1] = w25_RESET;
 80007b4:	4b07      	ldr	r3, [pc, #28]	@ (80007d4 <w25_Reset+0x34>)
 80007b6:	2299      	movs	r2, #153	@ 0x99
 80007b8:	705a      	strb	r2, [r3, #1]
	SPI1_Send(buf, 2);
 80007ba:	2102      	movs	r1, #2
 80007bc:	4805      	ldr	r0, [pc, #20]	@ (80007d4 <w25_Reset+0x34>)
 80007be:	f7ff ffc7 	bl	8000750 <SPI1_Send>
	cs_reset();
 80007c2:	2201      	movs	r2, #1
 80007c4:	2110      	movs	r1, #16
 80007c6:	4802      	ldr	r0, [pc, #8]	@ (80007d0 <w25_Reset+0x30>)
 80007c8:	f000 fd0e 	bl	80011e8 <HAL_GPIO_WritePin>
}
 80007cc:	bf00      	nop
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	40010800 	.word	0x40010800
 80007d4:	200005cc 	.word	0x200005cc

080007d8 <w25_Read_Data>:
//func для начала чтения из flash-ки записываем команду 03 и 24 битный аддрес
void w25_Read_Data(uint32_t addr, uint8_t *dat, uint32_t sz){
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0
 80007de:	60f8      	str	r0, [r7, #12]
 80007e0:	60b9      	str	r1, [r7, #8]
 80007e2:	607a      	str	r2, [r7, #4]
	cs_set();
 80007e4:	2200      	movs	r2, #0
 80007e6:	2110      	movs	r1, #16
 80007e8:	4813      	ldr	r0, [pc, #76]	@ (8000838 <w25_Read_Data+0x60>)
 80007ea:	f000 fcfd 	bl	80011e8 <HAL_GPIO_WritePin>
	buf[0] = w25_READ;
 80007ee:	4b13      	ldr	r3, [pc, #76]	@ (800083c <w25_Read_Data+0x64>)
 80007f0:	2203      	movs	r2, #3
 80007f2:	701a      	strb	r2, [r3, #0]
	buf[1] = (addr >> 16) & 0xFF;
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	0c1b      	lsrs	r3, r3, #16
 80007f8:	b2da      	uxtb	r2, r3
 80007fa:	4b10      	ldr	r3, [pc, #64]	@ (800083c <w25_Read_Data+0x64>)
 80007fc:	705a      	strb	r2, [r3, #1]
	buf[2] = (addr >> 8) & 0xFF;
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	0a1b      	lsrs	r3, r3, #8
 8000802:	b2da      	uxtb	r2, r3
 8000804:	4b0d      	ldr	r3, [pc, #52]	@ (800083c <w25_Read_Data+0x64>)
 8000806:	709a      	strb	r2, [r3, #2]
	buf[3] = addr & 0xFF;
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	b2da      	uxtb	r2, r3
 800080c:	4b0b      	ldr	r3, [pc, #44]	@ (800083c <w25_Read_Data+0x64>)
 800080e:	70da      	strb	r2, [r3, #3]
	SPI1_Send(buf, 4);
 8000810:	2104      	movs	r1, #4
 8000812:	480a      	ldr	r0, [pc, #40]	@ (800083c <w25_Read_Data+0x64>)
 8000814:	f7ff ff9c 	bl	8000750 <SPI1_Send>
	SPI1_Recv(dat, sz);
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	b29b      	uxth	r3, r3
 800081c:	4619      	mov	r1, r3
 800081e:	68b8      	ldr	r0, [r7, #8]
 8000820:	f7ff ffaa 	bl	8000778 <SPI1_Recv>
	cs_reset();
 8000824:	2201      	movs	r2, #1
 8000826:	2110      	movs	r1, #16
 8000828:	4803      	ldr	r0, [pc, #12]	@ (8000838 <w25_Read_Data+0x60>)
 800082a:	f000 fcdd 	bl	80011e8 <HAL_GPIO_WritePin>
}
 800082e:	bf00      	nop
 8000830:	3710      	adds	r7, #16
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40010800 	.word	0x40010800
 800083c:	200005cc 	.word	0x200005cc

08000840 <w25_Read_ID>:
uint32_t w25_Read_ID(void){
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
	uint8_t dt[3];
	buf[0] = w25_GET_JDEC_ID;
 8000846:	4b10      	ldr	r3, [pc, #64]	@ (8000888 <w25_Read_ID+0x48>)
 8000848:	229f      	movs	r2, #159	@ 0x9f
 800084a:	701a      	strb	r2, [r3, #0]
	cs_set();
 800084c:	2200      	movs	r2, #0
 800084e:	2110      	movs	r1, #16
 8000850:	480e      	ldr	r0, [pc, #56]	@ (800088c <w25_Read_ID+0x4c>)
 8000852:	f000 fcc9 	bl	80011e8 <HAL_GPIO_WritePin>
	SPI1_Send(buf, 1);
 8000856:	2101      	movs	r1, #1
 8000858:	480b      	ldr	r0, [pc, #44]	@ (8000888 <w25_Read_ID+0x48>)
 800085a:	f7ff ff79 	bl	8000750 <SPI1_Send>
	SPI1_Recv(dt, 3);
 800085e:	1d3b      	adds	r3, r7, #4
 8000860:	2103      	movs	r1, #3
 8000862:	4618      	mov	r0, r3
 8000864:	f7ff ff88 	bl	8000778 <SPI1_Recv>
	cs_reset();
 8000868:	2201      	movs	r2, #1
 800086a:	2110      	movs	r1, #16
 800086c:	4807      	ldr	r0, [pc, #28]	@ (800088c <w25_Read_ID+0x4c>)
 800086e:	f000 fcbb 	bl	80011e8 <HAL_GPIO_WritePin>
	return (dt[0] << 16 | dt[1] << 8) | dt[2];
 8000872:	793b      	ldrb	r3, [r7, #4]
 8000874:	041a      	lsls	r2, r3, #16
 8000876:	797b      	ldrb	r3, [r7, #5]
 8000878:	021b      	lsls	r3, r3, #8
 800087a:	4313      	orrs	r3, r2
 800087c:	79ba      	ldrb	r2, [r7, #6]
 800087e:	4313      	orrs	r3, r2
}
 8000880:	4618      	mov	r0, r3
 8000882:	3708      	adds	r7, #8
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	200005cc 	.word	0x200005cc
 800088c:	40010800 	.word	0x40010800

08000890 <w25_Init>:
void w25_Init(void){
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
	delay_ms(100);
 8000896:	2064      	movs	r0, #100	@ 0x64
 8000898:	f000 f990 	bl	8000bbc <delay_ms>
	w25_Reset();
 800089c:	f7ff ff80 	bl	80007a0 <w25_Reset>
	delay_ms(100);
 80008a0:	2064      	movs	r0, #100	@ 0x64
 80008a2:	f000 f98b 	bl	8000bbc <delay_ms>
	unsigned int ID = w25_Read_ID();
 80008a6:	f7ff ffcb 	bl	8000840 <w25_Read_ID>
 80008aa:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1,(uint8_t*)"\r\n",2,0x1000);
 80008ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008b0:	2202      	movs	r2, #2
 80008b2:	49ab      	ldr	r1, [pc, #684]	@ (8000b60 <w25_Init+0x2d0>)
 80008b4:	48ab      	ldr	r0, [pc, #684]	@ (8000b64 <w25_Init+0x2d4>)
 80008b6:	f001 fea4 	bl	8002602 <HAL_UART_Transmit>
	 sprintf(str,"ID:0x%X\r\n", ID);
 80008ba:	687a      	ldr	r2, [r7, #4]
 80008bc:	49aa      	ldr	r1, [pc, #680]	@ (8000b68 <w25_Init+0x2d8>)
 80008be:	48ab      	ldr	r0, [pc, #684]	@ (8000b6c <w25_Init+0x2dc>)
 80008c0:	f002 f874 	bl	80029ac <siprintf>
	 HAL_UART_Transmit(&huart1,(uint8_t*)str,strlen(str),0x1000);
 80008c4:	48a9      	ldr	r0, [pc, #676]	@ (8000b6c <w25_Init+0x2dc>)
 80008c6:	f7ff fc41 	bl	800014c <strlen>
 80008ca:	4603      	mov	r3, r0
 80008cc:	b29a      	uxth	r2, r3
 80008ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008d2:	49a6      	ldr	r1, [pc, #664]	@ (8000b6c <w25_Init+0x2dc>)
 80008d4:	48a3      	ldr	r0, [pc, #652]	@ (8000b64 <w25_Init+0x2d4>)
 80008d6:	f001 fe94 	bl	8002602 <HAL_UART_Transmit>
	 ID &= 0x0000ffff; //маска отсечения manuf ID
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	b29b      	uxth	r3, r3
 80008de:	607b      	str	r3, [r7, #4]
	 switch(ID)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 80008e6:	3b11      	subs	r3, #17
 80008e8:	2b09      	cmp	r3, #9
 80008ea:	d86a      	bhi.n	80009c2 <w25_Init+0x132>
 80008ec:	a201      	add	r2, pc, #4	@ (adr r2, 80008f4 <w25_Init+0x64>)
 80008ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008f2:	bf00      	nop
 80008f4:	080009b3 	.word	0x080009b3
 80008f8:	080009a3 	.word	0x080009a3
 80008fc:	08000993 	.word	0x08000993
 8000900:	08000983 	.word	0x08000983
 8000904:	08000973 	.word	0x08000973
 8000908:	08000963 	.word	0x08000963
 800090c:	08000953 	.word	0x08000953
 8000910:	08000941 	.word	0x08000941
 8000914:	0800092f 	.word	0x0800092f
 8000918:	0800091d 	.word	0x0800091d
	  {
	    case 0x401A:
	      w25_info.BlockCount=1024;
 800091c:	4b94      	ldr	r3, [pc, #592]	@ (8000b70 <w25_Init+0x2e0>)
 800091e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000922:	615a      	str	r2, [r3, #20]
	      sprintf(str,"w25qxx Chip: w25q512\r\n");
 8000924:	4993      	ldr	r1, [pc, #588]	@ (8000b74 <w25_Init+0x2e4>)
 8000926:	4891      	ldr	r0, [pc, #580]	@ (8000b6c <w25_Init+0x2dc>)
 8000928:	f002 f840 	bl	80029ac <siprintf>
	      break;
 800092c:	e059      	b.n	80009e2 <w25_Init+0x152>
	    case 0x4019:
	      w25_info.BlockCount=512;
 800092e:	4b90      	ldr	r3, [pc, #576]	@ (8000b70 <w25_Init+0x2e0>)
 8000930:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000934:	615a      	str	r2, [r3, #20]
	      sprintf(str,"w25qxx Chip: w25q256\r\n");
 8000936:	4990      	ldr	r1, [pc, #576]	@ (8000b78 <w25_Init+0x2e8>)
 8000938:	488c      	ldr	r0, [pc, #560]	@ (8000b6c <w25_Init+0x2dc>)
 800093a:	f002 f837 	bl	80029ac <siprintf>
	      break;
 800093e:	e050      	b.n	80009e2 <w25_Init+0x152>
	    case 0x4018:
	      w25_info.BlockCount=256;
 8000940:	4b8b      	ldr	r3, [pc, #556]	@ (8000b70 <w25_Init+0x2e0>)
 8000942:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000946:	615a      	str	r2, [r3, #20]
	      sprintf(str,"w25qxx Chip: w25q128\r\n");
 8000948:	498c      	ldr	r1, [pc, #560]	@ (8000b7c <w25_Init+0x2ec>)
 800094a:	4888      	ldr	r0, [pc, #544]	@ (8000b6c <w25_Init+0x2dc>)
 800094c:	f002 f82e 	bl	80029ac <siprintf>
	      break;
 8000950:	e047      	b.n	80009e2 <w25_Init+0x152>
	    case 0x4017:
	      w25_info.BlockCount=128;
 8000952:	4b87      	ldr	r3, [pc, #540]	@ (8000b70 <w25_Init+0x2e0>)
 8000954:	2280      	movs	r2, #128	@ 0x80
 8000956:	615a      	str	r2, [r3, #20]
	      sprintf(str,"w25qxx Chip: w25q64\r\n");
 8000958:	4989      	ldr	r1, [pc, #548]	@ (8000b80 <w25_Init+0x2f0>)
 800095a:	4884      	ldr	r0, [pc, #528]	@ (8000b6c <w25_Init+0x2dc>)
 800095c:	f002 f826 	bl	80029ac <siprintf>
	      break;
 8000960:	e03f      	b.n	80009e2 <w25_Init+0x152>
	    case 0x4016:
	      w25_info.BlockCount=64;
 8000962:	4b83      	ldr	r3, [pc, #524]	@ (8000b70 <w25_Init+0x2e0>)
 8000964:	2240      	movs	r2, #64	@ 0x40
 8000966:	615a      	str	r2, [r3, #20]
	      sprintf(str,"w25qxx Chip: w25q32\r\n");
 8000968:	4986      	ldr	r1, [pc, #536]	@ (8000b84 <w25_Init+0x2f4>)
 800096a:	4880      	ldr	r0, [pc, #512]	@ (8000b6c <w25_Init+0x2dc>)
 800096c:	f002 f81e 	bl	80029ac <siprintf>
	      break;
 8000970:	e037      	b.n	80009e2 <w25_Init+0x152>
	    case 0x4015:
	      w25_info.BlockCount=32;
 8000972:	4b7f      	ldr	r3, [pc, #508]	@ (8000b70 <w25_Init+0x2e0>)
 8000974:	2220      	movs	r2, #32
 8000976:	615a      	str	r2, [r3, #20]
	      sprintf(str,"w25qxx Chip: w25q16\r\n");
 8000978:	4983      	ldr	r1, [pc, #524]	@ (8000b88 <w25_Init+0x2f8>)
 800097a:	487c      	ldr	r0, [pc, #496]	@ (8000b6c <w25_Init+0x2dc>)
 800097c:	f002 f816 	bl	80029ac <siprintf>
	      break;
 8000980:	e02f      	b.n	80009e2 <w25_Init+0x152>
	    case 0x4014:
	      w25_info.BlockCount=16;
 8000982:	4b7b      	ldr	r3, [pc, #492]	@ (8000b70 <w25_Init+0x2e0>)
 8000984:	2210      	movs	r2, #16
 8000986:	615a      	str	r2, [r3, #20]
	      sprintf(str,"w25qxx Chip: w25q80\r\n");
 8000988:	4980      	ldr	r1, [pc, #512]	@ (8000b8c <w25_Init+0x2fc>)
 800098a:	4878      	ldr	r0, [pc, #480]	@ (8000b6c <w25_Init+0x2dc>)
 800098c:	f002 f80e 	bl	80029ac <siprintf>
	      break;
 8000990:	e027      	b.n	80009e2 <w25_Init+0x152>
	    case 0x4013:
	      w25_info.BlockCount=8;
 8000992:	4b77      	ldr	r3, [pc, #476]	@ (8000b70 <w25_Init+0x2e0>)
 8000994:	2208      	movs	r2, #8
 8000996:	615a      	str	r2, [r3, #20]
	      sprintf(str,"w25qxx Chip: w25q40\r\n");
 8000998:	497d      	ldr	r1, [pc, #500]	@ (8000b90 <w25_Init+0x300>)
 800099a:	4874      	ldr	r0, [pc, #464]	@ (8000b6c <w25_Init+0x2dc>)
 800099c:	f002 f806 	bl	80029ac <siprintf>
	      break;
 80009a0:	e01f      	b.n	80009e2 <w25_Init+0x152>
	    case 0x4012:
	      w25_info.BlockCount=4;
 80009a2:	4b73      	ldr	r3, [pc, #460]	@ (8000b70 <w25_Init+0x2e0>)
 80009a4:	2204      	movs	r2, #4
 80009a6:	615a      	str	r2, [r3, #20]
	      sprintf(str,"w25qxx Chip: w25q20\r\n");
 80009a8:	497a      	ldr	r1, [pc, #488]	@ (8000b94 <w25_Init+0x304>)
 80009aa:	4870      	ldr	r0, [pc, #448]	@ (8000b6c <w25_Init+0x2dc>)
 80009ac:	f001 fffe 	bl	80029ac <siprintf>
	      break;
 80009b0:	e017      	b.n	80009e2 <w25_Init+0x152>
	    case 0x4011:
	      w25_info.BlockCount=2;
 80009b2:	4b6f      	ldr	r3, [pc, #444]	@ (8000b70 <w25_Init+0x2e0>)
 80009b4:	2202      	movs	r2, #2
 80009b6:	615a      	str	r2, [r3, #20]
	      sprintf(str,"w25qxx Chip: w25q10\r\n");
 80009b8:	4977      	ldr	r1, [pc, #476]	@ (8000b98 <w25_Init+0x308>)
 80009ba:	486c      	ldr	r0, [pc, #432]	@ (8000b6c <w25_Init+0x2dc>)
 80009bc:	f001 fff6 	bl	80029ac <siprintf>
	      break;
 80009c0:	e00f      	b.n	80009e2 <w25_Init+0x152>
	    default:
	      sprintf(str,"w25qxx Unknown ID\r\n");
 80009c2:	4976      	ldr	r1, [pc, #472]	@ (8000b9c <w25_Init+0x30c>)
 80009c4:	4869      	ldr	r0, [pc, #420]	@ (8000b6c <w25_Init+0x2dc>)
 80009c6:	f001 fff1 	bl	80029ac <siprintf>
	      HAL_UART_Transmit(&huart1,(uint8_t*)str,strlen(str),0x1000);
 80009ca:	4868      	ldr	r0, [pc, #416]	@ (8000b6c <w25_Init+0x2dc>)
 80009cc:	f7ff fbbe 	bl	800014c <strlen>
 80009d0:	4603      	mov	r3, r0
 80009d2:	b29a      	uxth	r2, r3
 80009d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009d8:	4964      	ldr	r1, [pc, #400]	@ (8000b6c <w25_Init+0x2dc>)
 80009da:	4862      	ldr	r0, [pc, #392]	@ (8000b64 <w25_Init+0x2d4>)
 80009dc:	f001 fe11 	bl	8002602 <HAL_UART_Transmit>
	      return;
 80009e0:	e0ba      	b.n	8000b58 <w25_Init+0x2c8>
	  }
	  HAL_UART_Transmit(&huart1,(uint8_t*)str,strlen(str),0x1000);
 80009e2:	4862      	ldr	r0, [pc, #392]	@ (8000b6c <w25_Init+0x2dc>)
 80009e4:	f7ff fbb2 	bl	800014c <strlen>
 80009e8:	4603      	mov	r3, r0
 80009ea:	b29a      	uxth	r2, r3
 80009ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009f0:	495e      	ldr	r1, [pc, #376]	@ (8000b6c <w25_Init+0x2dc>)
 80009f2:	485c      	ldr	r0, [pc, #368]	@ (8000b64 <w25_Init+0x2d4>)
 80009f4:	f001 fe05 	bl	8002602 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1,(uint8_t*)str,strlen(str),0x1000);
 80009f8:	485c      	ldr	r0, [pc, #368]	@ (8000b6c <w25_Init+0x2dc>)
 80009fa:	f7ff fba7 	bl	800014c <strlen>
 80009fe:	4603      	mov	r3, r0
 8000a00:	b29a      	uxth	r2, r3
 8000a02:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a06:	4959      	ldr	r1, [pc, #356]	@ (8000b6c <w25_Init+0x2dc>)
 8000a08:	4856      	ldr	r0, [pc, #344]	@ (8000b64 <w25_Init+0x2d4>)
 8000a0a:	f001 fdfa 	bl	8002602 <HAL_UART_Transmit>
	   w25_info.PageSize=256;
 8000a0e:	4b58      	ldr	r3, [pc, #352]	@ (8000b70 <w25_Init+0x2e0>)
 8000a10:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a14:	801a      	strh	r2, [r3, #0]
	   w25_info.SectorSize=0x1000;
 8000a16:	4b56      	ldr	r3, [pc, #344]	@ (8000b70 <w25_Init+0x2e0>)
 8000a18:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000a1c:	609a      	str	r2, [r3, #8]
	   w25_info.SectorCount=w25_info.BlockCount*16;
 8000a1e:	4b54      	ldr	r3, [pc, #336]	@ (8000b70 <w25_Init+0x2e0>)
 8000a20:	695b      	ldr	r3, [r3, #20]
 8000a22:	011b      	lsls	r3, r3, #4
 8000a24:	4a52      	ldr	r2, [pc, #328]	@ (8000b70 <w25_Init+0x2e0>)
 8000a26:	60d3      	str	r3, [r2, #12]
	   w25_info.PageCount=(w25_info.SectorCount*w25_info.SectorSize)/w25_info.PageSize;
 8000a28:	4b51      	ldr	r3, [pc, #324]	@ (8000b70 <w25_Init+0x2e0>)
 8000a2a:	68db      	ldr	r3, [r3, #12]
 8000a2c:	4a50      	ldr	r2, [pc, #320]	@ (8000b70 <w25_Init+0x2e0>)
 8000a2e:	6892      	ldr	r2, [r2, #8]
 8000a30:	fb02 f303 	mul.w	r3, r2, r3
 8000a34:	4a4e      	ldr	r2, [pc, #312]	@ (8000b70 <w25_Init+0x2e0>)
 8000a36:	8812      	ldrh	r2, [r2, #0]
 8000a38:	fbb3 f3f2 	udiv	r3, r3, r2
 8000a3c:	4a4c      	ldr	r2, [pc, #304]	@ (8000b70 <w25_Init+0x2e0>)
 8000a3e:	6053      	str	r3, [r2, #4]
	   w25_info.BlockSize=w25_info.SectorSize*16;
 8000a40:	4b4b      	ldr	r3, [pc, #300]	@ (8000b70 <w25_Init+0x2e0>)
 8000a42:	689b      	ldr	r3, [r3, #8]
 8000a44:	011b      	lsls	r3, r3, #4
 8000a46:	4a4a      	ldr	r2, [pc, #296]	@ (8000b70 <w25_Init+0x2e0>)
 8000a48:	6113      	str	r3, [r2, #16]
	   w25_info.NumKB=(w25_info.SectorCount*w25_info.SectorSize)/1024;
 8000a4a:	4b49      	ldr	r3, [pc, #292]	@ (8000b70 <w25_Init+0x2e0>)
 8000a4c:	68db      	ldr	r3, [r3, #12]
 8000a4e:	4a48      	ldr	r2, [pc, #288]	@ (8000b70 <w25_Init+0x2e0>)
 8000a50:	6892      	ldr	r2, [r2, #8]
 8000a52:	fb02 f303 	mul.w	r3, r2, r3
 8000a56:	0a9b      	lsrs	r3, r3, #10
 8000a58:	4a45      	ldr	r2, [pc, #276]	@ (8000b70 <w25_Init+0x2e0>)
 8000a5a:	6193      	str	r3, [r2, #24]
	   sprintf(str,"Page Size: %d Bytes\r\n",(unsigned int)w25_info.PageSize);
 8000a5c:	4b44      	ldr	r3, [pc, #272]	@ (8000b70 <w25_Init+0x2e0>)
 8000a5e:	881b      	ldrh	r3, [r3, #0]
 8000a60:	461a      	mov	r2, r3
 8000a62:	494f      	ldr	r1, [pc, #316]	@ (8000ba0 <w25_Init+0x310>)
 8000a64:	4841      	ldr	r0, [pc, #260]	@ (8000b6c <w25_Init+0x2dc>)
 8000a66:	f001 ffa1 	bl	80029ac <siprintf>
	   HAL_UART_Transmit(&huart1,(uint8_t*)str,strlen(str),0x1000);
 8000a6a:	4840      	ldr	r0, [pc, #256]	@ (8000b6c <w25_Init+0x2dc>)
 8000a6c:	f7ff fb6e 	bl	800014c <strlen>
 8000a70:	4603      	mov	r3, r0
 8000a72:	b29a      	uxth	r2, r3
 8000a74:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a78:	493c      	ldr	r1, [pc, #240]	@ (8000b6c <w25_Init+0x2dc>)
 8000a7a:	483a      	ldr	r0, [pc, #232]	@ (8000b64 <w25_Init+0x2d4>)
 8000a7c:	f001 fdc1 	bl	8002602 <HAL_UART_Transmit>
	   sprintf(str,"Page Count: %u\r\n",(unsigned int)w25_info.PageCount);
 8000a80:	4b3b      	ldr	r3, [pc, #236]	@ (8000b70 <w25_Init+0x2e0>)
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	461a      	mov	r2, r3
 8000a86:	4947      	ldr	r1, [pc, #284]	@ (8000ba4 <w25_Init+0x314>)
 8000a88:	4838      	ldr	r0, [pc, #224]	@ (8000b6c <w25_Init+0x2dc>)
 8000a8a:	f001 ff8f 	bl	80029ac <siprintf>
	   HAL_UART_Transmit(&huart1,(uint8_t*)str,strlen(str),0x1000);
 8000a8e:	4837      	ldr	r0, [pc, #220]	@ (8000b6c <w25_Init+0x2dc>)
 8000a90:	f7ff fb5c 	bl	800014c <strlen>
 8000a94:	4603      	mov	r3, r0
 8000a96:	b29a      	uxth	r2, r3
 8000a98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a9c:	4933      	ldr	r1, [pc, #204]	@ (8000b6c <w25_Init+0x2dc>)
 8000a9e:	4831      	ldr	r0, [pc, #196]	@ (8000b64 <w25_Init+0x2d4>)
 8000aa0:	f001 fdaf 	bl	8002602 <HAL_UART_Transmit>
	   sprintf(str,"Sector Size: %u Bytes\r\n",(unsigned int)w25_info.SectorSize);
 8000aa4:	4b32      	ldr	r3, [pc, #200]	@ (8000b70 <w25_Init+0x2e0>)
 8000aa6:	689b      	ldr	r3, [r3, #8]
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	493f      	ldr	r1, [pc, #252]	@ (8000ba8 <w25_Init+0x318>)
 8000aac:	482f      	ldr	r0, [pc, #188]	@ (8000b6c <w25_Init+0x2dc>)
 8000aae:	f001 ff7d 	bl	80029ac <siprintf>
	   HAL_UART_Transmit(&huart1,(uint8_t*)str,strlen(str),0x1000);
 8000ab2:	482e      	ldr	r0, [pc, #184]	@ (8000b6c <w25_Init+0x2dc>)
 8000ab4:	f7ff fb4a 	bl	800014c <strlen>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	b29a      	uxth	r2, r3
 8000abc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ac0:	492a      	ldr	r1, [pc, #168]	@ (8000b6c <w25_Init+0x2dc>)
 8000ac2:	4828      	ldr	r0, [pc, #160]	@ (8000b64 <w25_Init+0x2d4>)
 8000ac4:	f001 fd9d 	bl	8002602 <HAL_UART_Transmit>
	   sprintf(str,"Sector Count: %u\r\n",(unsigned int)w25_info.SectorCount);
 8000ac8:	4b29      	ldr	r3, [pc, #164]	@ (8000b70 <w25_Init+0x2e0>)
 8000aca:	68db      	ldr	r3, [r3, #12]
 8000acc:	461a      	mov	r2, r3
 8000ace:	4937      	ldr	r1, [pc, #220]	@ (8000bac <w25_Init+0x31c>)
 8000ad0:	4826      	ldr	r0, [pc, #152]	@ (8000b6c <w25_Init+0x2dc>)
 8000ad2:	f001 ff6b 	bl	80029ac <siprintf>
	   HAL_UART_Transmit(&huart1,(uint8_t*)str,strlen(str),0x1000);
 8000ad6:	4825      	ldr	r0, [pc, #148]	@ (8000b6c <w25_Init+0x2dc>)
 8000ad8:	f7ff fb38 	bl	800014c <strlen>
 8000adc:	4603      	mov	r3, r0
 8000ade:	b29a      	uxth	r2, r3
 8000ae0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ae4:	4921      	ldr	r1, [pc, #132]	@ (8000b6c <w25_Init+0x2dc>)
 8000ae6:	481f      	ldr	r0, [pc, #124]	@ (8000b64 <w25_Init+0x2d4>)
 8000ae8:	f001 fd8b 	bl	8002602 <HAL_UART_Transmit>
	   sprintf(str,"Block Size: %u Bytes\r\n",(unsigned int)w25_info.BlockSize);
 8000aec:	4b20      	ldr	r3, [pc, #128]	@ (8000b70 <w25_Init+0x2e0>)
 8000aee:	691b      	ldr	r3, [r3, #16]
 8000af0:	461a      	mov	r2, r3
 8000af2:	492f      	ldr	r1, [pc, #188]	@ (8000bb0 <w25_Init+0x320>)
 8000af4:	481d      	ldr	r0, [pc, #116]	@ (8000b6c <w25_Init+0x2dc>)
 8000af6:	f001 ff59 	bl	80029ac <siprintf>
	   HAL_UART_Transmit(&huart1,(uint8_t*)str,strlen(str),0x1000);
 8000afa:	481c      	ldr	r0, [pc, #112]	@ (8000b6c <w25_Init+0x2dc>)
 8000afc:	f7ff fb26 	bl	800014c <strlen>
 8000b00:	4603      	mov	r3, r0
 8000b02:	b29a      	uxth	r2, r3
 8000b04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b08:	4918      	ldr	r1, [pc, #96]	@ (8000b6c <w25_Init+0x2dc>)
 8000b0a:	4816      	ldr	r0, [pc, #88]	@ (8000b64 <w25_Init+0x2d4>)
 8000b0c:	f001 fd79 	bl	8002602 <HAL_UART_Transmit>
	   sprintf(str,"Block Count: %u\r\n",(unsigned int)w25_info.BlockCount);
 8000b10:	4b17      	ldr	r3, [pc, #92]	@ (8000b70 <w25_Init+0x2e0>)
 8000b12:	695b      	ldr	r3, [r3, #20]
 8000b14:	461a      	mov	r2, r3
 8000b16:	4927      	ldr	r1, [pc, #156]	@ (8000bb4 <w25_Init+0x324>)
 8000b18:	4814      	ldr	r0, [pc, #80]	@ (8000b6c <w25_Init+0x2dc>)
 8000b1a:	f001 ff47 	bl	80029ac <siprintf>
	   HAL_UART_Transmit(&huart1,(uint8_t*)str,strlen(str),0x1000);
 8000b1e:	4813      	ldr	r0, [pc, #76]	@ (8000b6c <w25_Init+0x2dc>)
 8000b20:	f7ff fb14 	bl	800014c <strlen>
 8000b24:	4603      	mov	r3, r0
 8000b26:	b29a      	uxth	r2, r3
 8000b28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b2c:	490f      	ldr	r1, [pc, #60]	@ (8000b6c <w25_Init+0x2dc>)
 8000b2e:	480d      	ldr	r0, [pc, #52]	@ (8000b64 <w25_Init+0x2d4>)
 8000b30:	f001 fd67 	bl	8002602 <HAL_UART_Transmit>
	   sprintf(str,"Capacity: %u KB\r\n",(unsigned int)w25_info.NumKB);
 8000b34:	4b0e      	ldr	r3, [pc, #56]	@ (8000b70 <w25_Init+0x2e0>)
 8000b36:	699b      	ldr	r3, [r3, #24]
 8000b38:	461a      	mov	r2, r3
 8000b3a:	491f      	ldr	r1, [pc, #124]	@ (8000bb8 <w25_Init+0x328>)
 8000b3c:	480b      	ldr	r0, [pc, #44]	@ (8000b6c <w25_Init+0x2dc>)
 8000b3e:	f001 ff35 	bl	80029ac <siprintf>
	   HAL_UART_Transmit(&huart1,(uint8_t*)str,strlen(str),0x1000);
 8000b42:	480a      	ldr	r0, [pc, #40]	@ (8000b6c <w25_Init+0x2dc>)
 8000b44:	f7ff fb02 	bl	800014c <strlen>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	b29a      	uxth	r2, r3
 8000b4c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b50:	4906      	ldr	r1, [pc, #24]	@ (8000b6c <w25_Init+0x2dc>)
 8000b52:	4804      	ldr	r0, [pc, #16]	@ (8000b64 <w25_Init+0x2d4>)
 8000b54:	f001 fd55 	bl	8002602 <HAL_UART_Transmit>

}
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	08003348 	.word	0x08003348
 8000b64:	200000d0 	.word	0x200000d0
 8000b68:	0800334c 	.word	0x0800334c
 8000b6c:	20000548 	.word	0x20000548
 8000b70:	20000520 	.word	0x20000520
 8000b74:	08003358 	.word	0x08003358
 8000b78:	08003370 	.word	0x08003370
 8000b7c:	08003388 	.word	0x08003388
 8000b80:	080033a0 	.word	0x080033a0
 8000b84:	080033b8 	.word	0x080033b8
 8000b88:	080033d0 	.word	0x080033d0
 8000b8c:	080033e8 	.word	0x080033e8
 8000b90:	08003400 	.word	0x08003400
 8000b94:	08003418 	.word	0x08003418
 8000b98:	08003430 	.word	0x08003430
 8000b9c:	08003448 	.word	0x08003448
 8000ba0:	0800345c 	.word	0x0800345c
 8000ba4:	08003474 	.word	0x08003474
 8000ba8:	08003488 	.word	0x08003488
 8000bac:	080034a0 	.word	0x080034a0
 8000bb0:	080034b4 	.word	0x080034b4
 8000bb4:	080034cc 	.word	0x080034cc
 8000bb8:	080034e0 	.word	0x080034e0

08000bbc <delay_ms>:


static void delay_ms(uint16_t delay){
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	80fb      	strh	r3, [r7, #6]
	time = HAL_GetTick();
 8000bc6:	f000 f89d 	bl	8000d04 <HAL_GetTick>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	4a0c      	ldr	r2, [pc, #48]	@ (8000c00 <delay_ms+0x44>)
 8000bce:	6013      	str	r3, [r2, #0]
		while(timeFlag == 0){
 8000bd0:	e00b      	b.n	8000bea <delay_ms+0x2e>
			if((HAL_GetTick() - time) > delay){
 8000bd2:	f000 f897 	bl	8000d04 <HAL_GetTick>
 8000bd6:	4602      	mov	r2, r0
 8000bd8:	4b09      	ldr	r3, [pc, #36]	@ (8000c00 <delay_ms+0x44>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	1ad2      	subs	r2, r2, r3
 8000bde:	88fb      	ldrh	r3, [r7, #6]
 8000be0:	429a      	cmp	r2, r3
 8000be2:	d902      	bls.n	8000bea <delay_ms+0x2e>
				timeFlag = 1;
 8000be4:	4b07      	ldr	r3, [pc, #28]	@ (8000c04 <delay_ms+0x48>)
 8000be6:	2201      	movs	r2, #1
 8000be8:	701a      	strb	r2, [r3, #0]
		while(timeFlag == 0){
 8000bea:	4b06      	ldr	r3, [pc, #24]	@ (8000c04 <delay_ms+0x48>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d0ef      	beq.n	8000bd2 <delay_ms+0x16>
			}
		}
		timeFlag = 0;
 8000bf2:	4b04      	ldr	r3, [pc, #16]	@ (8000c04 <delay_ms+0x48>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	701a      	strb	r2, [r3, #0]
}
 8000bf8:	bf00      	nop
 8000bfa:	3708      	adds	r7, #8
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	20000540 	.word	0x20000540
 8000c04:	20000544 	.word	0x20000544

08000c08 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c08:	f7ff fd9c 	bl	8000744 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c0c:	480b      	ldr	r0, [pc, #44]	@ (8000c3c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c0e:	490c      	ldr	r1, [pc, #48]	@ (8000c40 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c10:	4a0c      	ldr	r2, [pc, #48]	@ (8000c44 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c14:	e002      	b.n	8000c1c <LoopCopyDataInit>

08000c16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c1a:	3304      	adds	r3, #4

08000c1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c20:	d3f9      	bcc.n	8000c16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c22:	4a09      	ldr	r2, [pc, #36]	@ (8000c48 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000c24:	4c09      	ldr	r4, [pc, #36]	@ (8000c4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c28:	e001      	b.n	8000c2e <LoopFillZerobss>

08000c2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c2c:	3204      	adds	r2, #4

08000c2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c30:	d3fb      	bcc.n	8000c2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c32:	f001 fee9 	bl	8002a08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c36:	f7ff fa91 	bl	800015c <main>
  bx lr
 8000c3a:	4770      	bx	lr
  ldr r0, =_sdata
 8000c3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c40:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000c44:	08003564 	.word	0x08003564
  ldr r2, =_sbss
 8000c48:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000c4c:	20000724 	.word	0x20000724

08000c50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c50:	e7fe      	b.n	8000c50 <ADC1_2_IRQHandler>
	...

08000c54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c58:	4b08      	ldr	r3, [pc, #32]	@ (8000c7c <HAL_Init+0x28>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a07      	ldr	r2, [pc, #28]	@ (8000c7c <HAL_Init+0x28>)
 8000c5e:	f043 0310 	orr.w	r3, r3, #16
 8000c62:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c64:	2003      	movs	r0, #3
 8000c66:	f000 f907 	bl	8000e78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c6a:	200f      	movs	r0, #15
 8000c6c:	f000 f808 	bl	8000c80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c70:	f7ff fc3e 	bl	80004f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c74:	2300      	movs	r3, #0
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40022000 	.word	0x40022000

08000c80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c88:	4b12      	ldr	r3, [pc, #72]	@ (8000cd4 <HAL_InitTick+0x54>)
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	4b12      	ldr	r3, [pc, #72]	@ (8000cd8 <HAL_InitTick+0x58>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	4619      	mov	r1, r3
 8000c92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f000 f911 	bl	8000ec6 <HAL_SYSTICK_Config>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000caa:	2301      	movs	r3, #1
 8000cac:	e00e      	b.n	8000ccc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2b0f      	cmp	r3, #15
 8000cb2:	d80a      	bhi.n	8000cca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	6879      	ldr	r1, [r7, #4]
 8000cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cbc:	f000 f8e7 	bl	8000e8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cc0:	4a06      	ldr	r2, [pc, #24]	@ (8000cdc <HAL_InitTick+0x5c>)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e000      	b.n	8000ccc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3708      	adds	r7, #8
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	20000000 	.word	0x20000000
 8000cd8:	20000008 	.word	0x20000008
 8000cdc:	20000004 	.word	0x20000004

08000ce0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ce4:	4b05      	ldr	r3, [pc, #20]	@ (8000cfc <HAL_IncTick+0x1c>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	461a      	mov	r2, r3
 8000cea:	4b05      	ldr	r3, [pc, #20]	@ (8000d00 <HAL_IncTick+0x20>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4413      	add	r3, r2
 8000cf0:	4a03      	ldr	r2, [pc, #12]	@ (8000d00 <HAL_IncTick+0x20>)
 8000cf2:	6013      	str	r3, [r2, #0]
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bc80      	pop	{r7}
 8000cfa:	4770      	bx	lr
 8000cfc:	20000008 	.word	0x20000008
 8000d00:	200005d8 	.word	0x200005d8

08000d04 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  return uwTick;
 8000d08:	4b02      	ldr	r3, [pc, #8]	@ (8000d14 <HAL_GetTick+0x10>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bc80      	pop	{r7}
 8000d12:	4770      	bx	lr
 8000d14:	200005d8 	.word	0x200005d8

08000d18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b085      	sub	sp, #20
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	f003 0307 	and.w	r3, r3, #7
 8000d26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d28:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__NVIC_SetPriorityGrouping+0x44>)
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d2e:	68ba      	ldr	r2, [r7, #8]
 8000d30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d34:	4013      	ands	r3, r2
 8000d36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d4a:	4a04      	ldr	r2, [pc, #16]	@ (8000d5c <__NVIC_SetPriorityGrouping+0x44>)
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	60d3      	str	r3, [r2, #12]
}
 8000d50:	bf00      	nop
 8000d52:	3714      	adds	r7, #20
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bc80      	pop	{r7}
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d64:	4b04      	ldr	r3, [pc, #16]	@ (8000d78 <__NVIC_GetPriorityGrouping+0x18>)
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	0a1b      	lsrs	r3, r3, #8
 8000d6a:	f003 0307 	and.w	r3, r3, #7
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bc80      	pop	{r7}
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	6039      	str	r1, [r7, #0]
 8000d86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	db0a      	blt.n	8000da6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	b2da      	uxtb	r2, r3
 8000d94:	490c      	ldr	r1, [pc, #48]	@ (8000dc8 <__NVIC_SetPriority+0x4c>)
 8000d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9a:	0112      	lsls	r2, r2, #4
 8000d9c:	b2d2      	uxtb	r2, r2
 8000d9e:	440b      	add	r3, r1
 8000da0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000da4:	e00a      	b.n	8000dbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	b2da      	uxtb	r2, r3
 8000daa:	4908      	ldr	r1, [pc, #32]	@ (8000dcc <__NVIC_SetPriority+0x50>)
 8000dac:	79fb      	ldrb	r3, [r7, #7]
 8000dae:	f003 030f 	and.w	r3, r3, #15
 8000db2:	3b04      	subs	r3, #4
 8000db4:	0112      	lsls	r2, r2, #4
 8000db6:	b2d2      	uxtb	r2, r2
 8000db8:	440b      	add	r3, r1
 8000dba:	761a      	strb	r2, [r3, #24]
}
 8000dbc:	bf00      	nop
 8000dbe:	370c      	adds	r7, #12
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bc80      	pop	{r7}
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	e000e100 	.word	0xe000e100
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b089      	sub	sp, #36	@ 0x24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	f003 0307 	and.w	r3, r3, #7
 8000de2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000de4:	69fb      	ldr	r3, [r7, #28]
 8000de6:	f1c3 0307 	rsb	r3, r3, #7
 8000dea:	2b04      	cmp	r3, #4
 8000dec:	bf28      	it	cs
 8000dee:	2304      	movcs	r3, #4
 8000df0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	3304      	adds	r3, #4
 8000df6:	2b06      	cmp	r3, #6
 8000df8:	d902      	bls.n	8000e00 <NVIC_EncodePriority+0x30>
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	3b03      	subs	r3, #3
 8000dfe:	e000      	b.n	8000e02 <NVIC_EncodePriority+0x32>
 8000e00:	2300      	movs	r3, #0
 8000e02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e04:	f04f 32ff 	mov.w	r2, #4294967295
 8000e08:	69bb      	ldr	r3, [r7, #24]
 8000e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0e:	43da      	mvns	r2, r3
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	401a      	ands	r2, r3
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e18:	f04f 31ff 	mov.w	r1, #4294967295
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e22:	43d9      	mvns	r1, r3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e28:	4313      	orrs	r3, r2
         );
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3724      	adds	r7, #36	@ 0x24
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bc80      	pop	{r7}
 8000e32:	4770      	bx	lr

08000e34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	3b01      	subs	r3, #1
 8000e40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e44:	d301      	bcc.n	8000e4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e46:	2301      	movs	r3, #1
 8000e48:	e00f      	b.n	8000e6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e4a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e74 <SysTick_Config+0x40>)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	3b01      	subs	r3, #1
 8000e50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e52:	210f      	movs	r1, #15
 8000e54:	f04f 30ff 	mov.w	r0, #4294967295
 8000e58:	f7ff ff90 	bl	8000d7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e5c:	4b05      	ldr	r3, [pc, #20]	@ (8000e74 <SysTick_Config+0x40>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e62:	4b04      	ldr	r3, [pc, #16]	@ (8000e74 <SysTick_Config+0x40>)
 8000e64:	2207      	movs	r2, #7
 8000e66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e68:	2300      	movs	r3, #0
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	e000e010 	.word	0xe000e010

08000e78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e80:	6878      	ldr	r0, [r7, #4]
 8000e82:	f7ff ff49 	bl	8000d18 <__NVIC_SetPriorityGrouping>
}
 8000e86:	bf00      	nop
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	b086      	sub	sp, #24
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	4603      	mov	r3, r0
 8000e96:	60b9      	str	r1, [r7, #8]
 8000e98:	607a      	str	r2, [r7, #4]
 8000e9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ea0:	f7ff ff5e 	bl	8000d60 <__NVIC_GetPriorityGrouping>
 8000ea4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ea6:	687a      	ldr	r2, [r7, #4]
 8000ea8:	68b9      	ldr	r1, [r7, #8]
 8000eaa:	6978      	ldr	r0, [r7, #20]
 8000eac:	f7ff ff90 	bl	8000dd0 <NVIC_EncodePriority>
 8000eb0:	4602      	mov	r2, r0
 8000eb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eb6:	4611      	mov	r1, r2
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff ff5f 	bl	8000d7c <__NVIC_SetPriority>
}
 8000ebe:	bf00      	nop
 8000ec0:	3718      	adds	r7, #24
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b082      	sub	sp, #8
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	f7ff ffb0 	bl	8000e34 <SysTick_Config>
 8000ed4:	4603      	mov	r3, r0
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
	...

08000ee0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b08b      	sub	sp, #44	@ 0x2c
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000eea:	2300      	movs	r3, #0
 8000eec:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ef2:	e169      	b.n	80011c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	69fa      	ldr	r2, [r7, #28]
 8000f04:	4013      	ands	r3, r2
 8000f06:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	f040 8158 	bne.w	80011c2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	4a9a      	ldr	r2, [pc, #616]	@ (8001180 <HAL_GPIO_Init+0x2a0>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d05e      	beq.n	8000fda <HAL_GPIO_Init+0xfa>
 8000f1c:	4a98      	ldr	r2, [pc, #608]	@ (8001180 <HAL_GPIO_Init+0x2a0>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d875      	bhi.n	800100e <HAL_GPIO_Init+0x12e>
 8000f22:	4a98      	ldr	r2, [pc, #608]	@ (8001184 <HAL_GPIO_Init+0x2a4>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d058      	beq.n	8000fda <HAL_GPIO_Init+0xfa>
 8000f28:	4a96      	ldr	r2, [pc, #600]	@ (8001184 <HAL_GPIO_Init+0x2a4>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d86f      	bhi.n	800100e <HAL_GPIO_Init+0x12e>
 8000f2e:	4a96      	ldr	r2, [pc, #600]	@ (8001188 <HAL_GPIO_Init+0x2a8>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d052      	beq.n	8000fda <HAL_GPIO_Init+0xfa>
 8000f34:	4a94      	ldr	r2, [pc, #592]	@ (8001188 <HAL_GPIO_Init+0x2a8>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d869      	bhi.n	800100e <HAL_GPIO_Init+0x12e>
 8000f3a:	4a94      	ldr	r2, [pc, #592]	@ (800118c <HAL_GPIO_Init+0x2ac>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d04c      	beq.n	8000fda <HAL_GPIO_Init+0xfa>
 8000f40:	4a92      	ldr	r2, [pc, #584]	@ (800118c <HAL_GPIO_Init+0x2ac>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d863      	bhi.n	800100e <HAL_GPIO_Init+0x12e>
 8000f46:	4a92      	ldr	r2, [pc, #584]	@ (8001190 <HAL_GPIO_Init+0x2b0>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d046      	beq.n	8000fda <HAL_GPIO_Init+0xfa>
 8000f4c:	4a90      	ldr	r2, [pc, #576]	@ (8001190 <HAL_GPIO_Init+0x2b0>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d85d      	bhi.n	800100e <HAL_GPIO_Init+0x12e>
 8000f52:	2b12      	cmp	r3, #18
 8000f54:	d82a      	bhi.n	8000fac <HAL_GPIO_Init+0xcc>
 8000f56:	2b12      	cmp	r3, #18
 8000f58:	d859      	bhi.n	800100e <HAL_GPIO_Init+0x12e>
 8000f5a:	a201      	add	r2, pc, #4	@ (adr r2, 8000f60 <HAL_GPIO_Init+0x80>)
 8000f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f60:	08000fdb 	.word	0x08000fdb
 8000f64:	08000fb5 	.word	0x08000fb5
 8000f68:	08000fc7 	.word	0x08000fc7
 8000f6c:	08001009 	.word	0x08001009
 8000f70:	0800100f 	.word	0x0800100f
 8000f74:	0800100f 	.word	0x0800100f
 8000f78:	0800100f 	.word	0x0800100f
 8000f7c:	0800100f 	.word	0x0800100f
 8000f80:	0800100f 	.word	0x0800100f
 8000f84:	0800100f 	.word	0x0800100f
 8000f88:	0800100f 	.word	0x0800100f
 8000f8c:	0800100f 	.word	0x0800100f
 8000f90:	0800100f 	.word	0x0800100f
 8000f94:	0800100f 	.word	0x0800100f
 8000f98:	0800100f 	.word	0x0800100f
 8000f9c:	0800100f 	.word	0x0800100f
 8000fa0:	0800100f 	.word	0x0800100f
 8000fa4:	08000fbd 	.word	0x08000fbd
 8000fa8:	08000fd1 	.word	0x08000fd1
 8000fac:	4a79      	ldr	r2, [pc, #484]	@ (8001194 <HAL_GPIO_Init+0x2b4>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d013      	beq.n	8000fda <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000fb2:	e02c      	b.n	800100e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	623b      	str	r3, [r7, #32]
          break;
 8000fba:	e029      	b.n	8001010 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	3304      	adds	r3, #4
 8000fc2:	623b      	str	r3, [r7, #32]
          break;
 8000fc4:	e024      	b.n	8001010 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	68db      	ldr	r3, [r3, #12]
 8000fca:	3308      	adds	r3, #8
 8000fcc:	623b      	str	r3, [r7, #32]
          break;
 8000fce:	e01f      	b.n	8001010 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	330c      	adds	r3, #12
 8000fd6:	623b      	str	r3, [r7, #32]
          break;
 8000fd8:	e01a      	b.n	8001010 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d102      	bne.n	8000fe8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000fe2:	2304      	movs	r3, #4
 8000fe4:	623b      	str	r3, [r7, #32]
          break;
 8000fe6:	e013      	b.n	8001010 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	689b      	ldr	r3, [r3, #8]
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d105      	bne.n	8000ffc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ff0:	2308      	movs	r3, #8
 8000ff2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	69fa      	ldr	r2, [r7, #28]
 8000ff8:	611a      	str	r2, [r3, #16]
          break;
 8000ffa:	e009      	b.n	8001010 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ffc:	2308      	movs	r3, #8
 8000ffe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	69fa      	ldr	r2, [r7, #28]
 8001004:	615a      	str	r2, [r3, #20]
          break;
 8001006:	e003      	b.n	8001010 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001008:	2300      	movs	r3, #0
 800100a:	623b      	str	r3, [r7, #32]
          break;
 800100c:	e000      	b.n	8001010 <HAL_GPIO_Init+0x130>
          break;
 800100e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001010:	69bb      	ldr	r3, [r7, #24]
 8001012:	2bff      	cmp	r3, #255	@ 0xff
 8001014:	d801      	bhi.n	800101a <HAL_GPIO_Init+0x13a>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	e001      	b.n	800101e <HAL_GPIO_Init+0x13e>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	3304      	adds	r3, #4
 800101e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	2bff      	cmp	r3, #255	@ 0xff
 8001024:	d802      	bhi.n	800102c <HAL_GPIO_Init+0x14c>
 8001026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	e002      	b.n	8001032 <HAL_GPIO_Init+0x152>
 800102c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800102e:	3b08      	subs	r3, #8
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	210f      	movs	r1, #15
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	fa01 f303 	lsl.w	r3, r1, r3
 8001040:	43db      	mvns	r3, r3
 8001042:	401a      	ands	r2, r3
 8001044:	6a39      	ldr	r1, [r7, #32]
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	fa01 f303 	lsl.w	r3, r1, r3
 800104c:	431a      	orrs	r2, r3
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800105a:	2b00      	cmp	r3, #0
 800105c:	f000 80b1 	beq.w	80011c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001060:	4b4d      	ldr	r3, [pc, #308]	@ (8001198 <HAL_GPIO_Init+0x2b8>)
 8001062:	699b      	ldr	r3, [r3, #24]
 8001064:	4a4c      	ldr	r2, [pc, #304]	@ (8001198 <HAL_GPIO_Init+0x2b8>)
 8001066:	f043 0301 	orr.w	r3, r3, #1
 800106a:	6193      	str	r3, [r2, #24]
 800106c:	4b4a      	ldr	r3, [pc, #296]	@ (8001198 <HAL_GPIO_Init+0x2b8>)
 800106e:	699b      	ldr	r3, [r3, #24]
 8001070:	f003 0301 	and.w	r3, r3, #1
 8001074:	60bb      	str	r3, [r7, #8]
 8001076:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001078:	4a48      	ldr	r2, [pc, #288]	@ (800119c <HAL_GPIO_Init+0x2bc>)
 800107a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800107c:	089b      	lsrs	r3, r3, #2
 800107e:	3302      	adds	r3, #2
 8001080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001084:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001088:	f003 0303 	and.w	r3, r3, #3
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	220f      	movs	r2, #15
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	43db      	mvns	r3, r3
 8001096:	68fa      	ldr	r2, [r7, #12]
 8001098:	4013      	ands	r3, r2
 800109a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	4a40      	ldr	r2, [pc, #256]	@ (80011a0 <HAL_GPIO_Init+0x2c0>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d013      	beq.n	80010cc <HAL_GPIO_Init+0x1ec>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	4a3f      	ldr	r2, [pc, #252]	@ (80011a4 <HAL_GPIO_Init+0x2c4>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d00d      	beq.n	80010c8 <HAL_GPIO_Init+0x1e8>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	4a3e      	ldr	r2, [pc, #248]	@ (80011a8 <HAL_GPIO_Init+0x2c8>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d007      	beq.n	80010c4 <HAL_GPIO_Init+0x1e4>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4a3d      	ldr	r2, [pc, #244]	@ (80011ac <HAL_GPIO_Init+0x2cc>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d101      	bne.n	80010c0 <HAL_GPIO_Init+0x1e0>
 80010bc:	2303      	movs	r3, #3
 80010be:	e006      	b.n	80010ce <HAL_GPIO_Init+0x1ee>
 80010c0:	2304      	movs	r3, #4
 80010c2:	e004      	b.n	80010ce <HAL_GPIO_Init+0x1ee>
 80010c4:	2302      	movs	r3, #2
 80010c6:	e002      	b.n	80010ce <HAL_GPIO_Init+0x1ee>
 80010c8:	2301      	movs	r3, #1
 80010ca:	e000      	b.n	80010ce <HAL_GPIO_Init+0x1ee>
 80010cc:	2300      	movs	r3, #0
 80010ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010d0:	f002 0203 	and.w	r2, r2, #3
 80010d4:	0092      	lsls	r2, r2, #2
 80010d6:	4093      	lsls	r3, r2
 80010d8:	68fa      	ldr	r2, [r7, #12]
 80010da:	4313      	orrs	r3, r2
 80010dc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80010de:	492f      	ldr	r1, [pc, #188]	@ (800119c <HAL_GPIO_Init+0x2bc>)
 80010e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010e2:	089b      	lsrs	r3, r3, #2
 80010e4:	3302      	adds	r3, #2
 80010e6:	68fa      	ldr	r2, [r7, #12]
 80010e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d006      	beq.n	8001106 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80010f8:	4b2d      	ldr	r3, [pc, #180]	@ (80011b0 <HAL_GPIO_Init+0x2d0>)
 80010fa:	689a      	ldr	r2, [r3, #8]
 80010fc:	492c      	ldr	r1, [pc, #176]	@ (80011b0 <HAL_GPIO_Init+0x2d0>)
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	4313      	orrs	r3, r2
 8001102:	608b      	str	r3, [r1, #8]
 8001104:	e006      	b.n	8001114 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001106:	4b2a      	ldr	r3, [pc, #168]	@ (80011b0 <HAL_GPIO_Init+0x2d0>)
 8001108:	689a      	ldr	r2, [r3, #8]
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	43db      	mvns	r3, r3
 800110e:	4928      	ldr	r1, [pc, #160]	@ (80011b0 <HAL_GPIO_Init+0x2d0>)
 8001110:	4013      	ands	r3, r2
 8001112:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800111c:	2b00      	cmp	r3, #0
 800111e:	d006      	beq.n	800112e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001120:	4b23      	ldr	r3, [pc, #140]	@ (80011b0 <HAL_GPIO_Init+0x2d0>)
 8001122:	68da      	ldr	r2, [r3, #12]
 8001124:	4922      	ldr	r1, [pc, #136]	@ (80011b0 <HAL_GPIO_Init+0x2d0>)
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	4313      	orrs	r3, r2
 800112a:	60cb      	str	r3, [r1, #12]
 800112c:	e006      	b.n	800113c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800112e:	4b20      	ldr	r3, [pc, #128]	@ (80011b0 <HAL_GPIO_Init+0x2d0>)
 8001130:	68da      	ldr	r2, [r3, #12]
 8001132:	69bb      	ldr	r3, [r7, #24]
 8001134:	43db      	mvns	r3, r3
 8001136:	491e      	ldr	r1, [pc, #120]	@ (80011b0 <HAL_GPIO_Init+0x2d0>)
 8001138:	4013      	ands	r3, r2
 800113a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001144:	2b00      	cmp	r3, #0
 8001146:	d006      	beq.n	8001156 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001148:	4b19      	ldr	r3, [pc, #100]	@ (80011b0 <HAL_GPIO_Init+0x2d0>)
 800114a:	685a      	ldr	r2, [r3, #4]
 800114c:	4918      	ldr	r1, [pc, #96]	@ (80011b0 <HAL_GPIO_Init+0x2d0>)
 800114e:	69bb      	ldr	r3, [r7, #24]
 8001150:	4313      	orrs	r3, r2
 8001152:	604b      	str	r3, [r1, #4]
 8001154:	e006      	b.n	8001164 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001156:	4b16      	ldr	r3, [pc, #88]	@ (80011b0 <HAL_GPIO_Init+0x2d0>)
 8001158:	685a      	ldr	r2, [r3, #4]
 800115a:	69bb      	ldr	r3, [r7, #24]
 800115c:	43db      	mvns	r3, r3
 800115e:	4914      	ldr	r1, [pc, #80]	@ (80011b0 <HAL_GPIO_Init+0x2d0>)
 8001160:	4013      	ands	r3, r2
 8001162:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800116c:	2b00      	cmp	r3, #0
 800116e:	d021      	beq.n	80011b4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001170:	4b0f      	ldr	r3, [pc, #60]	@ (80011b0 <HAL_GPIO_Init+0x2d0>)
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	490e      	ldr	r1, [pc, #56]	@ (80011b0 <HAL_GPIO_Init+0x2d0>)
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	4313      	orrs	r3, r2
 800117a:	600b      	str	r3, [r1, #0]
 800117c:	e021      	b.n	80011c2 <HAL_GPIO_Init+0x2e2>
 800117e:	bf00      	nop
 8001180:	10320000 	.word	0x10320000
 8001184:	10310000 	.word	0x10310000
 8001188:	10220000 	.word	0x10220000
 800118c:	10210000 	.word	0x10210000
 8001190:	10120000 	.word	0x10120000
 8001194:	10110000 	.word	0x10110000
 8001198:	40021000 	.word	0x40021000
 800119c:	40010000 	.word	0x40010000
 80011a0:	40010800 	.word	0x40010800
 80011a4:	40010c00 	.word	0x40010c00
 80011a8:	40011000 	.word	0x40011000
 80011ac:	40011400 	.word	0x40011400
 80011b0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80011b4:	4b0b      	ldr	r3, [pc, #44]	@ (80011e4 <HAL_GPIO_Init+0x304>)
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	43db      	mvns	r3, r3
 80011bc:	4909      	ldr	r1, [pc, #36]	@ (80011e4 <HAL_GPIO_Init+0x304>)
 80011be:	4013      	ands	r3, r2
 80011c0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80011c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011c4:	3301      	adds	r3, #1
 80011c6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011ce:	fa22 f303 	lsr.w	r3, r2, r3
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	f47f ae8e 	bne.w	8000ef4 <HAL_GPIO_Init+0x14>
  }
}
 80011d8:	bf00      	nop
 80011da:	bf00      	nop
 80011dc:	372c      	adds	r7, #44	@ 0x2c
 80011de:	46bd      	mov	sp, r7
 80011e0:	bc80      	pop	{r7}
 80011e2:	4770      	bx	lr
 80011e4:	40010400 	.word	0x40010400

080011e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	460b      	mov	r3, r1
 80011f2:	807b      	strh	r3, [r7, #2]
 80011f4:	4613      	mov	r3, r2
 80011f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011f8:	787b      	ldrb	r3, [r7, #1]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d003      	beq.n	8001206 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011fe:	887a      	ldrh	r2, [r7, #2]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001204:	e003      	b.n	800120e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001206:	887b      	ldrh	r3, [r7, #2]
 8001208:	041a      	lsls	r2, r3, #16
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	611a      	str	r2, [r3, #16]
}
 800120e:	bf00      	nop
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	bc80      	pop	{r7}
 8001216:	4770      	bx	lr

08001218 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b086      	sub	sp, #24
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d101      	bne.n	800122a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e272      	b.n	8001710 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	2b00      	cmp	r3, #0
 8001234:	f000 8087 	beq.w	8001346 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001238:	4b92      	ldr	r3, [pc, #584]	@ (8001484 <HAL_RCC_OscConfig+0x26c>)
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f003 030c 	and.w	r3, r3, #12
 8001240:	2b04      	cmp	r3, #4
 8001242:	d00c      	beq.n	800125e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001244:	4b8f      	ldr	r3, [pc, #572]	@ (8001484 <HAL_RCC_OscConfig+0x26c>)
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f003 030c 	and.w	r3, r3, #12
 800124c:	2b08      	cmp	r3, #8
 800124e:	d112      	bne.n	8001276 <HAL_RCC_OscConfig+0x5e>
 8001250:	4b8c      	ldr	r3, [pc, #560]	@ (8001484 <HAL_RCC_OscConfig+0x26c>)
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001258:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800125c:	d10b      	bne.n	8001276 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800125e:	4b89      	ldr	r3, [pc, #548]	@ (8001484 <HAL_RCC_OscConfig+0x26c>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d06c      	beq.n	8001344 <HAL_RCC_OscConfig+0x12c>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d168      	bne.n	8001344 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e24c      	b.n	8001710 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800127e:	d106      	bne.n	800128e <HAL_RCC_OscConfig+0x76>
 8001280:	4b80      	ldr	r3, [pc, #512]	@ (8001484 <HAL_RCC_OscConfig+0x26c>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a7f      	ldr	r2, [pc, #508]	@ (8001484 <HAL_RCC_OscConfig+0x26c>)
 8001286:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800128a:	6013      	str	r3, [r2, #0]
 800128c:	e02e      	b.n	80012ec <HAL_RCC_OscConfig+0xd4>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d10c      	bne.n	80012b0 <HAL_RCC_OscConfig+0x98>
 8001296:	4b7b      	ldr	r3, [pc, #492]	@ (8001484 <HAL_RCC_OscConfig+0x26c>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a7a      	ldr	r2, [pc, #488]	@ (8001484 <HAL_RCC_OscConfig+0x26c>)
 800129c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012a0:	6013      	str	r3, [r2, #0]
 80012a2:	4b78      	ldr	r3, [pc, #480]	@ (8001484 <HAL_RCC_OscConfig+0x26c>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a77      	ldr	r2, [pc, #476]	@ (8001484 <HAL_RCC_OscConfig+0x26c>)
 80012a8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012ac:	6013      	str	r3, [r2, #0]
 80012ae:	e01d      	b.n	80012ec <HAL_RCC_OscConfig+0xd4>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80012b8:	d10c      	bne.n	80012d4 <HAL_RCC_OscConfig+0xbc>
 80012ba:	4b72      	ldr	r3, [pc, #456]	@ (8001484 <HAL_RCC_OscConfig+0x26c>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a71      	ldr	r2, [pc, #452]	@ (8001484 <HAL_RCC_OscConfig+0x26c>)
 80012c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012c4:	6013      	str	r3, [r2, #0]
 80012c6:	4b6f      	ldr	r3, [pc, #444]	@ (8001484 <HAL_RCC_OscConfig+0x26c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a6e      	ldr	r2, [pc, #440]	@ (8001484 <HAL_RCC_OscConfig+0x26c>)
 80012cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012d0:	6013      	str	r3, [r2, #0]
 80012d2:	e00b      	b.n	80012ec <HAL_RCC_OscConfig+0xd4>
 80012d4:	4b6b      	ldr	r3, [pc, #428]	@ (8001484 <HAL_RCC_OscConfig+0x26c>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a6a      	ldr	r2, [pc, #424]	@ (8001484 <HAL_RCC_OscConfig+0x26c>)
 80012da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012de:	6013      	str	r3, [r2, #0]
 80012e0:	4b68      	ldr	r3, [pc, #416]	@ (8001484 <HAL_RCC_OscConfig+0x26c>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a67      	ldr	r2, [pc, #412]	@ (8001484 <HAL_RCC_OscConfig+0x26c>)
 80012e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012ea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d013      	beq.n	800131c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f4:	f7ff fd06 	bl	8000d04 <HAL_GetTick>
 80012f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012fa:	e008      	b.n	800130e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012fc:	f7ff fd02 	bl	8000d04 <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	2b64      	cmp	r3, #100	@ 0x64
 8001308:	d901      	bls.n	800130e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800130a:	2303      	movs	r3, #3
 800130c:	e200      	b.n	8001710 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800130e:	4b5d      	ldr	r3, [pc, #372]	@ (8001484 <HAL_RCC_OscConfig+0x26c>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d0f0      	beq.n	80012fc <HAL_RCC_OscConfig+0xe4>
 800131a:	e014      	b.n	8001346 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800131c:	f7ff fcf2 	bl	8000d04 <HAL_GetTick>
 8001320:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001322:	e008      	b.n	8001336 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001324:	f7ff fcee 	bl	8000d04 <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	2b64      	cmp	r3, #100	@ 0x64
 8001330:	d901      	bls.n	8001336 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e1ec      	b.n	8001710 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001336:	4b53      	ldr	r3, [pc, #332]	@ (8001484 <HAL_RCC_OscConfig+0x26c>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d1f0      	bne.n	8001324 <HAL_RCC_OscConfig+0x10c>
 8001342:	e000      	b.n	8001346 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001344:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0302 	and.w	r3, r3, #2
 800134e:	2b00      	cmp	r3, #0
 8001350:	d063      	beq.n	800141a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001352:	4b4c      	ldr	r3, [pc, #304]	@ (8001484 <HAL_RCC_OscConfig+0x26c>)
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f003 030c 	and.w	r3, r3, #12
 800135a:	2b00      	cmp	r3, #0
 800135c:	d00b      	beq.n	8001376 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800135e:	4b49      	ldr	r3, [pc, #292]	@ (8001484 <HAL_RCC_OscConfig+0x26c>)
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f003 030c 	and.w	r3, r3, #12
 8001366:	2b08      	cmp	r3, #8
 8001368:	d11c      	bne.n	80013a4 <HAL_RCC_OscConfig+0x18c>
 800136a:	4b46      	ldr	r3, [pc, #280]	@ (8001484 <HAL_RCC_OscConfig+0x26c>)
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d116      	bne.n	80013a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001376:	4b43      	ldr	r3, [pc, #268]	@ (8001484 <HAL_RCC_OscConfig+0x26c>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 0302 	and.w	r3, r3, #2
 800137e:	2b00      	cmp	r3, #0
 8001380:	d005      	beq.n	800138e <HAL_RCC_OscConfig+0x176>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	691b      	ldr	r3, [r3, #16]
 8001386:	2b01      	cmp	r3, #1
 8001388:	d001      	beq.n	800138e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e1c0      	b.n	8001710 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800138e:	4b3d      	ldr	r3, [pc, #244]	@ (8001484 <HAL_RCC_OscConfig+0x26c>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	695b      	ldr	r3, [r3, #20]
 800139a:	00db      	lsls	r3, r3, #3
 800139c:	4939      	ldr	r1, [pc, #228]	@ (8001484 <HAL_RCC_OscConfig+0x26c>)
 800139e:	4313      	orrs	r3, r2
 80013a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013a2:	e03a      	b.n	800141a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	691b      	ldr	r3, [r3, #16]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d020      	beq.n	80013ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013ac:	4b36      	ldr	r3, [pc, #216]	@ (8001488 <HAL_RCC_OscConfig+0x270>)
 80013ae:	2201      	movs	r2, #1
 80013b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b2:	f7ff fca7 	bl	8000d04 <HAL_GetTick>
 80013b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013b8:	e008      	b.n	80013cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013ba:	f7ff fca3 	bl	8000d04 <HAL_GetTick>
 80013be:	4602      	mov	r2, r0
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d901      	bls.n	80013cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80013c8:	2303      	movs	r3, #3
 80013ca:	e1a1      	b.n	8001710 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013cc:	4b2d      	ldr	r3, [pc, #180]	@ (8001484 <HAL_RCC_OscConfig+0x26c>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0302 	and.w	r3, r3, #2
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d0f0      	beq.n	80013ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013d8:	4b2a      	ldr	r3, [pc, #168]	@ (8001484 <HAL_RCC_OscConfig+0x26c>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	695b      	ldr	r3, [r3, #20]
 80013e4:	00db      	lsls	r3, r3, #3
 80013e6:	4927      	ldr	r1, [pc, #156]	@ (8001484 <HAL_RCC_OscConfig+0x26c>)
 80013e8:	4313      	orrs	r3, r2
 80013ea:	600b      	str	r3, [r1, #0]
 80013ec:	e015      	b.n	800141a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013ee:	4b26      	ldr	r3, [pc, #152]	@ (8001488 <HAL_RCC_OscConfig+0x270>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f4:	f7ff fc86 	bl	8000d04 <HAL_GetTick>
 80013f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013fa:	e008      	b.n	800140e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013fc:	f7ff fc82 	bl	8000d04 <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	2b02      	cmp	r3, #2
 8001408:	d901      	bls.n	800140e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800140a:	2303      	movs	r3, #3
 800140c:	e180      	b.n	8001710 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800140e:	4b1d      	ldr	r3, [pc, #116]	@ (8001484 <HAL_RCC_OscConfig+0x26c>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	2b00      	cmp	r3, #0
 8001418:	d1f0      	bne.n	80013fc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 0308 	and.w	r3, r3, #8
 8001422:	2b00      	cmp	r3, #0
 8001424:	d03a      	beq.n	800149c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	699b      	ldr	r3, [r3, #24]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d019      	beq.n	8001462 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800142e:	4b17      	ldr	r3, [pc, #92]	@ (800148c <HAL_RCC_OscConfig+0x274>)
 8001430:	2201      	movs	r2, #1
 8001432:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001434:	f7ff fc66 	bl	8000d04 <HAL_GetTick>
 8001438:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800143a:	e008      	b.n	800144e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800143c:	f7ff fc62 	bl	8000d04 <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	2b02      	cmp	r3, #2
 8001448:	d901      	bls.n	800144e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e160      	b.n	8001710 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800144e:	4b0d      	ldr	r3, [pc, #52]	@ (8001484 <HAL_RCC_OscConfig+0x26c>)
 8001450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001452:	f003 0302 	and.w	r3, r3, #2
 8001456:	2b00      	cmp	r3, #0
 8001458:	d0f0      	beq.n	800143c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800145a:	2001      	movs	r0, #1
 800145c:	f000 face 	bl	80019fc <RCC_Delay>
 8001460:	e01c      	b.n	800149c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001462:	4b0a      	ldr	r3, [pc, #40]	@ (800148c <HAL_RCC_OscConfig+0x274>)
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001468:	f7ff fc4c 	bl	8000d04 <HAL_GetTick>
 800146c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800146e:	e00f      	b.n	8001490 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001470:	f7ff fc48 	bl	8000d04 <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	2b02      	cmp	r3, #2
 800147c:	d908      	bls.n	8001490 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e146      	b.n	8001710 <HAL_RCC_OscConfig+0x4f8>
 8001482:	bf00      	nop
 8001484:	40021000 	.word	0x40021000
 8001488:	42420000 	.word	0x42420000
 800148c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001490:	4b92      	ldr	r3, [pc, #584]	@ (80016dc <HAL_RCC_OscConfig+0x4c4>)
 8001492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001494:	f003 0302 	and.w	r3, r3, #2
 8001498:	2b00      	cmp	r3, #0
 800149a:	d1e9      	bne.n	8001470 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 0304 	and.w	r3, r3, #4
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	f000 80a6 	beq.w	80015f6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014aa:	2300      	movs	r3, #0
 80014ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014ae:	4b8b      	ldr	r3, [pc, #556]	@ (80016dc <HAL_RCC_OscConfig+0x4c4>)
 80014b0:	69db      	ldr	r3, [r3, #28]
 80014b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d10d      	bne.n	80014d6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014ba:	4b88      	ldr	r3, [pc, #544]	@ (80016dc <HAL_RCC_OscConfig+0x4c4>)
 80014bc:	69db      	ldr	r3, [r3, #28]
 80014be:	4a87      	ldr	r2, [pc, #540]	@ (80016dc <HAL_RCC_OscConfig+0x4c4>)
 80014c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014c4:	61d3      	str	r3, [r2, #28]
 80014c6:	4b85      	ldr	r3, [pc, #532]	@ (80016dc <HAL_RCC_OscConfig+0x4c4>)
 80014c8:	69db      	ldr	r3, [r3, #28]
 80014ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014ce:	60bb      	str	r3, [r7, #8]
 80014d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014d2:	2301      	movs	r3, #1
 80014d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014d6:	4b82      	ldr	r3, [pc, #520]	@ (80016e0 <HAL_RCC_OscConfig+0x4c8>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d118      	bne.n	8001514 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014e2:	4b7f      	ldr	r3, [pc, #508]	@ (80016e0 <HAL_RCC_OscConfig+0x4c8>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a7e      	ldr	r2, [pc, #504]	@ (80016e0 <HAL_RCC_OscConfig+0x4c8>)
 80014e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014ee:	f7ff fc09 	bl	8000d04 <HAL_GetTick>
 80014f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014f4:	e008      	b.n	8001508 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014f6:	f7ff fc05 	bl	8000d04 <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	2b64      	cmp	r3, #100	@ 0x64
 8001502:	d901      	bls.n	8001508 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001504:	2303      	movs	r3, #3
 8001506:	e103      	b.n	8001710 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001508:	4b75      	ldr	r3, [pc, #468]	@ (80016e0 <HAL_RCC_OscConfig+0x4c8>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001510:	2b00      	cmp	r3, #0
 8001512:	d0f0      	beq.n	80014f6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	2b01      	cmp	r3, #1
 800151a:	d106      	bne.n	800152a <HAL_RCC_OscConfig+0x312>
 800151c:	4b6f      	ldr	r3, [pc, #444]	@ (80016dc <HAL_RCC_OscConfig+0x4c4>)
 800151e:	6a1b      	ldr	r3, [r3, #32]
 8001520:	4a6e      	ldr	r2, [pc, #440]	@ (80016dc <HAL_RCC_OscConfig+0x4c4>)
 8001522:	f043 0301 	orr.w	r3, r3, #1
 8001526:	6213      	str	r3, [r2, #32]
 8001528:	e02d      	b.n	8001586 <HAL_RCC_OscConfig+0x36e>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	68db      	ldr	r3, [r3, #12]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d10c      	bne.n	800154c <HAL_RCC_OscConfig+0x334>
 8001532:	4b6a      	ldr	r3, [pc, #424]	@ (80016dc <HAL_RCC_OscConfig+0x4c4>)
 8001534:	6a1b      	ldr	r3, [r3, #32]
 8001536:	4a69      	ldr	r2, [pc, #420]	@ (80016dc <HAL_RCC_OscConfig+0x4c4>)
 8001538:	f023 0301 	bic.w	r3, r3, #1
 800153c:	6213      	str	r3, [r2, #32]
 800153e:	4b67      	ldr	r3, [pc, #412]	@ (80016dc <HAL_RCC_OscConfig+0x4c4>)
 8001540:	6a1b      	ldr	r3, [r3, #32]
 8001542:	4a66      	ldr	r2, [pc, #408]	@ (80016dc <HAL_RCC_OscConfig+0x4c4>)
 8001544:	f023 0304 	bic.w	r3, r3, #4
 8001548:	6213      	str	r3, [r2, #32]
 800154a:	e01c      	b.n	8001586 <HAL_RCC_OscConfig+0x36e>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	2b05      	cmp	r3, #5
 8001552:	d10c      	bne.n	800156e <HAL_RCC_OscConfig+0x356>
 8001554:	4b61      	ldr	r3, [pc, #388]	@ (80016dc <HAL_RCC_OscConfig+0x4c4>)
 8001556:	6a1b      	ldr	r3, [r3, #32]
 8001558:	4a60      	ldr	r2, [pc, #384]	@ (80016dc <HAL_RCC_OscConfig+0x4c4>)
 800155a:	f043 0304 	orr.w	r3, r3, #4
 800155e:	6213      	str	r3, [r2, #32]
 8001560:	4b5e      	ldr	r3, [pc, #376]	@ (80016dc <HAL_RCC_OscConfig+0x4c4>)
 8001562:	6a1b      	ldr	r3, [r3, #32]
 8001564:	4a5d      	ldr	r2, [pc, #372]	@ (80016dc <HAL_RCC_OscConfig+0x4c4>)
 8001566:	f043 0301 	orr.w	r3, r3, #1
 800156a:	6213      	str	r3, [r2, #32]
 800156c:	e00b      	b.n	8001586 <HAL_RCC_OscConfig+0x36e>
 800156e:	4b5b      	ldr	r3, [pc, #364]	@ (80016dc <HAL_RCC_OscConfig+0x4c4>)
 8001570:	6a1b      	ldr	r3, [r3, #32]
 8001572:	4a5a      	ldr	r2, [pc, #360]	@ (80016dc <HAL_RCC_OscConfig+0x4c4>)
 8001574:	f023 0301 	bic.w	r3, r3, #1
 8001578:	6213      	str	r3, [r2, #32]
 800157a:	4b58      	ldr	r3, [pc, #352]	@ (80016dc <HAL_RCC_OscConfig+0x4c4>)
 800157c:	6a1b      	ldr	r3, [r3, #32]
 800157e:	4a57      	ldr	r2, [pc, #348]	@ (80016dc <HAL_RCC_OscConfig+0x4c4>)
 8001580:	f023 0304 	bic.w	r3, r3, #4
 8001584:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	68db      	ldr	r3, [r3, #12]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d015      	beq.n	80015ba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800158e:	f7ff fbb9 	bl	8000d04 <HAL_GetTick>
 8001592:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001594:	e00a      	b.n	80015ac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001596:	f7ff fbb5 	bl	8000d04 <HAL_GetTick>
 800159a:	4602      	mov	r2, r0
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d901      	bls.n	80015ac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80015a8:	2303      	movs	r3, #3
 80015aa:	e0b1      	b.n	8001710 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015ac:	4b4b      	ldr	r3, [pc, #300]	@ (80016dc <HAL_RCC_OscConfig+0x4c4>)
 80015ae:	6a1b      	ldr	r3, [r3, #32]
 80015b0:	f003 0302 	and.w	r3, r3, #2
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d0ee      	beq.n	8001596 <HAL_RCC_OscConfig+0x37e>
 80015b8:	e014      	b.n	80015e4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ba:	f7ff fba3 	bl	8000d04 <HAL_GetTick>
 80015be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015c0:	e00a      	b.n	80015d8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015c2:	f7ff fb9f 	bl	8000d04 <HAL_GetTick>
 80015c6:	4602      	mov	r2, r0
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d901      	bls.n	80015d8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e09b      	b.n	8001710 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015d8:	4b40      	ldr	r3, [pc, #256]	@ (80016dc <HAL_RCC_OscConfig+0x4c4>)
 80015da:	6a1b      	ldr	r3, [r3, #32]
 80015dc:	f003 0302 	and.w	r3, r3, #2
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d1ee      	bne.n	80015c2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80015e4:	7dfb      	ldrb	r3, [r7, #23]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d105      	bne.n	80015f6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015ea:	4b3c      	ldr	r3, [pc, #240]	@ (80016dc <HAL_RCC_OscConfig+0x4c4>)
 80015ec:	69db      	ldr	r3, [r3, #28]
 80015ee:	4a3b      	ldr	r2, [pc, #236]	@ (80016dc <HAL_RCC_OscConfig+0x4c4>)
 80015f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80015f4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	69db      	ldr	r3, [r3, #28]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	f000 8087 	beq.w	800170e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001600:	4b36      	ldr	r3, [pc, #216]	@ (80016dc <HAL_RCC_OscConfig+0x4c4>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f003 030c 	and.w	r3, r3, #12
 8001608:	2b08      	cmp	r3, #8
 800160a:	d061      	beq.n	80016d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	69db      	ldr	r3, [r3, #28]
 8001610:	2b02      	cmp	r3, #2
 8001612:	d146      	bne.n	80016a2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001614:	4b33      	ldr	r3, [pc, #204]	@ (80016e4 <HAL_RCC_OscConfig+0x4cc>)
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800161a:	f7ff fb73 	bl	8000d04 <HAL_GetTick>
 800161e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001620:	e008      	b.n	8001634 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001622:	f7ff fb6f 	bl	8000d04 <HAL_GetTick>
 8001626:	4602      	mov	r2, r0
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	2b02      	cmp	r3, #2
 800162e:	d901      	bls.n	8001634 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e06d      	b.n	8001710 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001634:	4b29      	ldr	r3, [pc, #164]	@ (80016dc <HAL_RCC_OscConfig+0x4c4>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d1f0      	bne.n	8001622 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6a1b      	ldr	r3, [r3, #32]
 8001644:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001648:	d108      	bne.n	800165c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800164a:	4b24      	ldr	r3, [pc, #144]	@ (80016dc <HAL_RCC_OscConfig+0x4c4>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	4921      	ldr	r1, [pc, #132]	@ (80016dc <HAL_RCC_OscConfig+0x4c4>)
 8001658:	4313      	orrs	r3, r2
 800165a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800165c:	4b1f      	ldr	r3, [pc, #124]	@ (80016dc <HAL_RCC_OscConfig+0x4c4>)
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6a19      	ldr	r1, [r3, #32]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800166c:	430b      	orrs	r3, r1
 800166e:	491b      	ldr	r1, [pc, #108]	@ (80016dc <HAL_RCC_OscConfig+0x4c4>)
 8001670:	4313      	orrs	r3, r2
 8001672:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001674:	4b1b      	ldr	r3, [pc, #108]	@ (80016e4 <HAL_RCC_OscConfig+0x4cc>)
 8001676:	2201      	movs	r2, #1
 8001678:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800167a:	f7ff fb43 	bl	8000d04 <HAL_GetTick>
 800167e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001680:	e008      	b.n	8001694 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001682:	f7ff fb3f 	bl	8000d04 <HAL_GetTick>
 8001686:	4602      	mov	r2, r0
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	2b02      	cmp	r3, #2
 800168e:	d901      	bls.n	8001694 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001690:	2303      	movs	r3, #3
 8001692:	e03d      	b.n	8001710 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001694:	4b11      	ldr	r3, [pc, #68]	@ (80016dc <HAL_RCC_OscConfig+0x4c4>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800169c:	2b00      	cmp	r3, #0
 800169e:	d0f0      	beq.n	8001682 <HAL_RCC_OscConfig+0x46a>
 80016a0:	e035      	b.n	800170e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016a2:	4b10      	ldr	r3, [pc, #64]	@ (80016e4 <HAL_RCC_OscConfig+0x4cc>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a8:	f7ff fb2c 	bl	8000d04 <HAL_GetTick>
 80016ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016ae:	e008      	b.n	80016c2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016b0:	f7ff fb28 	bl	8000d04 <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d901      	bls.n	80016c2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e026      	b.n	8001710 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016c2:	4b06      	ldr	r3, [pc, #24]	@ (80016dc <HAL_RCC_OscConfig+0x4c4>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d1f0      	bne.n	80016b0 <HAL_RCC_OscConfig+0x498>
 80016ce:	e01e      	b.n	800170e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	69db      	ldr	r3, [r3, #28]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d107      	bne.n	80016e8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e019      	b.n	8001710 <HAL_RCC_OscConfig+0x4f8>
 80016dc:	40021000 	.word	0x40021000
 80016e0:	40007000 	.word	0x40007000
 80016e4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80016e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001718 <HAL_RCC_OscConfig+0x500>)
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6a1b      	ldr	r3, [r3, #32]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d106      	bne.n	800170a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001706:	429a      	cmp	r2, r3
 8001708:	d001      	beq.n	800170e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e000      	b.n	8001710 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800170e:	2300      	movs	r3, #0
}
 8001710:	4618      	mov	r0, r3
 8001712:	3718      	adds	r7, #24
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	40021000 	.word	0x40021000

0800171c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d101      	bne.n	8001730 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e0d0      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001730:	4b6a      	ldr	r3, [pc, #424]	@ (80018dc <HAL_RCC_ClockConfig+0x1c0>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0307 	and.w	r3, r3, #7
 8001738:	683a      	ldr	r2, [r7, #0]
 800173a:	429a      	cmp	r2, r3
 800173c:	d910      	bls.n	8001760 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800173e:	4b67      	ldr	r3, [pc, #412]	@ (80018dc <HAL_RCC_ClockConfig+0x1c0>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f023 0207 	bic.w	r2, r3, #7
 8001746:	4965      	ldr	r1, [pc, #404]	@ (80018dc <HAL_RCC_ClockConfig+0x1c0>)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	4313      	orrs	r3, r2
 800174c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800174e:	4b63      	ldr	r3, [pc, #396]	@ (80018dc <HAL_RCC_ClockConfig+0x1c0>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0307 	and.w	r3, r3, #7
 8001756:	683a      	ldr	r2, [r7, #0]
 8001758:	429a      	cmp	r2, r3
 800175a:	d001      	beq.n	8001760 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e0b8      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0302 	and.w	r3, r3, #2
 8001768:	2b00      	cmp	r3, #0
 800176a:	d020      	beq.n	80017ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0304 	and.w	r3, r3, #4
 8001774:	2b00      	cmp	r3, #0
 8001776:	d005      	beq.n	8001784 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001778:	4b59      	ldr	r3, [pc, #356]	@ (80018e0 <HAL_RCC_ClockConfig+0x1c4>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	4a58      	ldr	r2, [pc, #352]	@ (80018e0 <HAL_RCC_ClockConfig+0x1c4>)
 800177e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001782:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0308 	and.w	r3, r3, #8
 800178c:	2b00      	cmp	r3, #0
 800178e:	d005      	beq.n	800179c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001790:	4b53      	ldr	r3, [pc, #332]	@ (80018e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	4a52      	ldr	r2, [pc, #328]	@ (80018e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001796:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800179a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800179c:	4b50      	ldr	r3, [pc, #320]	@ (80018e0 <HAL_RCC_ClockConfig+0x1c4>)
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	494d      	ldr	r1, [pc, #308]	@ (80018e0 <HAL_RCC_ClockConfig+0x1c4>)
 80017aa:	4313      	orrs	r3, r2
 80017ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d040      	beq.n	800183c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d107      	bne.n	80017d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017c2:	4b47      	ldr	r3, [pc, #284]	@ (80018e0 <HAL_RCC_ClockConfig+0x1c4>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d115      	bne.n	80017fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e07f      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d107      	bne.n	80017ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017da:	4b41      	ldr	r3, [pc, #260]	@ (80018e0 <HAL_RCC_ClockConfig+0x1c4>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d109      	bne.n	80017fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e073      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ea:	4b3d      	ldr	r3, [pc, #244]	@ (80018e0 <HAL_RCC_ClockConfig+0x1c4>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d101      	bne.n	80017fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e06b      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017fa:	4b39      	ldr	r3, [pc, #228]	@ (80018e0 <HAL_RCC_ClockConfig+0x1c4>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f023 0203 	bic.w	r2, r3, #3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	4936      	ldr	r1, [pc, #216]	@ (80018e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001808:	4313      	orrs	r3, r2
 800180a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800180c:	f7ff fa7a 	bl	8000d04 <HAL_GetTick>
 8001810:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001812:	e00a      	b.n	800182a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001814:	f7ff fa76 	bl	8000d04 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001822:	4293      	cmp	r3, r2
 8001824:	d901      	bls.n	800182a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e053      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800182a:	4b2d      	ldr	r3, [pc, #180]	@ (80018e0 <HAL_RCC_ClockConfig+0x1c4>)
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f003 020c 	and.w	r2, r3, #12
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	429a      	cmp	r2, r3
 800183a:	d1eb      	bne.n	8001814 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800183c:	4b27      	ldr	r3, [pc, #156]	@ (80018dc <HAL_RCC_ClockConfig+0x1c0>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0307 	and.w	r3, r3, #7
 8001844:	683a      	ldr	r2, [r7, #0]
 8001846:	429a      	cmp	r2, r3
 8001848:	d210      	bcs.n	800186c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800184a:	4b24      	ldr	r3, [pc, #144]	@ (80018dc <HAL_RCC_ClockConfig+0x1c0>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f023 0207 	bic.w	r2, r3, #7
 8001852:	4922      	ldr	r1, [pc, #136]	@ (80018dc <HAL_RCC_ClockConfig+0x1c0>)
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	4313      	orrs	r3, r2
 8001858:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800185a:	4b20      	ldr	r3, [pc, #128]	@ (80018dc <HAL_RCC_ClockConfig+0x1c0>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0307 	and.w	r3, r3, #7
 8001862:	683a      	ldr	r2, [r7, #0]
 8001864:	429a      	cmp	r2, r3
 8001866:	d001      	beq.n	800186c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e032      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0304 	and.w	r3, r3, #4
 8001874:	2b00      	cmp	r3, #0
 8001876:	d008      	beq.n	800188a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001878:	4b19      	ldr	r3, [pc, #100]	@ (80018e0 <HAL_RCC_ClockConfig+0x1c4>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	4916      	ldr	r1, [pc, #88]	@ (80018e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001886:	4313      	orrs	r3, r2
 8001888:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0308 	and.w	r3, r3, #8
 8001892:	2b00      	cmp	r3, #0
 8001894:	d009      	beq.n	80018aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001896:	4b12      	ldr	r3, [pc, #72]	@ (80018e0 <HAL_RCC_ClockConfig+0x1c4>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	691b      	ldr	r3, [r3, #16]
 80018a2:	00db      	lsls	r3, r3, #3
 80018a4:	490e      	ldr	r1, [pc, #56]	@ (80018e0 <HAL_RCC_ClockConfig+0x1c4>)
 80018a6:	4313      	orrs	r3, r2
 80018a8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018aa:	f000 f821 	bl	80018f0 <HAL_RCC_GetSysClockFreq>
 80018ae:	4602      	mov	r2, r0
 80018b0:	4b0b      	ldr	r3, [pc, #44]	@ (80018e0 <HAL_RCC_ClockConfig+0x1c4>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	091b      	lsrs	r3, r3, #4
 80018b6:	f003 030f 	and.w	r3, r3, #15
 80018ba:	490a      	ldr	r1, [pc, #40]	@ (80018e4 <HAL_RCC_ClockConfig+0x1c8>)
 80018bc:	5ccb      	ldrb	r3, [r1, r3]
 80018be:	fa22 f303 	lsr.w	r3, r2, r3
 80018c2:	4a09      	ldr	r2, [pc, #36]	@ (80018e8 <HAL_RCC_ClockConfig+0x1cc>)
 80018c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80018c6:	4b09      	ldr	r3, [pc, #36]	@ (80018ec <HAL_RCC_ClockConfig+0x1d0>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7ff f9d8 	bl	8000c80 <HAL_InitTick>

  return HAL_OK;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3710      	adds	r7, #16
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40022000 	.word	0x40022000
 80018e0:	40021000 	.word	0x40021000
 80018e4:	080034f4 	.word	0x080034f4
 80018e8:	20000000 	.word	0x20000000
 80018ec:	20000004 	.word	0x20000004

080018f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b087      	sub	sp, #28
 80018f4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80018f6:	2300      	movs	r3, #0
 80018f8:	60fb      	str	r3, [r7, #12]
 80018fa:	2300      	movs	r3, #0
 80018fc:	60bb      	str	r3, [r7, #8]
 80018fe:	2300      	movs	r3, #0
 8001900:	617b      	str	r3, [r7, #20]
 8001902:	2300      	movs	r3, #0
 8001904:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001906:	2300      	movs	r3, #0
 8001908:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800190a:	4b1e      	ldr	r3, [pc, #120]	@ (8001984 <HAL_RCC_GetSysClockFreq+0x94>)
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	f003 030c 	and.w	r3, r3, #12
 8001916:	2b04      	cmp	r3, #4
 8001918:	d002      	beq.n	8001920 <HAL_RCC_GetSysClockFreq+0x30>
 800191a:	2b08      	cmp	r3, #8
 800191c:	d003      	beq.n	8001926 <HAL_RCC_GetSysClockFreq+0x36>
 800191e:	e027      	b.n	8001970 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001920:	4b19      	ldr	r3, [pc, #100]	@ (8001988 <HAL_RCC_GetSysClockFreq+0x98>)
 8001922:	613b      	str	r3, [r7, #16]
      break;
 8001924:	e027      	b.n	8001976 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	0c9b      	lsrs	r3, r3, #18
 800192a:	f003 030f 	and.w	r3, r3, #15
 800192e:	4a17      	ldr	r2, [pc, #92]	@ (800198c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001930:	5cd3      	ldrb	r3, [r2, r3]
 8001932:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d010      	beq.n	8001960 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800193e:	4b11      	ldr	r3, [pc, #68]	@ (8001984 <HAL_RCC_GetSysClockFreq+0x94>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	0c5b      	lsrs	r3, r3, #17
 8001944:	f003 0301 	and.w	r3, r3, #1
 8001948:	4a11      	ldr	r2, [pc, #68]	@ (8001990 <HAL_RCC_GetSysClockFreq+0xa0>)
 800194a:	5cd3      	ldrb	r3, [r2, r3]
 800194c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a0d      	ldr	r2, [pc, #52]	@ (8001988 <HAL_RCC_GetSysClockFreq+0x98>)
 8001952:	fb03 f202 	mul.w	r2, r3, r2
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	fbb2 f3f3 	udiv	r3, r2, r3
 800195c:	617b      	str	r3, [r7, #20]
 800195e:	e004      	b.n	800196a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	4a0c      	ldr	r2, [pc, #48]	@ (8001994 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001964:	fb02 f303 	mul.w	r3, r2, r3
 8001968:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	613b      	str	r3, [r7, #16]
      break;
 800196e:	e002      	b.n	8001976 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001970:	4b05      	ldr	r3, [pc, #20]	@ (8001988 <HAL_RCC_GetSysClockFreq+0x98>)
 8001972:	613b      	str	r3, [r7, #16]
      break;
 8001974:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001976:	693b      	ldr	r3, [r7, #16]
}
 8001978:	4618      	mov	r0, r3
 800197a:	371c      	adds	r7, #28
 800197c:	46bd      	mov	sp, r7
 800197e:	bc80      	pop	{r7}
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	40021000 	.word	0x40021000
 8001988:	007a1200 	.word	0x007a1200
 800198c:	0800350c 	.word	0x0800350c
 8001990:	0800351c 	.word	0x0800351c
 8001994:	003d0900 	.word	0x003d0900

08001998 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800199c:	4b02      	ldr	r3, [pc, #8]	@ (80019a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800199e:	681b      	ldr	r3, [r3, #0]
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bc80      	pop	{r7}
 80019a6:	4770      	bx	lr
 80019a8:	20000000 	.word	0x20000000

080019ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80019b0:	f7ff fff2 	bl	8001998 <HAL_RCC_GetHCLKFreq>
 80019b4:	4602      	mov	r2, r0
 80019b6:	4b05      	ldr	r3, [pc, #20]	@ (80019cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	0a1b      	lsrs	r3, r3, #8
 80019bc:	f003 0307 	and.w	r3, r3, #7
 80019c0:	4903      	ldr	r1, [pc, #12]	@ (80019d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019c2:	5ccb      	ldrb	r3, [r1, r3]
 80019c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	40021000 	.word	0x40021000
 80019d0:	08003504 	.word	0x08003504

080019d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80019d8:	f7ff ffde 	bl	8001998 <HAL_RCC_GetHCLKFreq>
 80019dc:	4602      	mov	r2, r0
 80019de:	4b05      	ldr	r3, [pc, #20]	@ (80019f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	0adb      	lsrs	r3, r3, #11
 80019e4:	f003 0307 	and.w	r3, r3, #7
 80019e8:	4903      	ldr	r1, [pc, #12]	@ (80019f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019ea:	5ccb      	ldrb	r3, [r1, r3]
 80019ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	40021000 	.word	0x40021000
 80019f8:	08003504 	.word	0x08003504

080019fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b085      	sub	sp, #20
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a04:	4b0a      	ldr	r3, [pc, #40]	@ (8001a30 <RCC_Delay+0x34>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a0a      	ldr	r2, [pc, #40]	@ (8001a34 <RCC_Delay+0x38>)
 8001a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a0e:	0a5b      	lsrs	r3, r3, #9
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	fb02 f303 	mul.w	r3, r2, r3
 8001a16:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001a18:	bf00      	nop
  }
  while (Delay --);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	1e5a      	subs	r2, r3, #1
 8001a1e:	60fa      	str	r2, [r7, #12]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d1f9      	bne.n	8001a18 <RCC_Delay+0x1c>
}
 8001a24:	bf00      	nop
 8001a26:	bf00      	nop
 8001a28:	3714      	adds	r7, #20
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bc80      	pop	{r7}
 8001a2e:	4770      	bx	lr
 8001a30:	20000000 	.word	0x20000000
 8001a34:	10624dd3 	.word	0x10624dd3

08001a38 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d101      	bne.n	8001a4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e076      	b.n	8001b38 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d108      	bne.n	8001a64 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001a5a:	d009      	beq.n	8001a70 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	61da      	str	r2, [r3, #28]
 8001a62:	e005      	b.n	8001a70 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2200      	movs	r2, #0
 8001a68:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2200      	movs	r2, #0
 8001a74:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d106      	bne.n	8001a90 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2200      	movs	r2, #0
 8001a86:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f7fe fd62 	bl	8000554 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2202      	movs	r2, #2
 8001a94:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001aa6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001ab8:	431a      	orrs	r2, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ac2:	431a      	orrs	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	691b      	ldr	r3, [r3, #16]
 8001ac8:	f003 0302 	and.w	r3, r3, #2
 8001acc:	431a      	orrs	r2, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	695b      	ldr	r3, [r3, #20]
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	431a      	orrs	r2, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ae0:	431a      	orrs	r2, r3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	69db      	ldr	r3, [r3, #28]
 8001ae6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001aea:	431a      	orrs	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a1b      	ldr	r3, [r3, #32]
 8001af0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001af4:	ea42 0103 	orr.w	r1, r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001afc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	430a      	orrs	r2, r1
 8001b06:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	0c1a      	lsrs	r2, r3, #16
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f002 0204 	and.w	r2, r2, #4
 8001b16:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	69da      	ldr	r2, [r3, #28]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b26:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2201      	movs	r2, #1
 8001b32:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001b36:	2300      	movs	r3, #0
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3708      	adds	r7, #8
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b088      	sub	sp, #32
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	60f8      	str	r0, [r7, #12]
 8001b48:	60b9      	str	r1, [r7, #8]
 8001b4a:	603b      	str	r3, [r7, #0]
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001b50:	f7ff f8d8 	bl	8000d04 <HAL_GetTick>
 8001b54:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8001b56:	88fb      	ldrh	r3, [r7, #6]
 8001b58:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d001      	beq.n	8001b6a <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8001b66:	2302      	movs	r3, #2
 8001b68:	e12a      	b.n	8001dc0 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d002      	beq.n	8001b76 <HAL_SPI_Transmit+0x36>
 8001b70:	88fb      	ldrh	r3, [r7, #6]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d101      	bne.n	8001b7a <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e122      	b.n	8001dc0 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d101      	bne.n	8001b88 <HAL_SPI_Transmit+0x48>
 8001b84:	2302      	movs	r3, #2
 8001b86:	e11b      	b.n	8001dc0 <HAL_SPI_Transmit+0x280>
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2203      	movs	r2, #3
 8001b94:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	68ba      	ldr	r2, [r7, #8]
 8001ba2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	88fa      	ldrh	r2, [r7, #6]
 8001ba8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	88fa      	ldrh	r2, [r7, #6]
 8001bae:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001bd6:	d10f      	bne.n	8001bf8 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001be6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001bf6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c02:	2b40      	cmp	r3, #64	@ 0x40
 8001c04:	d007      	beq.n	8001c16 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001c14:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001c1e:	d152      	bne.n	8001cc6 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d002      	beq.n	8001c2e <HAL_SPI_Transmit+0xee>
 8001c28:	8b7b      	ldrh	r3, [r7, #26]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d145      	bne.n	8001cba <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c32:	881a      	ldrh	r2, [r3, #0]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c3e:	1c9a      	adds	r2, r3, #2
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	b29a      	uxth	r2, r3
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001c52:	e032      	b.n	8001cba <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d112      	bne.n	8001c88 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c66:	881a      	ldrh	r2, [r3, #0]
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c72:	1c9a      	adds	r2, r3, #2
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	b29a      	uxth	r2, r3
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001c86:	e018      	b.n	8001cba <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001c88:	f7ff f83c 	bl	8000d04 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	683a      	ldr	r2, [r7, #0]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d803      	bhi.n	8001ca0 <HAL_SPI_Transmit+0x160>
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c9e:	d102      	bne.n	8001ca6 <HAL_SPI_Transmit+0x166>
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d109      	bne.n	8001cba <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2201      	movs	r2, #1
 8001caa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e082      	b.n	8001dc0 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d1c7      	bne.n	8001c54 <HAL_SPI_Transmit+0x114>
 8001cc4:	e053      	b.n	8001d6e <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d002      	beq.n	8001cd4 <HAL_SPI_Transmit+0x194>
 8001cce:	8b7b      	ldrh	r3, [r7, #26]
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d147      	bne.n	8001d64 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	330c      	adds	r3, #12
 8001cde:	7812      	ldrb	r2, [r2, #0]
 8001ce0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce6:	1c5a      	adds	r2, r3, #1
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	b29a      	uxth	r2, r3
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001cfa:	e033      	b.n	8001d64 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d113      	bne.n	8001d32 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	330c      	adds	r3, #12
 8001d14:	7812      	ldrb	r2, [r2, #0]
 8001d16:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d1c:	1c5a      	adds	r2, r3, #1
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	3b01      	subs	r3, #1
 8001d2a:	b29a      	uxth	r2, r3
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8001d30:	e018      	b.n	8001d64 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001d32:	f7fe ffe7 	bl	8000d04 <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	683a      	ldr	r2, [r7, #0]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d803      	bhi.n	8001d4a <HAL_SPI_Transmit+0x20a>
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d48:	d102      	bne.n	8001d50 <HAL_SPI_Transmit+0x210>
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d109      	bne.n	8001d64 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001d60:	2303      	movs	r3, #3
 8001d62:	e02d      	b.n	8001dc0 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d1c6      	bne.n	8001cfc <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001d6e:	69fa      	ldr	r2, [r7, #28]
 8001d70:	6839      	ldr	r1, [r7, #0]
 8001d72:	68f8      	ldr	r0, [r7, #12]
 8001d74:	f000 fbc4 	bl	8002500 <SPI_EndRxTxTransaction>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d002      	beq.n	8001d84 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2220      	movs	r2, #32
 8001d82:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d10a      	bne.n	8001da2 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	617b      	str	r3, [r7, #20]
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	617b      	str	r3, [r7, #20]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	617b      	str	r3, [r7, #20]
 8001da0:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2201      	movs	r2, #1
 8001da6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2200      	movs	r2, #0
 8001dae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e000      	b.n	8001dc0 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8001dbe:	2300      	movs	r3, #0
  }
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3720      	adds	r7, #32
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b088      	sub	sp, #32
 8001dcc:	af02      	add	r7, sp, #8
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	60b9      	str	r1, [r7, #8]
 8001dd2:	603b      	str	r3, [r7, #0]
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d001      	beq.n	8001de8 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8001de4:	2302      	movs	r3, #2
 8001de6:	e104      	b.n	8001ff2 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001df0:	d112      	bne.n	8001e18 <HAL_SPI_Receive+0x50>
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d10e      	bne.n	8001e18 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2204      	movs	r2, #4
 8001dfe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001e02:	88fa      	ldrh	r2, [r7, #6]
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	9300      	str	r3, [sp, #0]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	68ba      	ldr	r2, [r7, #8]
 8001e0c:	68b9      	ldr	r1, [r7, #8]
 8001e0e:	68f8      	ldr	r0, [r7, #12]
 8001e10:	f000 f8f3 	bl	8001ffa <HAL_SPI_TransmitReceive>
 8001e14:	4603      	mov	r3, r0
 8001e16:	e0ec      	b.n	8001ff2 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001e18:	f7fe ff74 	bl	8000d04 <HAL_GetTick>
 8001e1c:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d002      	beq.n	8001e2a <HAL_SPI_Receive+0x62>
 8001e24:	88fb      	ldrh	r3, [r7, #6]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d101      	bne.n	8001e2e <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e0e1      	b.n	8001ff2 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d101      	bne.n	8001e3c <HAL_SPI_Receive+0x74>
 8001e38:	2302      	movs	r3, #2
 8001e3a:	e0da      	b.n	8001ff2 <HAL_SPI_Receive+0x22a>
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2204      	movs	r2, #4
 8001e48:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	68ba      	ldr	r2, [r7, #8]
 8001e56:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	88fa      	ldrh	r2, [r7, #6]
 8001e5c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	88fa      	ldrh	r2, [r7, #6]
 8001e62:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2200      	movs	r2, #0
 8001e68:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2200      	movs	r2, #0
 8001e74:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001e8a:	d10f      	bne.n	8001eac <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001e9a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001eaa:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001eb6:	2b40      	cmp	r3, #64	@ 0x40
 8001eb8:	d007      	beq.n	8001eca <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001ec8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d170      	bne.n	8001fb4 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001ed2:	e035      	b.n	8001f40 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d115      	bne.n	8001f0e <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f103 020c 	add.w	r2, r3, #12
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001eee:	7812      	ldrb	r2, [r2, #0]
 8001ef0:	b2d2      	uxtb	r2, r2
 8001ef2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ef8:	1c5a      	adds	r2, r3, #1
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	3b01      	subs	r3, #1
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001f0c:	e018      	b.n	8001f40 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f0e:	f7fe fef9 	bl	8000d04 <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	683a      	ldr	r2, [r7, #0]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d803      	bhi.n	8001f26 <HAL_SPI_Receive+0x15e>
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f24:	d102      	bne.n	8001f2c <HAL_SPI_Receive+0x164>
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d109      	bne.n	8001f40 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2200      	movs	r2, #0
 8001f38:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e058      	b.n	8001ff2 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d1c4      	bne.n	8001ed4 <HAL_SPI_Receive+0x10c>
 8001f4a:	e038      	b.n	8001fbe <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d113      	bne.n	8001f82 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	68da      	ldr	r2, [r3, #12]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f64:	b292      	uxth	r2, r2
 8001f66:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f6c:	1c9a      	adds	r2, r3, #2
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	3b01      	subs	r3, #1
 8001f7a:	b29a      	uxth	r2, r3
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001f80:	e018      	b.n	8001fb4 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f82:	f7fe febf 	bl	8000d04 <HAL_GetTick>
 8001f86:	4602      	mov	r2, r0
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	683a      	ldr	r2, [r7, #0]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d803      	bhi.n	8001f9a <HAL_SPI_Receive+0x1d2>
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f98:	d102      	bne.n	8001fa0 <HAL_SPI_Receive+0x1d8>
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d109      	bne.n	8001fb4 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e01e      	b.n	8001ff2 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d1c6      	bne.n	8001f4c <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001fbe:	697a      	ldr	r2, [r7, #20]
 8001fc0:	6839      	ldr	r1, [r7, #0]
 8001fc2:	68f8      	ldr	r0, [r7, #12]
 8001fc4:	f000 fa4a 	bl	800245c <SPI_EndRxTransaction>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d002      	beq.n	8001fd4 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2220      	movs	r2, #32
 8001fd2:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e000      	b.n	8001ff2 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8001ff0:	2300      	movs	r3, #0
  }
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3718      	adds	r7, #24
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b08a      	sub	sp, #40	@ 0x28
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	60f8      	str	r0, [r7, #12]
 8002002:	60b9      	str	r1, [r7, #8]
 8002004:	607a      	str	r2, [r7, #4]
 8002006:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002008:	2301      	movs	r3, #1
 800200a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800200c:	f7fe fe7a 	bl	8000d04 <HAL_GetTick>
 8002010:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002018:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002020:	887b      	ldrh	r3, [r7, #2]
 8002022:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002024:	7ffb      	ldrb	r3, [r7, #31]
 8002026:	2b01      	cmp	r3, #1
 8002028:	d00c      	beq.n	8002044 <HAL_SPI_TransmitReceive+0x4a>
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002030:	d106      	bne.n	8002040 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d102      	bne.n	8002040 <HAL_SPI_TransmitReceive+0x46>
 800203a:	7ffb      	ldrb	r3, [r7, #31]
 800203c:	2b04      	cmp	r3, #4
 800203e:	d001      	beq.n	8002044 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8002040:	2302      	movs	r3, #2
 8002042:	e17f      	b.n	8002344 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d005      	beq.n	8002056 <HAL_SPI_TransmitReceive+0x5c>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d002      	beq.n	8002056 <HAL_SPI_TransmitReceive+0x5c>
 8002050:	887b      	ldrh	r3, [r7, #2]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d101      	bne.n	800205a <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e174      	b.n	8002344 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002060:	2b01      	cmp	r3, #1
 8002062:	d101      	bne.n	8002068 <HAL_SPI_TransmitReceive+0x6e>
 8002064:	2302      	movs	r3, #2
 8002066:	e16d      	b.n	8002344 <HAL_SPI_TransmitReceive+0x34a>
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2201      	movs	r2, #1
 800206c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002076:	b2db      	uxtb	r3, r3
 8002078:	2b04      	cmp	r3, #4
 800207a:	d003      	beq.n	8002084 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2205      	movs	r2, #5
 8002080:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2200      	movs	r2, #0
 8002088:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	887a      	ldrh	r2, [r7, #2]
 8002094:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	887a      	ldrh	r2, [r7, #2]
 800209a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	68ba      	ldr	r2, [r7, #8]
 80020a0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	887a      	ldrh	r2, [r7, #2]
 80020a6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	887a      	ldrh	r2, [r7, #2]
 80020ac:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2200      	movs	r2, #0
 80020b2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2200      	movs	r2, #0
 80020b8:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020c4:	2b40      	cmp	r3, #64	@ 0x40
 80020c6:	d007      	beq.n	80020d8 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80020d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80020e0:	d17e      	bne.n	80021e0 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d002      	beq.n	80020f0 <HAL_SPI_TransmitReceive+0xf6>
 80020ea:	8afb      	ldrh	r3, [r7, #22]
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d16c      	bne.n	80021ca <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020f4:	881a      	ldrh	r2, [r3, #0]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002100:	1c9a      	adds	r2, r3, #2
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800210a:	b29b      	uxth	r3, r3
 800210c:	3b01      	subs	r3, #1
 800210e:	b29a      	uxth	r2, r3
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002114:	e059      	b.n	80021ca <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	f003 0302 	and.w	r3, r3, #2
 8002120:	2b02      	cmp	r3, #2
 8002122:	d11b      	bne.n	800215c <HAL_SPI_TransmitReceive+0x162>
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002128:	b29b      	uxth	r3, r3
 800212a:	2b00      	cmp	r3, #0
 800212c:	d016      	beq.n	800215c <HAL_SPI_TransmitReceive+0x162>
 800212e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002130:	2b01      	cmp	r3, #1
 8002132:	d113      	bne.n	800215c <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002138:	881a      	ldrh	r2, [r3, #0]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002144:	1c9a      	adds	r2, r3, #2
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800214e:	b29b      	uxth	r3, r3
 8002150:	3b01      	subs	r3, #1
 8002152:	b29a      	uxth	r2, r3
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002158:	2300      	movs	r3, #0
 800215a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	2b01      	cmp	r3, #1
 8002168:	d119      	bne.n	800219e <HAL_SPI_TransmitReceive+0x1a4>
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800216e:	b29b      	uxth	r3, r3
 8002170:	2b00      	cmp	r3, #0
 8002172:	d014      	beq.n	800219e <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	68da      	ldr	r2, [r3, #12]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800217e:	b292      	uxth	r2, r2
 8002180:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002186:	1c9a      	adds	r2, r3, #2
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002190:	b29b      	uxth	r3, r3
 8002192:	3b01      	subs	r3, #1
 8002194:	b29a      	uxth	r2, r3
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800219a:	2301      	movs	r3, #1
 800219c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800219e:	f7fe fdb1 	bl	8000d04 <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	6a3b      	ldr	r3, [r7, #32]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d80d      	bhi.n	80021ca <HAL_SPI_TransmitReceive+0x1d0>
 80021ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021b4:	d009      	beq.n	80021ca <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2201      	movs	r2, #1
 80021ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2200      	movs	r2, #0
 80021c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e0bc      	b.n	8002344 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d1a0      	bne.n	8002116 <HAL_SPI_TransmitReceive+0x11c>
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80021d8:	b29b      	uxth	r3, r3
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d19b      	bne.n	8002116 <HAL_SPI_TransmitReceive+0x11c>
 80021de:	e082      	b.n	80022e6 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d002      	beq.n	80021ee <HAL_SPI_TransmitReceive+0x1f4>
 80021e8:	8afb      	ldrh	r3, [r7, #22]
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d171      	bne.n	80022d2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	330c      	adds	r3, #12
 80021f8:	7812      	ldrb	r2, [r2, #0]
 80021fa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002200:	1c5a      	adds	r2, r3, #1
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800220a:	b29b      	uxth	r3, r3
 800220c:	3b01      	subs	r3, #1
 800220e:	b29a      	uxth	r2, r3
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002214:	e05d      	b.n	80022d2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	2b02      	cmp	r3, #2
 8002222:	d11c      	bne.n	800225e <HAL_SPI_TransmitReceive+0x264>
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002228:	b29b      	uxth	r3, r3
 800222a:	2b00      	cmp	r3, #0
 800222c:	d017      	beq.n	800225e <HAL_SPI_TransmitReceive+0x264>
 800222e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002230:	2b01      	cmp	r3, #1
 8002232:	d114      	bne.n	800225e <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	330c      	adds	r3, #12
 800223e:	7812      	ldrb	r2, [r2, #0]
 8002240:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002246:	1c5a      	adds	r2, r3, #1
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002250:	b29b      	uxth	r3, r3
 8002252:	3b01      	subs	r3, #1
 8002254:	b29a      	uxth	r2, r3
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800225a:	2300      	movs	r3, #0
 800225c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f003 0301 	and.w	r3, r3, #1
 8002268:	2b01      	cmp	r3, #1
 800226a:	d119      	bne.n	80022a0 <HAL_SPI_TransmitReceive+0x2a6>
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002270:	b29b      	uxth	r3, r3
 8002272:	2b00      	cmp	r3, #0
 8002274:	d014      	beq.n	80022a0 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68da      	ldr	r2, [r3, #12]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002280:	b2d2      	uxtb	r2, r2
 8002282:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002288:	1c5a      	adds	r2, r3, #1
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002292:	b29b      	uxth	r3, r3
 8002294:	3b01      	subs	r3, #1
 8002296:	b29a      	uxth	r2, r3
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800229c:	2301      	movs	r3, #1
 800229e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80022a0:	f7fe fd30 	bl	8000d04 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	6a3b      	ldr	r3, [r7, #32]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d803      	bhi.n	80022b8 <HAL_SPI_TransmitReceive+0x2be>
 80022b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022b6:	d102      	bne.n	80022be <HAL_SPI_TransmitReceive+0x2c4>
 80022b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d109      	bne.n	80022d2 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2201      	movs	r2, #1
 80022c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e038      	b.n	8002344 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d19c      	bne.n	8002216 <HAL_SPI_TransmitReceive+0x21c>
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d197      	bne.n	8002216 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80022e6:	6a3a      	ldr	r2, [r7, #32]
 80022e8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80022ea:	68f8      	ldr	r0, [r7, #12]
 80022ec:	f000 f908 	bl	8002500 <SPI_EndRxTxTransaction>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d008      	beq.n	8002308 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2220      	movs	r2, #32
 80022fa:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2200      	movs	r2, #0
 8002300:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e01d      	b.n	8002344 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d10a      	bne.n	8002326 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002310:	2300      	movs	r3, #0
 8002312:	613b      	str	r3, [r7, #16]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	613b      	str	r3, [r7, #16]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	613b      	str	r3, [r7, #16]
 8002324:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2201      	movs	r2, #1
 800232a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2200      	movs	r2, #0
 8002332:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e000      	b.n	8002344 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8002342:	2300      	movs	r3, #0
  }
}
 8002344:	4618      	mov	r0, r3
 8002346:	3728      	adds	r7, #40	@ 0x28
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b088      	sub	sp, #32
 8002350:	af00      	add	r7, sp, #0
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	603b      	str	r3, [r7, #0]
 8002358:	4613      	mov	r3, r2
 800235a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800235c:	f7fe fcd2 	bl	8000d04 <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002364:	1a9b      	subs	r3, r3, r2
 8002366:	683a      	ldr	r2, [r7, #0]
 8002368:	4413      	add	r3, r2
 800236a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800236c:	f7fe fcca 	bl	8000d04 <HAL_GetTick>
 8002370:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002372:	4b39      	ldr	r3, [pc, #228]	@ (8002458 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	015b      	lsls	r3, r3, #5
 8002378:	0d1b      	lsrs	r3, r3, #20
 800237a:	69fa      	ldr	r2, [r7, #28]
 800237c:	fb02 f303 	mul.w	r3, r2, r3
 8002380:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002382:	e054      	b.n	800242e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800238a:	d050      	beq.n	800242e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800238c:	f7fe fcba 	bl	8000d04 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	69fa      	ldr	r2, [r7, #28]
 8002398:	429a      	cmp	r2, r3
 800239a:	d902      	bls.n	80023a2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d13d      	bne.n	800241e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	685a      	ldr	r2, [r3, #4]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80023b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80023ba:	d111      	bne.n	80023e0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80023c4:	d004      	beq.n	80023d0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023ce:	d107      	bne.n	80023e0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80023de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80023e8:	d10f      	bne.n	800240a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80023f8:	601a      	str	r2, [r3, #0]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002408:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2201      	movs	r2, #1
 800240e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2200      	movs	r2, #0
 8002416:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e017      	b.n	800244e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d101      	bne.n	8002428 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002424:	2300      	movs	r3, #0
 8002426:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	3b01      	subs	r3, #1
 800242c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	689a      	ldr	r2, [r3, #8]
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	4013      	ands	r3, r2
 8002438:	68ba      	ldr	r2, [r7, #8]
 800243a:	429a      	cmp	r2, r3
 800243c:	bf0c      	ite	eq
 800243e:	2301      	moveq	r3, #1
 8002440:	2300      	movne	r3, #0
 8002442:	b2db      	uxtb	r3, r3
 8002444:	461a      	mov	r2, r3
 8002446:	79fb      	ldrb	r3, [r7, #7]
 8002448:	429a      	cmp	r2, r3
 800244a:	d19b      	bne.n	8002384 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	3720      	adds	r7, #32
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	20000000 	.word	0x20000000

0800245c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b086      	sub	sp, #24
 8002460:	af02      	add	r7, sp, #8
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	60b9      	str	r1, [r7, #8]
 8002466:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002470:	d111      	bne.n	8002496 <SPI_EndRxTransaction+0x3a>
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800247a:	d004      	beq.n	8002486 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002484:	d107      	bne.n	8002496 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002494:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800249e:	d117      	bne.n	80024d0 <SPI_EndRxTransaction+0x74>
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024a8:	d112      	bne.n	80024d0 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	9300      	str	r3, [sp, #0]
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	2200      	movs	r2, #0
 80024b2:	2101      	movs	r1, #1
 80024b4:	68f8      	ldr	r0, [r7, #12]
 80024b6:	f7ff ff49 	bl	800234c <SPI_WaitFlagStateUntilTimeout>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d01a      	beq.n	80024f6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024c4:	f043 0220 	orr.w	r2, r3, #32
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	e013      	b.n	80024f8 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	9300      	str	r3, [sp, #0]
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	2200      	movs	r2, #0
 80024d8:	2180      	movs	r1, #128	@ 0x80
 80024da:	68f8      	ldr	r0, [r7, #12]
 80024dc:	f7ff ff36 	bl	800234c <SPI_WaitFlagStateUntilTimeout>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d007      	beq.n	80024f6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024ea:	f043 0220 	orr.w	r2, r3, #32
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e000      	b.n	80024f8 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80024f6:	2300      	movs	r3, #0
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3710      	adds	r7, #16
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}

08002500 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b086      	sub	sp, #24
 8002504:	af02      	add	r7, sp, #8
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	60b9      	str	r1, [r7, #8]
 800250a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	9300      	str	r3, [sp, #0]
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	2201      	movs	r2, #1
 8002514:	2102      	movs	r1, #2
 8002516:	68f8      	ldr	r0, [r7, #12]
 8002518:	f7ff ff18 	bl	800234c <SPI_WaitFlagStateUntilTimeout>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d007      	beq.n	8002532 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002526:	f043 0220 	orr.w	r2, r3, #32
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e013      	b.n	800255a <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	9300      	str	r3, [sp, #0]
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	2200      	movs	r2, #0
 800253a:	2180      	movs	r1, #128	@ 0x80
 800253c:	68f8      	ldr	r0, [r7, #12]
 800253e:	f7ff ff05 	bl	800234c <SPI_WaitFlagStateUntilTimeout>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d007      	beq.n	8002558 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800254c:	f043 0220 	orr.w	r2, r3, #32
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	e000      	b.n	800255a <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3710      	adds	r7, #16
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002562:	b580      	push	{r7, lr}
 8002564:	b082      	sub	sp, #8
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d101      	bne.n	8002574 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e042      	b.n	80025fa <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800257a:	b2db      	uxtb	r3, r3
 800257c:	2b00      	cmp	r3, #0
 800257e:	d106      	bne.n	800258e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f7fe f82d 	bl	80005e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2224      	movs	r2, #36	@ 0x24
 8002592:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	68da      	ldr	r2, [r3, #12]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80025a4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 f972 	bl	8002890 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	691a      	ldr	r2, [r3, #16]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80025ba:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	695a      	ldr	r2, [r3, #20]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80025ca:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	68da      	ldr	r2, [r3, #12]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80025da:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2220      	movs	r2, #32
 80025e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2220      	movs	r2, #32
 80025ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}

08002602 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002602:	b580      	push	{r7, lr}
 8002604:	b08a      	sub	sp, #40	@ 0x28
 8002606:	af02      	add	r7, sp, #8
 8002608:	60f8      	str	r0, [r7, #12]
 800260a:	60b9      	str	r1, [r7, #8]
 800260c:	603b      	str	r3, [r7, #0]
 800260e:	4613      	mov	r3, r2
 8002610:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002612:	2300      	movs	r3, #0
 8002614:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2b20      	cmp	r3, #32
 8002620:	d175      	bne.n	800270e <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d002      	beq.n	800262e <HAL_UART_Transmit+0x2c>
 8002628:	88fb      	ldrh	r3, [r7, #6]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d101      	bne.n	8002632 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e06e      	b.n	8002710 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2200      	movs	r2, #0
 8002636:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2221      	movs	r2, #33	@ 0x21
 800263c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002640:	f7fe fb60 	bl	8000d04 <HAL_GetTick>
 8002644:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	88fa      	ldrh	r2, [r7, #6]
 800264a:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	88fa      	ldrh	r2, [r7, #6]
 8002650:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800265a:	d108      	bne.n	800266e <HAL_UART_Transmit+0x6c>
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	691b      	ldr	r3, [r3, #16]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d104      	bne.n	800266e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002664:	2300      	movs	r3, #0
 8002666:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	61bb      	str	r3, [r7, #24]
 800266c:	e003      	b.n	8002676 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002672:	2300      	movs	r3, #0
 8002674:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002676:	e02e      	b.n	80026d6 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	9300      	str	r3, [sp, #0]
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	2200      	movs	r2, #0
 8002680:	2180      	movs	r1, #128	@ 0x80
 8002682:	68f8      	ldr	r0, [r7, #12]
 8002684:	f000 f848 	bl	8002718 <UART_WaitOnFlagUntilTimeout>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d005      	beq.n	800269a <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2220      	movs	r2, #32
 8002692:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e03a      	b.n	8002710 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d10b      	bne.n	80026b8 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	881b      	ldrh	r3, [r3, #0]
 80026a4:	461a      	mov	r2, r3
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026ae:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	3302      	adds	r3, #2
 80026b4:	61bb      	str	r3, [r7, #24]
 80026b6:	e007      	b.n	80026c8 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	781a      	ldrb	r2, [r3, #0]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	3301      	adds	r3, #1
 80026c6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	3b01      	subs	r3, #1
 80026d0:	b29a      	uxth	r2, r3
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80026da:	b29b      	uxth	r3, r3
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d1cb      	bne.n	8002678 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	9300      	str	r3, [sp, #0]
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	2200      	movs	r2, #0
 80026e8:	2140      	movs	r1, #64	@ 0x40
 80026ea:	68f8      	ldr	r0, [r7, #12]
 80026ec:	f000 f814 	bl	8002718 <UART_WaitOnFlagUntilTimeout>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d005      	beq.n	8002702 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2220      	movs	r2, #32
 80026fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e006      	b.n	8002710 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2220      	movs	r2, #32
 8002706:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800270a:	2300      	movs	r3, #0
 800270c:	e000      	b.n	8002710 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800270e:	2302      	movs	r3, #2
  }
}
 8002710:	4618      	mov	r0, r3
 8002712:	3720      	adds	r7, #32
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}

08002718 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b086      	sub	sp, #24
 800271c:	af00      	add	r7, sp, #0
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	60b9      	str	r1, [r7, #8]
 8002722:	603b      	str	r3, [r7, #0]
 8002724:	4613      	mov	r3, r2
 8002726:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002728:	e03b      	b.n	80027a2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800272a:	6a3b      	ldr	r3, [r7, #32]
 800272c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002730:	d037      	beq.n	80027a2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002732:	f7fe fae7 	bl	8000d04 <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	6a3a      	ldr	r2, [r7, #32]
 800273e:	429a      	cmp	r2, r3
 8002740:	d302      	bcc.n	8002748 <UART_WaitOnFlagUntilTimeout+0x30>
 8002742:	6a3b      	ldr	r3, [r7, #32]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d101      	bne.n	800274c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e03a      	b.n	80027c2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	f003 0304 	and.w	r3, r3, #4
 8002756:	2b00      	cmp	r3, #0
 8002758:	d023      	beq.n	80027a2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	2b80      	cmp	r3, #128	@ 0x80
 800275e:	d020      	beq.n	80027a2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	2b40      	cmp	r3, #64	@ 0x40
 8002764:	d01d      	beq.n	80027a2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0308 	and.w	r3, r3, #8
 8002770:	2b08      	cmp	r3, #8
 8002772:	d116      	bne.n	80027a2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002774:	2300      	movs	r3, #0
 8002776:	617b      	str	r3, [r7, #20]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	617b      	str	r3, [r7, #20]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	617b      	str	r3, [r7, #20]
 8002788:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800278a:	68f8      	ldr	r0, [r7, #12]
 800278c:	f000 f81d 	bl	80027ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2208      	movs	r2, #8
 8002794:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e00f      	b.n	80027c2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	4013      	ands	r3, r2
 80027ac:	68ba      	ldr	r2, [r7, #8]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	bf0c      	ite	eq
 80027b2:	2301      	moveq	r3, #1
 80027b4:	2300      	movne	r3, #0
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	461a      	mov	r2, r3
 80027ba:	79fb      	ldrb	r3, [r7, #7]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d0b4      	beq.n	800272a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3718      	adds	r7, #24
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80027ca:	b480      	push	{r7}
 80027cc:	b095      	sub	sp, #84	@ 0x54
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	330c      	adds	r3, #12
 80027d8:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027dc:	e853 3f00 	ldrex	r3, [r3]
 80027e0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80027e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80027e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	330c      	adds	r3, #12
 80027f0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80027f2:	643a      	str	r2, [r7, #64]	@ 0x40
 80027f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027f6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80027f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80027fa:	e841 2300 	strex	r3, r2, [r1]
 80027fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002802:	2b00      	cmp	r3, #0
 8002804:	d1e5      	bne.n	80027d2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	3314      	adds	r3, #20
 800280c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800280e:	6a3b      	ldr	r3, [r7, #32]
 8002810:	e853 3f00 	ldrex	r3, [r3]
 8002814:	61fb      	str	r3, [r7, #28]
   return(result);
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	f023 0301 	bic.w	r3, r3, #1
 800281c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	3314      	adds	r3, #20
 8002824:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002826:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002828:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800282a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800282c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800282e:	e841 2300 	strex	r3, r2, [r1]
 8002832:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002836:	2b00      	cmp	r3, #0
 8002838:	d1e5      	bne.n	8002806 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800283e:	2b01      	cmp	r3, #1
 8002840:	d119      	bne.n	8002876 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	330c      	adds	r3, #12
 8002848:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	e853 3f00 	ldrex	r3, [r3]
 8002850:	60bb      	str	r3, [r7, #8]
   return(result);
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	f023 0310 	bic.w	r3, r3, #16
 8002858:	647b      	str	r3, [r7, #68]	@ 0x44
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	330c      	adds	r3, #12
 8002860:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002862:	61ba      	str	r2, [r7, #24]
 8002864:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002866:	6979      	ldr	r1, [r7, #20]
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	e841 2300 	strex	r3, r2, [r1]
 800286e:	613b      	str	r3, [r7, #16]
   return(result);
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d1e5      	bne.n	8002842 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2220      	movs	r2, #32
 800287a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002884:	bf00      	nop
 8002886:	3754      	adds	r7, #84	@ 0x54
 8002888:	46bd      	mov	sp, r7
 800288a:	bc80      	pop	{r7}
 800288c:	4770      	bx	lr
	...

08002890 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	68da      	ldr	r2, [r3, #12]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	430a      	orrs	r2, r1
 80028ac:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	689a      	ldr	r2, [r3, #8]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	431a      	orrs	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	695b      	ldr	r3, [r3, #20]
 80028bc:	4313      	orrs	r3, r2
 80028be:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80028ca:	f023 030c 	bic.w	r3, r3, #12
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	6812      	ldr	r2, [r2, #0]
 80028d2:	68b9      	ldr	r1, [r7, #8]
 80028d4:	430b      	orrs	r3, r1
 80028d6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	695b      	ldr	r3, [r3, #20]
 80028de:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	699a      	ldr	r2, [r3, #24]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	430a      	orrs	r2, r1
 80028ec:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a2c      	ldr	r2, [pc, #176]	@ (80029a4 <UART_SetConfig+0x114>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d103      	bne.n	8002900 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80028f8:	f7ff f86c 	bl	80019d4 <HAL_RCC_GetPCLK2Freq>
 80028fc:	60f8      	str	r0, [r7, #12]
 80028fe:	e002      	b.n	8002906 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002900:	f7ff f854 	bl	80019ac <HAL_RCC_GetPCLK1Freq>
 8002904:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002906:	68fa      	ldr	r2, [r7, #12]
 8002908:	4613      	mov	r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	4413      	add	r3, r2
 800290e:	009a      	lsls	r2, r3, #2
 8002910:	441a      	add	r2, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	fbb2 f3f3 	udiv	r3, r2, r3
 800291c:	4a22      	ldr	r2, [pc, #136]	@ (80029a8 <UART_SetConfig+0x118>)
 800291e:	fba2 2303 	umull	r2, r3, r2, r3
 8002922:	095b      	lsrs	r3, r3, #5
 8002924:	0119      	lsls	r1, r3, #4
 8002926:	68fa      	ldr	r2, [r7, #12]
 8002928:	4613      	mov	r3, r2
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	4413      	add	r3, r2
 800292e:	009a      	lsls	r2, r3, #2
 8002930:	441a      	add	r2, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	fbb2 f2f3 	udiv	r2, r2, r3
 800293c:	4b1a      	ldr	r3, [pc, #104]	@ (80029a8 <UART_SetConfig+0x118>)
 800293e:	fba3 0302 	umull	r0, r3, r3, r2
 8002942:	095b      	lsrs	r3, r3, #5
 8002944:	2064      	movs	r0, #100	@ 0x64
 8002946:	fb00 f303 	mul.w	r3, r0, r3
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	011b      	lsls	r3, r3, #4
 800294e:	3332      	adds	r3, #50	@ 0x32
 8002950:	4a15      	ldr	r2, [pc, #84]	@ (80029a8 <UART_SetConfig+0x118>)
 8002952:	fba2 2303 	umull	r2, r3, r2, r3
 8002956:	095b      	lsrs	r3, r3, #5
 8002958:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800295c:	4419      	add	r1, r3
 800295e:	68fa      	ldr	r2, [r7, #12]
 8002960:	4613      	mov	r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	4413      	add	r3, r2
 8002966:	009a      	lsls	r2, r3, #2
 8002968:	441a      	add	r2, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	fbb2 f2f3 	udiv	r2, r2, r3
 8002974:	4b0c      	ldr	r3, [pc, #48]	@ (80029a8 <UART_SetConfig+0x118>)
 8002976:	fba3 0302 	umull	r0, r3, r3, r2
 800297a:	095b      	lsrs	r3, r3, #5
 800297c:	2064      	movs	r0, #100	@ 0x64
 800297e:	fb00 f303 	mul.w	r3, r0, r3
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	011b      	lsls	r3, r3, #4
 8002986:	3332      	adds	r3, #50	@ 0x32
 8002988:	4a07      	ldr	r2, [pc, #28]	@ (80029a8 <UART_SetConfig+0x118>)
 800298a:	fba2 2303 	umull	r2, r3, r2, r3
 800298e:	095b      	lsrs	r3, r3, #5
 8002990:	f003 020f 	and.w	r2, r3, #15
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	440a      	add	r2, r1
 800299a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800299c:	bf00      	nop
 800299e:	3710      	adds	r7, #16
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	40013800 	.word	0x40013800
 80029a8:	51eb851f 	.word	0x51eb851f

080029ac <siprintf>:
 80029ac:	b40e      	push	{r1, r2, r3}
 80029ae:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80029b2:	b500      	push	{lr}
 80029b4:	b09c      	sub	sp, #112	@ 0x70
 80029b6:	ab1d      	add	r3, sp, #116	@ 0x74
 80029b8:	9002      	str	r0, [sp, #8]
 80029ba:	9006      	str	r0, [sp, #24]
 80029bc:	9107      	str	r1, [sp, #28]
 80029be:	9104      	str	r1, [sp, #16]
 80029c0:	4808      	ldr	r0, [pc, #32]	@ (80029e4 <siprintf+0x38>)
 80029c2:	4909      	ldr	r1, [pc, #36]	@ (80029e8 <siprintf+0x3c>)
 80029c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80029c8:	9105      	str	r1, [sp, #20]
 80029ca:	6800      	ldr	r0, [r0, #0]
 80029cc:	a902      	add	r1, sp, #8
 80029ce:	9301      	str	r3, [sp, #4]
 80029d0:	f000 f992 	bl	8002cf8 <_svfiprintf_r>
 80029d4:	2200      	movs	r2, #0
 80029d6:	9b02      	ldr	r3, [sp, #8]
 80029d8:	701a      	strb	r2, [r3, #0]
 80029da:	b01c      	add	sp, #112	@ 0x70
 80029dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80029e0:	b003      	add	sp, #12
 80029e2:	4770      	bx	lr
 80029e4:	2000000c 	.word	0x2000000c
 80029e8:	ffff0208 	.word	0xffff0208

080029ec <memset>:
 80029ec:	4603      	mov	r3, r0
 80029ee:	4402      	add	r2, r0
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d100      	bne.n	80029f6 <memset+0xa>
 80029f4:	4770      	bx	lr
 80029f6:	f803 1b01 	strb.w	r1, [r3], #1
 80029fa:	e7f9      	b.n	80029f0 <memset+0x4>

080029fc <__errno>:
 80029fc:	4b01      	ldr	r3, [pc, #4]	@ (8002a04 <__errno+0x8>)
 80029fe:	6818      	ldr	r0, [r3, #0]
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	2000000c 	.word	0x2000000c

08002a08 <__libc_init_array>:
 8002a08:	b570      	push	{r4, r5, r6, lr}
 8002a0a:	2600      	movs	r6, #0
 8002a0c:	4d0c      	ldr	r5, [pc, #48]	@ (8002a40 <__libc_init_array+0x38>)
 8002a0e:	4c0d      	ldr	r4, [pc, #52]	@ (8002a44 <__libc_init_array+0x3c>)
 8002a10:	1b64      	subs	r4, r4, r5
 8002a12:	10a4      	asrs	r4, r4, #2
 8002a14:	42a6      	cmp	r6, r4
 8002a16:	d109      	bne.n	8002a2c <__libc_init_array+0x24>
 8002a18:	f000 fc78 	bl	800330c <_init>
 8002a1c:	2600      	movs	r6, #0
 8002a1e:	4d0a      	ldr	r5, [pc, #40]	@ (8002a48 <__libc_init_array+0x40>)
 8002a20:	4c0a      	ldr	r4, [pc, #40]	@ (8002a4c <__libc_init_array+0x44>)
 8002a22:	1b64      	subs	r4, r4, r5
 8002a24:	10a4      	asrs	r4, r4, #2
 8002a26:	42a6      	cmp	r6, r4
 8002a28:	d105      	bne.n	8002a36 <__libc_init_array+0x2e>
 8002a2a:	bd70      	pop	{r4, r5, r6, pc}
 8002a2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a30:	4798      	blx	r3
 8002a32:	3601      	adds	r6, #1
 8002a34:	e7ee      	b.n	8002a14 <__libc_init_array+0xc>
 8002a36:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a3a:	4798      	blx	r3
 8002a3c:	3601      	adds	r6, #1
 8002a3e:	e7f2      	b.n	8002a26 <__libc_init_array+0x1e>
 8002a40:	0800355c 	.word	0x0800355c
 8002a44:	0800355c 	.word	0x0800355c
 8002a48:	0800355c 	.word	0x0800355c
 8002a4c:	08003560 	.word	0x08003560

08002a50 <__retarget_lock_acquire_recursive>:
 8002a50:	4770      	bx	lr

08002a52 <__retarget_lock_release_recursive>:
 8002a52:	4770      	bx	lr

08002a54 <_free_r>:
 8002a54:	b538      	push	{r3, r4, r5, lr}
 8002a56:	4605      	mov	r5, r0
 8002a58:	2900      	cmp	r1, #0
 8002a5a:	d040      	beq.n	8002ade <_free_r+0x8a>
 8002a5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002a60:	1f0c      	subs	r4, r1, #4
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	bfb8      	it	lt
 8002a66:	18e4      	addlt	r4, r4, r3
 8002a68:	f000 f8de 	bl	8002c28 <__malloc_lock>
 8002a6c:	4a1c      	ldr	r2, [pc, #112]	@ (8002ae0 <_free_r+0x8c>)
 8002a6e:	6813      	ldr	r3, [r2, #0]
 8002a70:	b933      	cbnz	r3, 8002a80 <_free_r+0x2c>
 8002a72:	6063      	str	r3, [r4, #4]
 8002a74:	6014      	str	r4, [r2, #0]
 8002a76:	4628      	mov	r0, r5
 8002a78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002a7c:	f000 b8da 	b.w	8002c34 <__malloc_unlock>
 8002a80:	42a3      	cmp	r3, r4
 8002a82:	d908      	bls.n	8002a96 <_free_r+0x42>
 8002a84:	6820      	ldr	r0, [r4, #0]
 8002a86:	1821      	adds	r1, r4, r0
 8002a88:	428b      	cmp	r3, r1
 8002a8a:	bf01      	itttt	eq
 8002a8c:	6819      	ldreq	r1, [r3, #0]
 8002a8e:	685b      	ldreq	r3, [r3, #4]
 8002a90:	1809      	addeq	r1, r1, r0
 8002a92:	6021      	streq	r1, [r4, #0]
 8002a94:	e7ed      	b.n	8002a72 <_free_r+0x1e>
 8002a96:	461a      	mov	r2, r3
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	b10b      	cbz	r3, 8002aa0 <_free_r+0x4c>
 8002a9c:	42a3      	cmp	r3, r4
 8002a9e:	d9fa      	bls.n	8002a96 <_free_r+0x42>
 8002aa0:	6811      	ldr	r1, [r2, #0]
 8002aa2:	1850      	adds	r0, r2, r1
 8002aa4:	42a0      	cmp	r0, r4
 8002aa6:	d10b      	bne.n	8002ac0 <_free_r+0x6c>
 8002aa8:	6820      	ldr	r0, [r4, #0]
 8002aaa:	4401      	add	r1, r0
 8002aac:	1850      	adds	r0, r2, r1
 8002aae:	4283      	cmp	r3, r0
 8002ab0:	6011      	str	r1, [r2, #0]
 8002ab2:	d1e0      	bne.n	8002a76 <_free_r+0x22>
 8002ab4:	6818      	ldr	r0, [r3, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	4408      	add	r0, r1
 8002aba:	6010      	str	r0, [r2, #0]
 8002abc:	6053      	str	r3, [r2, #4]
 8002abe:	e7da      	b.n	8002a76 <_free_r+0x22>
 8002ac0:	d902      	bls.n	8002ac8 <_free_r+0x74>
 8002ac2:	230c      	movs	r3, #12
 8002ac4:	602b      	str	r3, [r5, #0]
 8002ac6:	e7d6      	b.n	8002a76 <_free_r+0x22>
 8002ac8:	6820      	ldr	r0, [r4, #0]
 8002aca:	1821      	adds	r1, r4, r0
 8002acc:	428b      	cmp	r3, r1
 8002ace:	bf01      	itttt	eq
 8002ad0:	6819      	ldreq	r1, [r3, #0]
 8002ad2:	685b      	ldreq	r3, [r3, #4]
 8002ad4:	1809      	addeq	r1, r1, r0
 8002ad6:	6021      	streq	r1, [r4, #0]
 8002ad8:	6063      	str	r3, [r4, #4]
 8002ada:	6054      	str	r4, [r2, #4]
 8002adc:	e7cb      	b.n	8002a76 <_free_r+0x22>
 8002ade:	bd38      	pop	{r3, r4, r5, pc}
 8002ae0:	20000720 	.word	0x20000720

08002ae4 <sbrk_aligned>:
 8002ae4:	b570      	push	{r4, r5, r6, lr}
 8002ae6:	4e0f      	ldr	r6, [pc, #60]	@ (8002b24 <sbrk_aligned+0x40>)
 8002ae8:	460c      	mov	r4, r1
 8002aea:	6831      	ldr	r1, [r6, #0]
 8002aec:	4605      	mov	r5, r0
 8002aee:	b911      	cbnz	r1, 8002af6 <sbrk_aligned+0x12>
 8002af0:	f000 fbaa 	bl	8003248 <_sbrk_r>
 8002af4:	6030      	str	r0, [r6, #0]
 8002af6:	4621      	mov	r1, r4
 8002af8:	4628      	mov	r0, r5
 8002afa:	f000 fba5 	bl	8003248 <_sbrk_r>
 8002afe:	1c43      	adds	r3, r0, #1
 8002b00:	d103      	bne.n	8002b0a <sbrk_aligned+0x26>
 8002b02:	f04f 34ff 	mov.w	r4, #4294967295
 8002b06:	4620      	mov	r0, r4
 8002b08:	bd70      	pop	{r4, r5, r6, pc}
 8002b0a:	1cc4      	adds	r4, r0, #3
 8002b0c:	f024 0403 	bic.w	r4, r4, #3
 8002b10:	42a0      	cmp	r0, r4
 8002b12:	d0f8      	beq.n	8002b06 <sbrk_aligned+0x22>
 8002b14:	1a21      	subs	r1, r4, r0
 8002b16:	4628      	mov	r0, r5
 8002b18:	f000 fb96 	bl	8003248 <_sbrk_r>
 8002b1c:	3001      	adds	r0, #1
 8002b1e:	d1f2      	bne.n	8002b06 <sbrk_aligned+0x22>
 8002b20:	e7ef      	b.n	8002b02 <sbrk_aligned+0x1e>
 8002b22:	bf00      	nop
 8002b24:	2000071c 	.word	0x2000071c

08002b28 <_malloc_r>:
 8002b28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002b2c:	1ccd      	adds	r5, r1, #3
 8002b2e:	f025 0503 	bic.w	r5, r5, #3
 8002b32:	3508      	adds	r5, #8
 8002b34:	2d0c      	cmp	r5, #12
 8002b36:	bf38      	it	cc
 8002b38:	250c      	movcc	r5, #12
 8002b3a:	2d00      	cmp	r5, #0
 8002b3c:	4606      	mov	r6, r0
 8002b3e:	db01      	blt.n	8002b44 <_malloc_r+0x1c>
 8002b40:	42a9      	cmp	r1, r5
 8002b42:	d904      	bls.n	8002b4e <_malloc_r+0x26>
 8002b44:	230c      	movs	r3, #12
 8002b46:	6033      	str	r3, [r6, #0]
 8002b48:	2000      	movs	r0, #0
 8002b4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002b4e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002c24 <_malloc_r+0xfc>
 8002b52:	f000 f869 	bl	8002c28 <__malloc_lock>
 8002b56:	f8d8 3000 	ldr.w	r3, [r8]
 8002b5a:	461c      	mov	r4, r3
 8002b5c:	bb44      	cbnz	r4, 8002bb0 <_malloc_r+0x88>
 8002b5e:	4629      	mov	r1, r5
 8002b60:	4630      	mov	r0, r6
 8002b62:	f7ff ffbf 	bl	8002ae4 <sbrk_aligned>
 8002b66:	1c43      	adds	r3, r0, #1
 8002b68:	4604      	mov	r4, r0
 8002b6a:	d158      	bne.n	8002c1e <_malloc_r+0xf6>
 8002b6c:	f8d8 4000 	ldr.w	r4, [r8]
 8002b70:	4627      	mov	r7, r4
 8002b72:	2f00      	cmp	r7, #0
 8002b74:	d143      	bne.n	8002bfe <_malloc_r+0xd6>
 8002b76:	2c00      	cmp	r4, #0
 8002b78:	d04b      	beq.n	8002c12 <_malloc_r+0xea>
 8002b7a:	6823      	ldr	r3, [r4, #0]
 8002b7c:	4639      	mov	r1, r7
 8002b7e:	4630      	mov	r0, r6
 8002b80:	eb04 0903 	add.w	r9, r4, r3
 8002b84:	f000 fb60 	bl	8003248 <_sbrk_r>
 8002b88:	4581      	cmp	r9, r0
 8002b8a:	d142      	bne.n	8002c12 <_malloc_r+0xea>
 8002b8c:	6821      	ldr	r1, [r4, #0]
 8002b8e:	4630      	mov	r0, r6
 8002b90:	1a6d      	subs	r5, r5, r1
 8002b92:	4629      	mov	r1, r5
 8002b94:	f7ff ffa6 	bl	8002ae4 <sbrk_aligned>
 8002b98:	3001      	adds	r0, #1
 8002b9a:	d03a      	beq.n	8002c12 <_malloc_r+0xea>
 8002b9c:	6823      	ldr	r3, [r4, #0]
 8002b9e:	442b      	add	r3, r5
 8002ba0:	6023      	str	r3, [r4, #0]
 8002ba2:	f8d8 3000 	ldr.w	r3, [r8]
 8002ba6:	685a      	ldr	r2, [r3, #4]
 8002ba8:	bb62      	cbnz	r2, 8002c04 <_malloc_r+0xdc>
 8002baa:	f8c8 7000 	str.w	r7, [r8]
 8002bae:	e00f      	b.n	8002bd0 <_malloc_r+0xa8>
 8002bb0:	6822      	ldr	r2, [r4, #0]
 8002bb2:	1b52      	subs	r2, r2, r5
 8002bb4:	d420      	bmi.n	8002bf8 <_malloc_r+0xd0>
 8002bb6:	2a0b      	cmp	r2, #11
 8002bb8:	d917      	bls.n	8002bea <_malloc_r+0xc2>
 8002bba:	1961      	adds	r1, r4, r5
 8002bbc:	42a3      	cmp	r3, r4
 8002bbe:	6025      	str	r5, [r4, #0]
 8002bc0:	bf18      	it	ne
 8002bc2:	6059      	strne	r1, [r3, #4]
 8002bc4:	6863      	ldr	r3, [r4, #4]
 8002bc6:	bf08      	it	eq
 8002bc8:	f8c8 1000 	streq.w	r1, [r8]
 8002bcc:	5162      	str	r2, [r4, r5]
 8002bce:	604b      	str	r3, [r1, #4]
 8002bd0:	4630      	mov	r0, r6
 8002bd2:	f000 f82f 	bl	8002c34 <__malloc_unlock>
 8002bd6:	f104 000b 	add.w	r0, r4, #11
 8002bda:	1d23      	adds	r3, r4, #4
 8002bdc:	f020 0007 	bic.w	r0, r0, #7
 8002be0:	1ac2      	subs	r2, r0, r3
 8002be2:	bf1c      	itt	ne
 8002be4:	1a1b      	subne	r3, r3, r0
 8002be6:	50a3      	strne	r3, [r4, r2]
 8002be8:	e7af      	b.n	8002b4a <_malloc_r+0x22>
 8002bea:	6862      	ldr	r2, [r4, #4]
 8002bec:	42a3      	cmp	r3, r4
 8002bee:	bf0c      	ite	eq
 8002bf0:	f8c8 2000 	streq.w	r2, [r8]
 8002bf4:	605a      	strne	r2, [r3, #4]
 8002bf6:	e7eb      	b.n	8002bd0 <_malloc_r+0xa8>
 8002bf8:	4623      	mov	r3, r4
 8002bfa:	6864      	ldr	r4, [r4, #4]
 8002bfc:	e7ae      	b.n	8002b5c <_malloc_r+0x34>
 8002bfe:	463c      	mov	r4, r7
 8002c00:	687f      	ldr	r7, [r7, #4]
 8002c02:	e7b6      	b.n	8002b72 <_malloc_r+0x4a>
 8002c04:	461a      	mov	r2, r3
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	42a3      	cmp	r3, r4
 8002c0a:	d1fb      	bne.n	8002c04 <_malloc_r+0xdc>
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	6053      	str	r3, [r2, #4]
 8002c10:	e7de      	b.n	8002bd0 <_malloc_r+0xa8>
 8002c12:	230c      	movs	r3, #12
 8002c14:	4630      	mov	r0, r6
 8002c16:	6033      	str	r3, [r6, #0]
 8002c18:	f000 f80c 	bl	8002c34 <__malloc_unlock>
 8002c1c:	e794      	b.n	8002b48 <_malloc_r+0x20>
 8002c1e:	6005      	str	r5, [r0, #0]
 8002c20:	e7d6      	b.n	8002bd0 <_malloc_r+0xa8>
 8002c22:	bf00      	nop
 8002c24:	20000720 	.word	0x20000720

08002c28 <__malloc_lock>:
 8002c28:	4801      	ldr	r0, [pc, #4]	@ (8002c30 <__malloc_lock+0x8>)
 8002c2a:	f7ff bf11 	b.w	8002a50 <__retarget_lock_acquire_recursive>
 8002c2e:	bf00      	nop
 8002c30:	20000718 	.word	0x20000718

08002c34 <__malloc_unlock>:
 8002c34:	4801      	ldr	r0, [pc, #4]	@ (8002c3c <__malloc_unlock+0x8>)
 8002c36:	f7ff bf0c 	b.w	8002a52 <__retarget_lock_release_recursive>
 8002c3a:	bf00      	nop
 8002c3c:	20000718 	.word	0x20000718

08002c40 <__ssputs_r>:
 8002c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c44:	461f      	mov	r7, r3
 8002c46:	688e      	ldr	r6, [r1, #8]
 8002c48:	4682      	mov	sl, r0
 8002c4a:	42be      	cmp	r6, r7
 8002c4c:	460c      	mov	r4, r1
 8002c4e:	4690      	mov	r8, r2
 8002c50:	680b      	ldr	r3, [r1, #0]
 8002c52:	d82d      	bhi.n	8002cb0 <__ssputs_r+0x70>
 8002c54:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002c58:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002c5c:	d026      	beq.n	8002cac <__ssputs_r+0x6c>
 8002c5e:	6965      	ldr	r5, [r4, #20]
 8002c60:	6909      	ldr	r1, [r1, #16]
 8002c62:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002c66:	eba3 0901 	sub.w	r9, r3, r1
 8002c6a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002c6e:	1c7b      	adds	r3, r7, #1
 8002c70:	444b      	add	r3, r9
 8002c72:	106d      	asrs	r5, r5, #1
 8002c74:	429d      	cmp	r5, r3
 8002c76:	bf38      	it	cc
 8002c78:	461d      	movcc	r5, r3
 8002c7a:	0553      	lsls	r3, r2, #21
 8002c7c:	d527      	bpl.n	8002cce <__ssputs_r+0x8e>
 8002c7e:	4629      	mov	r1, r5
 8002c80:	f7ff ff52 	bl	8002b28 <_malloc_r>
 8002c84:	4606      	mov	r6, r0
 8002c86:	b360      	cbz	r0, 8002ce2 <__ssputs_r+0xa2>
 8002c88:	464a      	mov	r2, r9
 8002c8a:	6921      	ldr	r1, [r4, #16]
 8002c8c:	f000 fafa 	bl	8003284 <memcpy>
 8002c90:	89a3      	ldrh	r3, [r4, #12]
 8002c92:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002c96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c9a:	81a3      	strh	r3, [r4, #12]
 8002c9c:	6126      	str	r6, [r4, #16]
 8002c9e:	444e      	add	r6, r9
 8002ca0:	6026      	str	r6, [r4, #0]
 8002ca2:	463e      	mov	r6, r7
 8002ca4:	6165      	str	r5, [r4, #20]
 8002ca6:	eba5 0509 	sub.w	r5, r5, r9
 8002caa:	60a5      	str	r5, [r4, #8]
 8002cac:	42be      	cmp	r6, r7
 8002cae:	d900      	bls.n	8002cb2 <__ssputs_r+0x72>
 8002cb0:	463e      	mov	r6, r7
 8002cb2:	4632      	mov	r2, r6
 8002cb4:	4641      	mov	r1, r8
 8002cb6:	6820      	ldr	r0, [r4, #0]
 8002cb8:	f000 faac 	bl	8003214 <memmove>
 8002cbc:	2000      	movs	r0, #0
 8002cbe:	68a3      	ldr	r3, [r4, #8]
 8002cc0:	1b9b      	subs	r3, r3, r6
 8002cc2:	60a3      	str	r3, [r4, #8]
 8002cc4:	6823      	ldr	r3, [r4, #0]
 8002cc6:	4433      	add	r3, r6
 8002cc8:	6023      	str	r3, [r4, #0]
 8002cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002cce:	462a      	mov	r2, r5
 8002cd0:	f000 fae6 	bl	80032a0 <_realloc_r>
 8002cd4:	4606      	mov	r6, r0
 8002cd6:	2800      	cmp	r0, #0
 8002cd8:	d1e0      	bne.n	8002c9c <__ssputs_r+0x5c>
 8002cda:	4650      	mov	r0, sl
 8002cdc:	6921      	ldr	r1, [r4, #16]
 8002cde:	f7ff feb9 	bl	8002a54 <_free_r>
 8002ce2:	230c      	movs	r3, #12
 8002ce4:	f8ca 3000 	str.w	r3, [sl]
 8002ce8:	89a3      	ldrh	r3, [r4, #12]
 8002cea:	f04f 30ff 	mov.w	r0, #4294967295
 8002cee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002cf2:	81a3      	strh	r3, [r4, #12]
 8002cf4:	e7e9      	b.n	8002cca <__ssputs_r+0x8a>
	...

08002cf8 <_svfiprintf_r>:
 8002cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cfc:	4698      	mov	r8, r3
 8002cfe:	898b      	ldrh	r3, [r1, #12]
 8002d00:	4607      	mov	r7, r0
 8002d02:	061b      	lsls	r3, r3, #24
 8002d04:	460d      	mov	r5, r1
 8002d06:	4614      	mov	r4, r2
 8002d08:	b09d      	sub	sp, #116	@ 0x74
 8002d0a:	d510      	bpl.n	8002d2e <_svfiprintf_r+0x36>
 8002d0c:	690b      	ldr	r3, [r1, #16]
 8002d0e:	b973      	cbnz	r3, 8002d2e <_svfiprintf_r+0x36>
 8002d10:	2140      	movs	r1, #64	@ 0x40
 8002d12:	f7ff ff09 	bl	8002b28 <_malloc_r>
 8002d16:	6028      	str	r0, [r5, #0]
 8002d18:	6128      	str	r0, [r5, #16]
 8002d1a:	b930      	cbnz	r0, 8002d2a <_svfiprintf_r+0x32>
 8002d1c:	230c      	movs	r3, #12
 8002d1e:	603b      	str	r3, [r7, #0]
 8002d20:	f04f 30ff 	mov.w	r0, #4294967295
 8002d24:	b01d      	add	sp, #116	@ 0x74
 8002d26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d2a:	2340      	movs	r3, #64	@ 0x40
 8002d2c:	616b      	str	r3, [r5, #20]
 8002d2e:	2300      	movs	r3, #0
 8002d30:	9309      	str	r3, [sp, #36]	@ 0x24
 8002d32:	2320      	movs	r3, #32
 8002d34:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002d38:	2330      	movs	r3, #48	@ 0x30
 8002d3a:	f04f 0901 	mov.w	r9, #1
 8002d3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002d42:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8002edc <_svfiprintf_r+0x1e4>
 8002d46:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002d4a:	4623      	mov	r3, r4
 8002d4c:	469a      	mov	sl, r3
 8002d4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002d52:	b10a      	cbz	r2, 8002d58 <_svfiprintf_r+0x60>
 8002d54:	2a25      	cmp	r2, #37	@ 0x25
 8002d56:	d1f9      	bne.n	8002d4c <_svfiprintf_r+0x54>
 8002d58:	ebba 0b04 	subs.w	fp, sl, r4
 8002d5c:	d00b      	beq.n	8002d76 <_svfiprintf_r+0x7e>
 8002d5e:	465b      	mov	r3, fp
 8002d60:	4622      	mov	r2, r4
 8002d62:	4629      	mov	r1, r5
 8002d64:	4638      	mov	r0, r7
 8002d66:	f7ff ff6b 	bl	8002c40 <__ssputs_r>
 8002d6a:	3001      	adds	r0, #1
 8002d6c:	f000 80a7 	beq.w	8002ebe <_svfiprintf_r+0x1c6>
 8002d70:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002d72:	445a      	add	r2, fp
 8002d74:	9209      	str	r2, [sp, #36]	@ 0x24
 8002d76:	f89a 3000 	ldrb.w	r3, [sl]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	f000 809f 	beq.w	8002ebe <_svfiprintf_r+0x1c6>
 8002d80:	2300      	movs	r3, #0
 8002d82:	f04f 32ff 	mov.w	r2, #4294967295
 8002d86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002d8a:	f10a 0a01 	add.w	sl, sl, #1
 8002d8e:	9304      	str	r3, [sp, #16]
 8002d90:	9307      	str	r3, [sp, #28]
 8002d92:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002d96:	931a      	str	r3, [sp, #104]	@ 0x68
 8002d98:	4654      	mov	r4, sl
 8002d9a:	2205      	movs	r2, #5
 8002d9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002da0:	484e      	ldr	r0, [pc, #312]	@ (8002edc <_svfiprintf_r+0x1e4>)
 8002da2:	f000 fa61 	bl	8003268 <memchr>
 8002da6:	9a04      	ldr	r2, [sp, #16]
 8002da8:	b9d8      	cbnz	r0, 8002de2 <_svfiprintf_r+0xea>
 8002daa:	06d0      	lsls	r0, r2, #27
 8002dac:	bf44      	itt	mi
 8002dae:	2320      	movmi	r3, #32
 8002db0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002db4:	0711      	lsls	r1, r2, #28
 8002db6:	bf44      	itt	mi
 8002db8:	232b      	movmi	r3, #43	@ 0x2b
 8002dba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002dbe:	f89a 3000 	ldrb.w	r3, [sl]
 8002dc2:	2b2a      	cmp	r3, #42	@ 0x2a
 8002dc4:	d015      	beq.n	8002df2 <_svfiprintf_r+0xfa>
 8002dc6:	4654      	mov	r4, sl
 8002dc8:	2000      	movs	r0, #0
 8002dca:	f04f 0c0a 	mov.w	ip, #10
 8002dce:	9a07      	ldr	r2, [sp, #28]
 8002dd0:	4621      	mov	r1, r4
 8002dd2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002dd6:	3b30      	subs	r3, #48	@ 0x30
 8002dd8:	2b09      	cmp	r3, #9
 8002dda:	d94b      	bls.n	8002e74 <_svfiprintf_r+0x17c>
 8002ddc:	b1b0      	cbz	r0, 8002e0c <_svfiprintf_r+0x114>
 8002dde:	9207      	str	r2, [sp, #28]
 8002de0:	e014      	b.n	8002e0c <_svfiprintf_r+0x114>
 8002de2:	eba0 0308 	sub.w	r3, r0, r8
 8002de6:	fa09 f303 	lsl.w	r3, r9, r3
 8002dea:	4313      	orrs	r3, r2
 8002dec:	46a2      	mov	sl, r4
 8002dee:	9304      	str	r3, [sp, #16]
 8002df0:	e7d2      	b.n	8002d98 <_svfiprintf_r+0xa0>
 8002df2:	9b03      	ldr	r3, [sp, #12]
 8002df4:	1d19      	adds	r1, r3, #4
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	9103      	str	r1, [sp, #12]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	bfbb      	ittet	lt
 8002dfe:	425b      	neglt	r3, r3
 8002e00:	f042 0202 	orrlt.w	r2, r2, #2
 8002e04:	9307      	strge	r3, [sp, #28]
 8002e06:	9307      	strlt	r3, [sp, #28]
 8002e08:	bfb8      	it	lt
 8002e0a:	9204      	strlt	r2, [sp, #16]
 8002e0c:	7823      	ldrb	r3, [r4, #0]
 8002e0e:	2b2e      	cmp	r3, #46	@ 0x2e
 8002e10:	d10a      	bne.n	8002e28 <_svfiprintf_r+0x130>
 8002e12:	7863      	ldrb	r3, [r4, #1]
 8002e14:	2b2a      	cmp	r3, #42	@ 0x2a
 8002e16:	d132      	bne.n	8002e7e <_svfiprintf_r+0x186>
 8002e18:	9b03      	ldr	r3, [sp, #12]
 8002e1a:	3402      	adds	r4, #2
 8002e1c:	1d1a      	adds	r2, r3, #4
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	9203      	str	r2, [sp, #12]
 8002e22:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002e26:	9305      	str	r3, [sp, #20]
 8002e28:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8002ee0 <_svfiprintf_r+0x1e8>
 8002e2c:	2203      	movs	r2, #3
 8002e2e:	4650      	mov	r0, sl
 8002e30:	7821      	ldrb	r1, [r4, #0]
 8002e32:	f000 fa19 	bl	8003268 <memchr>
 8002e36:	b138      	cbz	r0, 8002e48 <_svfiprintf_r+0x150>
 8002e38:	2240      	movs	r2, #64	@ 0x40
 8002e3a:	9b04      	ldr	r3, [sp, #16]
 8002e3c:	eba0 000a 	sub.w	r0, r0, sl
 8002e40:	4082      	lsls	r2, r0
 8002e42:	4313      	orrs	r3, r2
 8002e44:	3401      	adds	r4, #1
 8002e46:	9304      	str	r3, [sp, #16]
 8002e48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e4c:	2206      	movs	r2, #6
 8002e4e:	4825      	ldr	r0, [pc, #148]	@ (8002ee4 <_svfiprintf_r+0x1ec>)
 8002e50:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002e54:	f000 fa08 	bl	8003268 <memchr>
 8002e58:	2800      	cmp	r0, #0
 8002e5a:	d036      	beq.n	8002eca <_svfiprintf_r+0x1d2>
 8002e5c:	4b22      	ldr	r3, [pc, #136]	@ (8002ee8 <_svfiprintf_r+0x1f0>)
 8002e5e:	bb1b      	cbnz	r3, 8002ea8 <_svfiprintf_r+0x1b0>
 8002e60:	9b03      	ldr	r3, [sp, #12]
 8002e62:	3307      	adds	r3, #7
 8002e64:	f023 0307 	bic.w	r3, r3, #7
 8002e68:	3308      	adds	r3, #8
 8002e6a:	9303      	str	r3, [sp, #12]
 8002e6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002e6e:	4433      	add	r3, r6
 8002e70:	9309      	str	r3, [sp, #36]	@ 0x24
 8002e72:	e76a      	b.n	8002d4a <_svfiprintf_r+0x52>
 8002e74:	460c      	mov	r4, r1
 8002e76:	2001      	movs	r0, #1
 8002e78:	fb0c 3202 	mla	r2, ip, r2, r3
 8002e7c:	e7a8      	b.n	8002dd0 <_svfiprintf_r+0xd8>
 8002e7e:	2300      	movs	r3, #0
 8002e80:	f04f 0c0a 	mov.w	ip, #10
 8002e84:	4619      	mov	r1, r3
 8002e86:	3401      	adds	r4, #1
 8002e88:	9305      	str	r3, [sp, #20]
 8002e8a:	4620      	mov	r0, r4
 8002e8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002e90:	3a30      	subs	r2, #48	@ 0x30
 8002e92:	2a09      	cmp	r2, #9
 8002e94:	d903      	bls.n	8002e9e <_svfiprintf_r+0x1a6>
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d0c6      	beq.n	8002e28 <_svfiprintf_r+0x130>
 8002e9a:	9105      	str	r1, [sp, #20]
 8002e9c:	e7c4      	b.n	8002e28 <_svfiprintf_r+0x130>
 8002e9e:	4604      	mov	r4, r0
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	fb0c 2101 	mla	r1, ip, r1, r2
 8002ea6:	e7f0      	b.n	8002e8a <_svfiprintf_r+0x192>
 8002ea8:	ab03      	add	r3, sp, #12
 8002eaa:	9300      	str	r3, [sp, #0]
 8002eac:	462a      	mov	r2, r5
 8002eae:	4638      	mov	r0, r7
 8002eb0:	4b0e      	ldr	r3, [pc, #56]	@ (8002eec <_svfiprintf_r+0x1f4>)
 8002eb2:	a904      	add	r1, sp, #16
 8002eb4:	f3af 8000 	nop.w
 8002eb8:	1c42      	adds	r2, r0, #1
 8002eba:	4606      	mov	r6, r0
 8002ebc:	d1d6      	bne.n	8002e6c <_svfiprintf_r+0x174>
 8002ebe:	89ab      	ldrh	r3, [r5, #12]
 8002ec0:	065b      	lsls	r3, r3, #25
 8002ec2:	f53f af2d 	bmi.w	8002d20 <_svfiprintf_r+0x28>
 8002ec6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002ec8:	e72c      	b.n	8002d24 <_svfiprintf_r+0x2c>
 8002eca:	ab03      	add	r3, sp, #12
 8002ecc:	9300      	str	r3, [sp, #0]
 8002ece:	462a      	mov	r2, r5
 8002ed0:	4638      	mov	r0, r7
 8002ed2:	4b06      	ldr	r3, [pc, #24]	@ (8002eec <_svfiprintf_r+0x1f4>)
 8002ed4:	a904      	add	r1, sp, #16
 8002ed6:	f000 f87d 	bl	8002fd4 <_printf_i>
 8002eda:	e7ed      	b.n	8002eb8 <_svfiprintf_r+0x1c0>
 8002edc:	0800351e 	.word	0x0800351e
 8002ee0:	08003524 	.word	0x08003524
 8002ee4:	08003528 	.word	0x08003528
 8002ee8:	00000000 	.word	0x00000000
 8002eec:	08002c41 	.word	0x08002c41

08002ef0 <_printf_common>:
 8002ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ef4:	4616      	mov	r6, r2
 8002ef6:	4698      	mov	r8, r3
 8002ef8:	688a      	ldr	r2, [r1, #8]
 8002efa:	690b      	ldr	r3, [r1, #16]
 8002efc:	4607      	mov	r7, r0
 8002efe:	4293      	cmp	r3, r2
 8002f00:	bfb8      	it	lt
 8002f02:	4613      	movlt	r3, r2
 8002f04:	6033      	str	r3, [r6, #0]
 8002f06:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002f0a:	460c      	mov	r4, r1
 8002f0c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002f10:	b10a      	cbz	r2, 8002f16 <_printf_common+0x26>
 8002f12:	3301      	adds	r3, #1
 8002f14:	6033      	str	r3, [r6, #0]
 8002f16:	6823      	ldr	r3, [r4, #0]
 8002f18:	0699      	lsls	r1, r3, #26
 8002f1a:	bf42      	ittt	mi
 8002f1c:	6833      	ldrmi	r3, [r6, #0]
 8002f1e:	3302      	addmi	r3, #2
 8002f20:	6033      	strmi	r3, [r6, #0]
 8002f22:	6825      	ldr	r5, [r4, #0]
 8002f24:	f015 0506 	ands.w	r5, r5, #6
 8002f28:	d106      	bne.n	8002f38 <_printf_common+0x48>
 8002f2a:	f104 0a19 	add.w	sl, r4, #25
 8002f2e:	68e3      	ldr	r3, [r4, #12]
 8002f30:	6832      	ldr	r2, [r6, #0]
 8002f32:	1a9b      	subs	r3, r3, r2
 8002f34:	42ab      	cmp	r3, r5
 8002f36:	dc2b      	bgt.n	8002f90 <_printf_common+0xa0>
 8002f38:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002f3c:	6822      	ldr	r2, [r4, #0]
 8002f3e:	3b00      	subs	r3, #0
 8002f40:	bf18      	it	ne
 8002f42:	2301      	movne	r3, #1
 8002f44:	0692      	lsls	r2, r2, #26
 8002f46:	d430      	bmi.n	8002faa <_printf_common+0xba>
 8002f48:	4641      	mov	r1, r8
 8002f4a:	4638      	mov	r0, r7
 8002f4c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002f50:	47c8      	blx	r9
 8002f52:	3001      	adds	r0, #1
 8002f54:	d023      	beq.n	8002f9e <_printf_common+0xae>
 8002f56:	6823      	ldr	r3, [r4, #0]
 8002f58:	6922      	ldr	r2, [r4, #16]
 8002f5a:	f003 0306 	and.w	r3, r3, #6
 8002f5e:	2b04      	cmp	r3, #4
 8002f60:	bf14      	ite	ne
 8002f62:	2500      	movne	r5, #0
 8002f64:	6833      	ldreq	r3, [r6, #0]
 8002f66:	f04f 0600 	mov.w	r6, #0
 8002f6a:	bf08      	it	eq
 8002f6c:	68e5      	ldreq	r5, [r4, #12]
 8002f6e:	f104 041a 	add.w	r4, r4, #26
 8002f72:	bf08      	it	eq
 8002f74:	1aed      	subeq	r5, r5, r3
 8002f76:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002f7a:	bf08      	it	eq
 8002f7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002f80:	4293      	cmp	r3, r2
 8002f82:	bfc4      	itt	gt
 8002f84:	1a9b      	subgt	r3, r3, r2
 8002f86:	18ed      	addgt	r5, r5, r3
 8002f88:	42b5      	cmp	r5, r6
 8002f8a:	d11a      	bne.n	8002fc2 <_printf_common+0xd2>
 8002f8c:	2000      	movs	r0, #0
 8002f8e:	e008      	b.n	8002fa2 <_printf_common+0xb2>
 8002f90:	2301      	movs	r3, #1
 8002f92:	4652      	mov	r2, sl
 8002f94:	4641      	mov	r1, r8
 8002f96:	4638      	mov	r0, r7
 8002f98:	47c8      	blx	r9
 8002f9a:	3001      	adds	r0, #1
 8002f9c:	d103      	bne.n	8002fa6 <_printf_common+0xb6>
 8002f9e:	f04f 30ff 	mov.w	r0, #4294967295
 8002fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fa6:	3501      	adds	r5, #1
 8002fa8:	e7c1      	b.n	8002f2e <_printf_common+0x3e>
 8002faa:	2030      	movs	r0, #48	@ 0x30
 8002fac:	18e1      	adds	r1, r4, r3
 8002fae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002fb2:	1c5a      	adds	r2, r3, #1
 8002fb4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002fb8:	4422      	add	r2, r4
 8002fba:	3302      	adds	r3, #2
 8002fbc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002fc0:	e7c2      	b.n	8002f48 <_printf_common+0x58>
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	4622      	mov	r2, r4
 8002fc6:	4641      	mov	r1, r8
 8002fc8:	4638      	mov	r0, r7
 8002fca:	47c8      	blx	r9
 8002fcc:	3001      	adds	r0, #1
 8002fce:	d0e6      	beq.n	8002f9e <_printf_common+0xae>
 8002fd0:	3601      	adds	r6, #1
 8002fd2:	e7d9      	b.n	8002f88 <_printf_common+0x98>

08002fd4 <_printf_i>:
 8002fd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002fd8:	7e0f      	ldrb	r7, [r1, #24]
 8002fda:	4691      	mov	r9, r2
 8002fdc:	2f78      	cmp	r7, #120	@ 0x78
 8002fde:	4680      	mov	r8, r0
 8002fe0:	460c      	mov	r4, r1
 8002fe2:	469a      	mov	sl, r3
 8002fe4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002fe6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002fea:	d807      	bhi.n	8002ffc <_printf_i+0x28>
 8002fec:	2f62      	cmp	r7, #98	@ 0x62
 8002fee:	d80a      	bhi.n	8003006 <_printf_i+0x32>
 8002ff0:	2f00      	cmp	r7, #0
 8002ff2:	f000 80d3 	beq.w	800319c <_printf_i+0x1c8>
 8002ff6:	2f58      	cmp	r7, #88	@ 0x58
 8002ff8:	f000 80ba 	beq.w	8003170 <_printf_i+0x19c>
 8002ffc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003000:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003004:	e03a      	b.n	800307c <_printf_i+0xa8>
 8003006:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800300a:	2b15      	cmp	r3, #21
 800300c:	d8f6      	bhi.n	8002ffc <_printf_i+0x28>
 800300e:	a101      	add	r1, pc, #4	@ (adr r1, 8003014 <_printf_i+0x40>)
 8003010:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003014:	0800306d 	.word	0x0800306d
 8003018:	08003081 	.word	0x08003081
 800301c:	08002ffd 	.word	0x08002ffd
 8003020:	08002ffd 	.word	0x08002ffd
 8003024:	08002ffd 	.word	0x08002ffd
 8003028:	08002ffd 	.word	0x08002ffd
 800302c:	08003081 	.word	0x08003081
 8003030:	08002ffd 	.word	0x08002ffd
 8003034:	08002ffd 	.word	0x08002ffd
 8003038:	08002ffd 	.word	0x08002ffd
 800303c:	08002ffd 	.word	0x08002ffd
 8003040:	08003183 	.word	0x08003183
 8003044:	080030ab 	.word	0x080030ab
 8003048:	0800313d 	.word	0x0800313d
 800304c:	08002ffd 	.word	0x08002ffd
 8003050:	08002ffd 	.word	0x08002ffd
 8003054:	080031a5 	.word	0x080031a5
 8003058:	08002ffd 	.word	0x08002ffd
 800305c:	080030ab 	.word	0x080030ab
 8003060:	08002ffd 	.word	0x08002ffd
 8003064:	08002ffd 	.word	0x08002ffd
 8003068:	08003145 	.word	0x08003145
 800306c:	6833      	ldr	r3, [r6, #0]
 800306e:	1d1a      	adds	r2, r3, #4
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	6032      	str	r2, [r6, #0]
 8003074:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003078:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800307c:	2301      	movs	r3, #1
 800307e:	e09e      	b.n	80031be <_printf_i+0x1ea>
 8003080:	6833      	ldr	r3, [r6, #0]
 8003082:	6820      	ldr	r0, [r4, #0]
 8003084:	1d19      	adds	r1, r3, #4
 8003086:	6031      	str	r1, [r6, #0]
 8003088:	0606      	lsls	r6, r0, #24
 800308a:	d501      	bpl.n	8003090 <_printf_i+0xbc>
 800308c:	681d      	ldr	r5, [r3, #0]
 800308e:	e003      	b.n	8003098 <_printf_i+0xc4>
 8003090:	0645      	lsls	r5, r0, #25
 8003092:	d5fb      	bpl.n	800308c <_printf_i+0xb8>
 8003094:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003098:	2d00      	cmp	r5, #0
 800309a:	da03      	bge.n	80030a4 <_printf_i+0xd0>
 800309c:	232d      	movs	r3, #45	@ 0x2d
 800309e:	426d      	negs	r5, r5
 80030a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80030a4:	230a      	movs	r3, #10
 80030a6:	4859      	ldr	r0, [pc, #356]	@ (800320c <_printf_i+0x238>)
 80030a8:	e011      	b.n	80030ce <_printf_i+0xfa>
 80030aa:	6821      	ldr	r1, [r4, #0]
 80030ac:	6833      	ldr	r3, [r6, #0]
 80030ae:	0608      	lsls	r0, r1, #24
 80030b0:	f853 5b04 	ldr.w	r5, [r3], #4
 80030b4:	d402      	bmi.n	80030bc <_printf_i+0xe8>
 80030b6:	0649      	lsls	r1, r1, #25
 80030b8:	bf48      	it	mi
 80030ba:	b2ad      	uxthmi	r5, r5
 80030bc:	2f6f      	cmp	r7, #111	@ 0x6f
 80030be:	6033      	str	r3, [r6, #0]
 80030c0:	bf14      	ite	ne
 80030c2:	230a      	movne	r3, #10
 80030c4:	2308      	moveq	r3, #8
 80030c6:	4851      	ldr	r0, [pc, #324]	@ (800320c <_printf_i+0x238>)
 80030c8:	2100      	movs	r1, #0
 80030ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80030ce:	6866      	ldr	r6, [r4, #4]
 80030d0:	2e00      	cmp	r6, #0
 80030d2:	bfa8      	it	ge
 80030d4:	6821      	ldrge	r1, [r4, #0]
 80030d6:	60a6      	str	r6, [r4, #8]
 80030d8:	bfa4      	itt	ge
 80030da:	f021 0104 	bicge.w	r1, r1, #4
 80030de:	6021      	strge	r1, [r4, #0]
 80030e0:	b90d      	cbnz	r5, 80030e6 <_printf_i+0x112>
 80030e2:	2e00      	cmp	r6, #0
 80030e4:	d04b      	beq.n	800317e <_printf_i+0x1aa>
 80030e6:	4616      	mov	r6, r2
 80030e8:	fbb5 f1f3 	udiv	r1, r5, r3
 80030ec:	fb03 5711 	mls	r7, r3, r1, r5
 80030f0:	5dc7      	ldrb	r7, [r0, r7]
 80030f2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80030f6:	462f      	mov	r7, r5
 80030f8:	42bb      	cmp	r3, r7
 80030fa:	460d      	mov	r5, r1
 80030fc:	d9f4      	bls.n	80030e8 <_printf_i+0x114>
 80030fe:	2b08      	cmp	r3, #8
 8003100:	d10b      	bne.n	800311a <_printf_i+0x146>
 8003102:	6823      	ldr	r3, [r4, #0]
 8003104:	07df      	lsls	r7, r3, #31
 8003106:	d508      	bpl.n	800311a <_printf_i+0x146>
 8003108:	6923      	ldr	r3, [r4, #16]
 800310a:	6861      	ldr	r1, [r4, #4]
 800310c:	4299      	cmp	r1, r3
 800310e:	bfde      	ittt	le
 8003110:	2330      	movle	r3, #48	@ 0x30
 8003112:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003116:	f106 36ff 	addle.w	r6, r6, #4294967295
 800311a:	1b92      	subs	r2, r2, r6
 800311c:	6122      	str	r2, [r4, #16]
 800311e:	464b      	mov	r3, r9
 8003120:	4621      	mov	r1, r4
 8003122:	4640      	mov	r0, r8
 8003124:	f8cd a000 	str.w	sl, [sp]
 8003128:	aa03      	add	r2, sp, #12
 800312a:	f7ff fee1 	bl	8002ef0 <_printf_common>
 800312e:	3001      	adds	r0, #1
 8003130:	d14a      	bne.n	80031c8 <_printf_i+0x1f4>
 8003132:	f04f 30ff 	mov.w	r0, #4294967295
 8003136:	b004      	add	sp, #16
 8003138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800313c:	6823      	ldr	r3, [r4, #0]
 800313e:	f043 0320 	orr.w	r3, r3, #32
 8003142:	6023      	str	r3, [r4, #0]
 8003144:	2778      	movs	r7, #120	@ 0x78
 8003146:	4832      	ldr	r0, [pc, #200]	@ (8003210 <_printf_i+0x23c>)
 8003148:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800314c:	6823      	ldr	r3, [r4, #0]
 800314e:	6831      	ldr	r1, [r6, #0]
 8003150:	061f      	lsls	r7, r3, #24
 8003152:	f851 5b04 	ldr.w	r5, [r1], #4
 8003156:	d402      	bmi.n	800315e <_printf_i+0x18a>
 8003158:	065f      	lsls	r7, r3, #25
 800315a:	bf48      	it	mi
 800315c:	b2ad      	uxthmi	r5, r5
 800315e:	6031      	str	r1, [r6, #0]
 8003160:	07d9      	lsls	r1, r3, #31
 8003162:	bf44      	itt	mi
 8003164:	f043 0320 	orrmi.w	r3, r3, #32
 8003168:	6023      	strmi	r3, [r4, #0]
 800316a:	b11d      	cbz	r5, 8003174 <_printf_i+0x1a0>
 800316c:	2310      	movs	r3, #16
 800316e:	e7ab      	b.n	80030c8 <_printf_i+0xf4>
 8003170:	4826      	ldr	r0, [pc, #152]	@ (800320c <_printf_i+0x238>)
 8003172:	e7e9      	b.n	8003148 <_printf_i+0x174>
 8003174:	6823      	ldr	r3, [r4, #0]
 8003176:	f023 0320 	bic.w	r3, r3, #32
 800317a:	6023      	str	r3, [r4, #0]
 800317c:	e7f6      	b.n	800316c <_printf_i+0x198>
 800317e:	4616      	mov	r6, r2
 8003180:	e7bd      	b.n	80030fe <_printf_i+0x12a>
 8003182:	6833      	ldr	r3, [r6, #0]
 8003184:	6825      	ldr	r5, [r4, #0]
 8003186:	1d18      	adds	r0, r3, #4
 8003188:	6961      	ldr	r1, [r4, #20]
 800318a:	6030      	str	r0, [r6, #0]
 800318c:	062e      	lsls	r6, r5, #24
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	d501      	bpl.n	8003196 <_printf_i+0x1c2>
 8003192:	6019      	str	r1, [r3, #0]
 8003194:	e002      	b.n	800319c <_printf_i+0x1c8>
 8003196:	0668      	lsls	r0, r5, #25
 8003198:	d5fb      	bpl.n	8003192 <_printf_i+0x1be>
 800319a:	8019      	strh	r1, [r3, #0]
 800319c:	2300      	movs	r3, #0
 800319e:	4616      	mov	r6, r2
 80031a0:	6123      	str	r3, [r4, #16]
 80031a2:	e7bc      	b.n	800311e <_printf_i+0x14a>
 80031a4:	6833      	ldr	r3, [r6, #0]
 80031a6:	2100      	movs	r1, #0
 80031a8:	1d1a      	adds	r2, r3, #4
 80031aa:	6032      	str	r2, [r6, #0]
 80031ac:	681e      	ldr	r6, [r3, #0]
 80031ae:	6862      	ldr	r2, [r4, #4]
 80031b0:	4630      	mov	r0, r6
 80031b2:	f000 f859 	bl	8003268 <memchr>
 80031b6:	b108      	cbz	r0, 80031bc <_printf_i+0x1e8>
 80031b8:	1b80      	subs	r0, r0, r6
 80031ba:	6060      	str	r0, [r4, #4]
 80031bc:	6863      	ldr	r3, [r4, #4]
 80031be:	6123      	str	r3, [r4, #16]
 80031c0:	2300      	movs	r3, #0
 80031c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80031c6:	e7aa      	b.n	800311e <_printf_i+0x14a>
 80031c8:	4632      	mov	r2, r6
 80031ca:	4649      	mov	r1, r9
 80031cc:	4640      	mov	r0, r8
 80031ce:	6923      	ldr	r3, [r4, #16]
 80031d0:	47d0      	blx	sl
 80031d2:	3001      	adds	r0, #1
 80031d4:	d0ad      	beq.n	8003132 <_printf_i+0x15e>
 80031d6:	6823      	ldr	r3, [r4, #0]
 80031d8:	079b      	lsls	r3, r3, #30
 80031da:	d413      	bmi.n	8003204 <_printf_i+0x230>
 80031dc:	68e0      	ldr	r0, [r4, #12]
 80031de:	9b03      	ldr	r3, [sp, #12]
 80031e0:	4298      	cmp	r0, r3
 80031e2:	bfb8      	it	lt
 80031e4:	4618      	movlt	r0, r3
 80031e6:	e7a6      	b.n	8003136 <_printf_i+0x162>
 80031e8:	2301      	movs	r3, #1
 80031ea:	4632      	mov	r2, r6
 80031ec:	4649      	mov	r1, r9
 80031ee:	4640      	mov	r0, r8
 80031f0:	47d0      	blx	sl
 80031f2:	3001      	adds	r0, #1
 80031f4:	d09d      	beq.n	8003132 <_printf_i+0x15e>
 80031f6:	3501      	adds	r5, #1
 80031f8:	68e3      	ldr	r3, [r4, #12]
 80031fa:	9903      	ldr	r1, [sp, #12]
 80031fc:	1a5b      	subs	r3, r3, r1
 80031fe:	42ab      	cmp	r3, r5
 8003200:	dcf2      	bgt.n	80031e8 <_printf_i+0x214>
 8003202:	e7eb      	b.n	80031dc <_printf_i+0x208>
 8003204:	2500      	movs	r5, #0
 8003206:	f104 0619 	add.w	r6, r4, #25
 800320a:	e7f5      	b.n	80031f8 <_printf_i+0x224>
 800320c:	0800352f 	.word	0x0800352f
 8003210:	08003540 	.word	0x08003540

08003214 <memmove>:
 8003214:	4288      	cmp	r0, r1
 8003216:	b510      	push	{r4, lr}
 8003218:	eb01 0402 	add.w	r4, r1, r2
 800321c:	d902      	bls.n	8003224 <memmove+0x10>
 800321e:	4284      	cmp	r4, r0
 8003220:	4623      	mov	r3, r4
 8003222:	d807      	bhi.n	8003234 <memmove+0x20>
 8003224:	1e43      	subs	r3, r0, #1
 8003226:	42a1      	cmp	r1, r4
 8003228:	d008      	beq.n	800323c <memmove+0x28>
 800322a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800322e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003232:	e7f8      	b.n	8003226 <memmove+0x12>
 8003234:	4601      	mov	r1, r0
 8003236:	4402      	add	r2, r0
 8003238:	428a      	cmp	r2, r1
 800323a:	d100      	bne.n	800323e <memmove+0x2a>
 800323c:	bd10      	pop	{r4, pc}
 800323e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003242:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003246:	e7f7      	b.n	8003238 <memmove+0x24>

08003248 <_sbrk_r>:
 8003248:	b538      	push	{r3, r4, r5, lr}
 800324a:	2300      	movs	r3, #0
 800324c:	4d05      	ldr	r5, [pc, #20]	@ (8003264 <_sbrk_r+0x1c>)
 800324e:	4604      	mov	r4, r0
 8003250:	4608      	mov	r0, r1
 8003252:	602b      	str	r3, [r5, #0]
 8003254:	f7fd fa40 	bl	80006d8 <_sbrk>
 8003258:	1c43      	adds	r3, r0, #1
 800325a:	d102      	bne.n	8003262 <_sbrk_r+0x1a>
 800325c:	682b      	ldr	r3, [r5, #0]
 800325e:	b103      	cbz	r3, 8003262 <_sbrk_r+0x1a>
 8003260:	6023      	str	r3, [r4, #0]
 8003262:	bd38      	pop	{r3, r4, r5, pc}
 8003264:	20000714 	.word	0x20000714

08003268 <memchr>:
 8003268:	4603      	mov	r3, r0
 800326a:	b510      	push	{r4, lr}
 800326c:	b2c9      	uxtb	r1, r1
 800326e:	4402      	add	r2, r0
 8003270:	4293      	cmp	r3, r2
 8003272:	4618      	mov	r0, r3
 8003274:	d101      	bne.n	800327a <memchr+0x12>
 8003276:	2000      	movs	r0, #0
 8003278:	e003      	b.n	8003282 <memchr+0x1a>
 800327a:	7804      	ldrb	r4, [r0, #0]
 800327c:	3301      	adds	r3, #1
 800327e:	428c      	cmp	r4, r1
 8003280:	d1f6      	bne.n	8003270 <memchr+0x8>
 8003282:	bd10      	pop	{r4, pc}

08003284 <memcpy>:
 8003284:	440a      	add	r2, r1
 8003286:	4291      	cmp	r1, r2
 8003288:	f100 33ff 	add.w	r3, r0, #4294967295
 800328c:	d100      	bne.n	8003290 <memcpy+0xc>
 800328e:	4770      	bx	lr
 8003290:	b510      	push	{r4, lr}
 8003292:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003296:	4291      	cmp	r1, r2
 8003298:	f803 4f01 	strb.w	r4, [r3, #1]!
 800329c:	d1f9      	bne.n	8003292 <memcpy+0xe>
 800329e:	bd10      	pop	{r4, pc}

080032a0 <_realloc_r>:
 80032a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032a4:	4680      	mov	r8, r0
 80032a6:	4615      	mov	r5, r2
 80032a8:	460c      	mov	r4, r1
 80032aa:	b921      	cbnz	r1, 80032b6 <_realloc_r+0x16>
 80032ac:	4611      	mov	r1, r2
 80032ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80032b2:	f7ff bc39 	b.w	8002b28 <_malloc_r>
 80032b6:	b92a      	cbnz	r2, 80032c4 <_realloc_r+0x24>
 80032b8:	f7ff fbcc 	bl	8002a54 <_free_r>
 80032bc:	2400      	movs	r4, #0
 80032be:	4620      	mov	r0, r4
 80032c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80032c4:	f000 f81a 	bl	80032fc <_malloc_usable_size_r>
 80032c8:	4285      	cmp	r5, r0
 80032ca:	4606      	mov	r6, r0
 80032cc:	d802      	bhi.n	80032d4 <_realloc_r+0x34>
 80032ce:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80032d2:	d8f4      	bhi.n	80032be <_realloc_r+0x1e>
 80032d4:	4629      	mov	r1, r5
 80032d6:	4640      	mov	r0, r8
 80032d8:	f7ff fc26 	bl	8002b28 <_malloc_r>
 80032dc:	4607      	mov	r7, r0
 80032de:	2800      	cmp	r0, #0
 80032e0:	d0ec      	beq.n	80032bc <_realloc_r+0x1c>
 80032e2:	42b5      	cmp	r5, r6
 80032e4:	462a      	mov	r2, r5
 80032e6:	4621      	mov	r1, r4
 80032e8:	bf28      	it	cs
 80032ea:	4632      	movcs	r2, r6
 80032ec:	f7ff ffca 	bl	8003284 <memcpy>
 80032f0:	4621      	mov	r1, r4
 80032f2:	4640      	mov	r0, r8
 80032f4:	f7ff fbae 	bl	8002a54 <_free_r>
 80032f8:	463c      	mov	r4, r7
 80032fa:	e7e0      	b.n	80032be <_realloc_r+0x1e>

080032fc <_malloc_usable_size_r>:
 80032fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003300:	1f18      	subs	r0, r3, #4
 8003302:	2b00      	cmp	r3, #0
 8003304:	bfbc      	itt	lt
 8003306:	580b      	ldrlt	r3, [r1, r0]
 8003308:	18c0      	addlt	r0, r0, r3
 800330a:	4770      	bx	lr

0800330c <_init>:
 800330c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800330e:	bf00      	nop
 8003310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003312:	bc08      	pop	{r3}
 8003314:	469e      	mov	lr, r3
 8003316:	4770      	bx	lr

08003318 <_fini>:
 8003318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800331a:	bf00      	nop
 800331c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800331e:	bc08      	pop	{r3}
 8003320:	469e      	mov	lr, r3
 8003322:	4770      	bx	lr
